<?php

/**
 * @defgroup labdoolib LabdooLib: Set of core APIs and library functions exposed by Labdoo
 *
 * This module is Labdoo's "Swiss Army Knife" providing the general core functionality
 * and exposing general Labdoo APIs that are not specific to any other more specialized module
 *
 */


/**
 * @file
 * Main file for the Labdoo Library module
 *
 * @ingroup labdoolib 
 */

/**
 *
 * Given a country code, it returns the name of the country
 *
 * @param string $countryCode
 *   Country code
 * @return string
 *   Country name
 *
 */
function labdoo_country_code2name($countryCode) {
  $countryNames = location_get_iso3166_list();
  if(array_key_exists($countryCode, $countryNames))
    return $countryNames[$countryCode];
  else
    return "[country not defined]";
}


/**
 * Prints all the countries and cities within Labdoo.org
 *
 * This function can be used to generate cloudtags with http://worditout.com/word-cloud/make-a-new-one
 *
 */
function labdoo_list_all_countries($unique=False) {
  if($unique)
    $query = "SELECT DISTINCT country FROM location";
  else
    $query = "SELECT country FROM location";
  $countries = db_query($query);
  foreach($countries as $country) {
    # Substitute blank spaces with sign "~" so that countries with multiple words can be processed together
    $countrySet = $countrySet . ", " . str_replace(" ", "~", labdoo_country_code2name($country->country));
  }
  drupal_set_message($countrySet);
  $query = "SELECT DISTINCT city FROM location";
  $cities = db_query($query);
  foreach($cities as $city) {
    $citySet = $citySet . ", " . str_replace(" ", "~", $city->city);
  }
  drupal_set_message($citySet);
}


/**
 * Generates the title of a dootrip 
 *
 * @param node The node of the dootrip 
 * @param dootripId The numeric identifier of the dootrip 
 *
 * @return a string containing the new title
 *
 */
function _generate_dootrip_title($node, $dootripId) {

  $srcCity = labdoo_lib_get_field($node, 'field_origin_of_the_trip', 'node', 'city'); 
  $srcCountry = labdoo_lib_get_field($node, 'field_origin_of_the_trip', 'node', 'country'); 
  $srcCountry = labdoo_country_code2name($srcCountry);

  $dstCity = labdoo_lib_get_field($node, 'field_destination_of_the_trip', 'node', 'city'); 
  $dstCountry = labdoo_lib_get_field($node, 'field_destination_of_the_trip', 'node', 'country'); 
  $dstCountry = labdoo_country_code2name($dstCountry);

  if($srcCity) 
    $srcLocation = $srcCity . " (" . $srcCountry . ")";
  else
    $srcLocation = $srcCountry;
  if($dstCity)
    $dstLocation = $dstCity . " (" . $dstCountry . ")";
  else
    $dstLocation = $dstCountry;
  $dootripIdStr = sprintf("%09d", $dootripId);
  $newTitle = "Dootrip #" . $dootripIdStr . " - from " . $srcLocation . " to " . $dstLocation;

  return $newTitle;
}


/**
 * Updates the location of a dootronic to match that of its 
 * assigned edoovillage
 *
 * @param node Node id of the dootronic
 *
 */
function _update_dooject_location_from_edoovillage($node) {

  // Get destination project
  $query = "SELECT field_edoovillage_destination_target_id 
            FROM field_data_field_edoovillage_destination WHERE entity_id=$node->nid";
  $edoovillageId = db_query($query)->fetchField();
  if(!$edoovillageId)
    return;

  // Get the location id of the destination project
  $query = "SELECT lid FROM location_instance project 
            WHERE vid=(SELECT MAX(vid) FROM location_instance WHERE nid=project.nid) AND (nid=$edoovillageId)";
  $edoovillageLid = db_query($query)->fetchField();
  if(!$edoovillageLid)
    return;

  // Update the location of the laptop to be that of the destination project
  $query = "SELECT vid FROM location_instance project 
            WHERE vid=(SELECT MAX(vid) FROM location_instance WHERE nid=project.nid) AND (nid=$node->nid)";
  $laptopVid = db_query($query)->fetchField();
  $query ="UPDATE location_instance SET lid=$edoovillageLid WHERE vid=$laptopVid AND nid=$node->nid";
  $result = db_query($query);

  return;
}


/**
 * Updates the original book reference in a book node, it should
 * only be invoked if field_is_first_page is set to TRUE
 *
 * @param node Node id of the book
 *
 */
function _update_book_reference($node) {
  $nodeLoaded = node_load($node->nid);
  $nodeLoaded->field_reference_book[$nodeLoaded->language][0]['target_id'] = $node->nid;
  node_save($nodeLoaded);
  return;
}


/**
 * Updates a hub. This function is useful for instance when
 * there is a need to updated computed fields (like the 'hub branches').
 *
 * @param node Node id of the dooject
 *
 */
function _update_hub($node) {
  field_attach_update('node', $node);
  return;
}


/**
 * Attempts to estimate latitude and longitude from the names of the city and country
 * by querying an Internet service. Therefore, requires connectivity to the Internet.
 * To avoid all same [country, city] queries be mapped onto the same point, a small 
 * random value is added to both latitude and longitude.
 * Cache implementation:
 *
 * Implementation note:
 *   In order to avoid consuming to much network bandwidth and exhausting the Google API
 *   quota, this function uses a cache. The cache stores geolocation query results. 
 *
 *   To see the current status of the cache, run the following db command:
 *     mysql> SELECT cid FROM cache WHERE cid LIKE '%labdoo_lookup_coordinates%';
 *   To clean the cash, run the following drush command:
 *     # drush php-eval "cache_clear_all('labdoo_lookup_coordinates', 'cache', TRUE);" 
 *
 * @param string $country
 *   Country code (e.g. us, de, ...)
 * @param string $city
 *   City name (e.g. New York City, Nairobi, ...)
 * @param string $lat
 *   Latitude returned as result
 * @param string $long
 *   Longitude returned as result 
 * @param boolean $silent
 *   If true, do not display warning messages
 * @param street $street
 *   Street name
 * @param string $state
 *   State or province
 * @param string $zip
 *   Zip code
 * @param integer $accuracy
 *   Factor to help control the accuracy via the random number added to lat and lon 
 * @return integer 
 *   Returns -1 if it could not resolve the query, 0 otherwise.
 *
 */
function labdoo_lookup_coordinates($country, $city, &$lat, &$lon, $silent=True, $street="", $state="", $zip="", $accuracy=100) {
    // Try to use the cached value if available
    $locationString = $street . "+" . $city . "+" . $zip . "+" . $country;
    if($cacheResult = cache_get('labdoo_lookup_coordinates'.$locationString)) {
      $coordinates = $cacheResult->data;
    }
    else {
      // See https://console.cloud.google.com/apis/credentials?folder=&organizationId=&project=labdoo.org:api-project-592255177105
      // for a list of keys
      $query = str_replace(' ', '+', 'https://maps.googleapis.com/maps/api/geocode/json?address='.$locationString.'&key=xxx');
      $mapQuery = drupal_http_request($query);
      if(!property_exists($mapQuery, 'data')) {
        if($silent == False) {
          drupal_set_message(t('Could not resolve coordinates from the given city and country names.'), 'warning', FALSE);
          drupal_set_message('City: ' . $city . ' | country: ' . $country, 'warning', FALSE);
        }
        return -1;
      }
      $mapQueryDecoded = drupal_json_decode($mapQuery->data);
      if(!isset($mapQueryDecoded['results'][0])) {
        if($mapQueryDecoded['status'] == "OVER_QUERY_LIMIT") {
//        drupal_set_message(t('We have exceeded the daily request quota for computing the map.
//                              Please email Labdoo at contact@labdoo.org and send us the URL of i
//                              this page so we can take a look, thanks. The Labdoo Team'), $repeat=FALSE);
        }
        if($silent == False) {
          drupal_set_message(t('Could not resolve coordinates from the given city and country names.'), 'warning', FALSE);
          drupal_set_message('City: ' . $city . ' | country: ' . $country, 'warning', FALSE);
        }
        return -1;
      }
      $coordinates = $mapQueryDecoded['results'][0]['geometry']['location'];
      // Cache the value so we don't have to query the Google API again
      cache_set('labdoo_lookup_coordinates'.$locationString, $coordinates, 'cache');
    }

    $lat = strval(floatval($coordinates['lat'])+rand(-1 * $accuracy, 1 * $accuracy)/100000);
    $lon = strval(floatval($coordinates['lng'])+rand(-1 * $accuracy, 1 * $accuracy)/100000); 
    return 0;
}


/**
 * Renders a map geolocating the node where this function is invoked from
 *
 * @param int $nodeId The identifier of a node
 * @param boolean $displayDoojects If true, display doojects associated with node
 * @param string $divId The identifier of the div tag
 *
 * @return map Returns a map that can be rendered 
 *
 */
function labdoo_render_map_geolocate_node($nodeId = NULL, $displayDoojects = False, $divId = "map-geolocate-node") {
  global $language;

  if($nodeId == NULL) {
    // Make sure this is called from a valid node
    if ((arg(0) != 'node') || !is_numeric(arg(1))) 
      return;
    $nodeId = arg(1);
  }

  $node = node_load($nodeId);
  if($node == FALSE)
    return;

  // Accept only certain types of content types
  $types = array('laptop' => 1,'dootrip' => 1,'hub' => 1, 'edoovillage' => 1) ;
  if(!isset($types[$node->type]))
    return;

  $map_style = 'height:200px; width:1170px'; 
  // TODO: the following switch should be made based on whether
  // the client is using a mobile browser or not, instead of content type.
  // Consider installing a module like context_mobile_detect and using
  // user-agent information to do this switch.
  if($node->type == 'hub' || $node->type == 'edoovillage')
    $map_style = 'height:250px; width:700px'; 

  $map_options = '{"mapTypeId":"roadmap", "zoom":10}';
  $marker_color = NULL; 
  $visitor_marker = FALSE;
  $center_option = 1;
  $center_latlng = array(0, 0);

  if($node->type != 'dootrip') {
    $locations = array();
    $locations[0] = new stdClass();
    $locations[0]->latitude = $node->locations[0]['latitude'];
    $locations[0]->longitude = $node->locations[0]['longitude']; 

    if($node->type == 'laptop') {
      $locations[0]->balloon_text = "Dootronic ID: $node->title";
    }
    if($node->type == 'edoovillage') {
      $nodeCity = $node->locations[0]['city'];
      $nodeCountry = labdoo_country_code2name($node->locations[0]['country']);
      $locations[0]->balloon_text = "Edoovillage: $nodeCity, $nodeCountry";
    }
    if($node->type == 'hub') {
      $nodeCity = $node->locations[0]['city'];
      $nodeCountry = labdoo_country_code2name($node->locations[0]['country']);
      $locations[0]->balloon_text = "Hub: $nodeCity, $nodeCountry";
      // Geolocate the branches too
      $hubBranches = labdoo_lib_hub_branches_list($node->nid);
      $i = 0;
      foreach($hubBranches as $hubBranch) {
        $i++;
        $hubBranchLoaded = node_load($hubBranch);
        $nodeCity = $hubBranchLoaded->locations[0]['city'];
        $nodeCountry = labdoo_country_code2name($hubBranchLoaded->locations[0]['country']);
        $locations[$i] = new stdClass();
        $locations[$i]->latitude = $hubBranchLoaded->locations[0]['latitude'];
        $locations[$i]->longitude = $hubBranchLoaded->locations[0]['longitude'];
        $hubUri = drupal_get_path_alias("node/" .  $hubBranchLoaded->nid, $language->language);
        $locations[$i]->balloon_text = "<a href='$hubUri'>Hub branch: $nodeCity, $nodeCountry</a>";
        $locations[$i]->marker_color = "labdoo-marker-orange";
      }
      $map_options = '{"mapTypeId":"roadmap", "zoom":7}';
    }
    if($node->type == 'edoovillage' && $displayDoojects) {
      $query = "SELECT entity_id FROM field_data_field_edoovillage_destination WHERE (field_edoovillage_destination_target_id=:eid)";
      $placeHolders[':eid'] = $nodeId; 
      $result = db_query($query, $placeHolders);
      $i = 1;
      foreach($result as $item) {
        $nodeDooject = node_load($item->entity_id);
        $locations[$i] = new stdClass();
        $doojectLat = $nodeDooject->locations[0]['latitude'];
        $doojectLat = strval(floatval($doojectLat)+rand(-500,500)/10000000);
        $locations[$i]->latitude = $doojectLat;
        $doojectLon = $nodeDooject->locations[0]['longitude'];
        $doojectLon = strval(floatval($doojectLon)+rand(-500,500)/10000000);
        $locations[$i]->longitude = $doojectLon;
        $locations[$i]->balloon_text = "Dootronic ID: $nodeDooject->title";
        $i = $i + 1;
      }
    }
  }
  else { // It's a dootrip
    // Dootrips are special in that they are geolocated via the fields origin and destination of the trip,
    // rather than the standard location node fields.
    $srcCity = labdoo_lib_get_field($node, 'field_origin_of_the_trip', 'node', 'city'); 
    $srcCity = preg_replace('/\s+/', '%20', $srcCity);
    $srcCountry = labdoo_lib_get_field($node, 'field_origin_of_the_trip', 'node', 'country'); 
    $srcCountryLong = labdoo_country_code2name($srcCountry);

    $dstCity = labdoo_lib_get_field($node, 'field_destination_of_the_trip', 'node', 'city'); 
    $dstCity = preg_replace('/\s+/', '%20', $dstCity);
    $dstCountry = labdoo_lib_get_field($node, 'field_destination_of_the_trip', 'node', 'country'); 
    $dstCountryLong = labdoo_country_code2name($dstCountry);

    // For dootrips, just make the resolution of the locations city wide (not street wide)
    if(labdoo_lookup_coordinates($srcCountry, $srcCity, $locations[0]->latitude, $locations[0]->longitude) < 0) 
      return;
    $locations[0]->balloon_text = "Dootrip origin: " . str_replace('%20', ' ', $srcCity) . ", $srcCountryLong";
    if(labdoo_lookup_coordinates($dstCountry, $dstCity, $locations[1]->latitude, $locations[1]->longitude) < 0) 
      return;
    $locations[1]->balloon_text = "Dootrip destination: " . str_replace('%20', ' ', $dstCity) . ", $dstCountryLong";

    $map_style = 'height:400px; width:1170px'; 
    $map_options = '{"mapTypeId":"roadmap", "zoom":2}';
  }

  return ip_geoloc_output_map_multi_location($locations, $divId, $map_options, $map_style, 
                                             $marker_color, $visitor_marker, 
                                             $center_option, $center_latlng, FALSE);
}


/**
 * Renders a dooject's header
 *
 * @return The code to render
 *
 */
function labdoo_render_dooject_header() {
  global $user;
  global $language;
  $defaultLanguage = language_default();
  $htmlCode = "";

  if ((arg(0) != 'node') || !is_numeric(arg(1)))
    return;

  $nodeObj = node_load(arg(1));
  $nodeId = $nodeObj->nid;

  // Accept only certain types of content types
  $types = array('laptop' => 1) ;
  if(!isset($types[$nodeObj->type]))
    return;

  if(drupal_get_path_alias(current_path()) == "node/" . $nodeId . "/edit")
    return;

  $laptopId = $nodeObj->title;

  $query = "SELECT field_edoovillage_destination_target_id 
            FROM field_data_field_edoovillage_destination WHERE entity_id=$nodeId";
  $edoovillageId = db_query($query)->fetchField();

  $numDoojects = lbd_get_total_num_objects("laptop");

  if(intval($laptopId) == $numDoojects)
    $nextIdFull = sprintf("%09d", 1);
  else
    $nextIdFull = sprintf("%09d", intval(intval($laptopId)+1));
  if(intval($laptopId) == 1)
    $prevIdFull = sprintf("%09d", intval(intval($numDoojects)));
  else
    $prevIdFull = sprintf("%09d", intval(intval($laptopId)-1));

  $tagsUri = "/content/tag-one-dooject?id=" . $laptopId;

  // Table header
  $htmlCode = $htmlCode . '<table align="center" width="1150px"><tr><td align="left">';

  // Hack: Add a tiny invisible image (of size zero in fact) to control the image that will show up 
  // when sharing the page with addtoany 
  $htmlCode = $htmlCode . '<img src="/profiles/labdoo/files/pictures/laptop.png" width="0" style="visibility:hidden"/>';

  // Left arrow
  $htmlCode = $htmlCode . "<a style='float: left;' href='../laptop/".$prevIdFull."'>
              <img src='/profiles/labdoo/files/pictures/arrow_left.png' style='float: right; width: 30px; height: 31px;'/></span></a>";

  $htmlCode = $htmlCode . '</td><td align="center">';

  $htmlCode = $htmlCode . "&nbsp&nbsp&nbsp";

  // Print tags
  $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/tag.png' style='width: 30px; height: 21px;'/>&nbsp;
              <a href='".$tagsUri."' target='_blank'>".t("Print tags")."</span></a>&nbsp&nbsp&nbsp";

  // Photo album icon and button
  if($edoovillageId) {
    $nodeEdoovillage = node_load($edoovillageId);
    if($nodeEdoovillage) {
      $wNode = entity_metadata_wrapper('node', $nodeEdoovillage);
      $nodeAlbum = $wNode->field_edoovillage_photo_album->value();
      $albumUri = drupal_get_path_alias("node/" .  $nodeAlbum->nid, $language->language);
      if($language->language != $defaultLanguage->language)
        $albumUri = $language->language . "/" . $albumUri;
      $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/edoovillage.png' style='width: 35px; height: 30px;'/>&nbsp;
                  <a href='/".$albumUri."'>" . t("Photo album") . "</span></a>&nbsp&nbsp&nbsp";
    }
  }

  // Follow dooject button
  if (user_is_logged_in()) {
    $userId = $user->uid;
    $userObj = user_load($userId);
    if(labdoo_is_dooject_followed($nodeObj, $userObj)) {
      $followDoojectUrl = strtok(request_uri(), '?') . "?m=f&d=$nodeId&u=$userId&v=0";
      $followMsg = "Unfollow this dootronic";
      $followIcon = "signal.png";
      $hoverMessage = t('Click to stop receiving updates of this dootronic');
    }
    else {
      $followDoojectUrl = strtok(request_uri(), '?') . "?m=f&d=$nodeId&u=$userId&v=1";
      $followMsg = t("Follow this dootronic");
      $followIcon = "signal-off.png";
      $hoverMessage = t('Click to receive updates about this dootronic');
    }
    $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/".$followIcon."' style='width: 30px; height: 30px;'/>&nbsp;
                <a style='cursor:Pointer;' title='".$hoverMessage."' href='".$followDoojectUrl."'>" .$followMsg."</span></a>&nbsp&nbsp&nbsp";
  }
  else {
    $followDoojectUrl = request_uri() . "/../../content/dooject-update?m=f&d=$nodeId&v=1";
    $followMsg = t("Follow this dootronic");
    $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/signal.png' style='width: 30px; height: 30px;'/>&nbsp;
                <span style='cursor:Pointer; color:grey' title='Log in to modify this field'>".$followMsg."</span>&nbsp&nbsp&nbsp";
  }

  // Pick me up button
  $userId = $user->uid;
  $wDoojectNode = entity_metadata_wrapper('node', $nodeObj);
  $currPickmeFlag = $wDoojectNode->field_pick_me_up->value();
  if($currPickmeFlag) {
    $pickmeupUrl = strtok(request_uri(), '?') . "?m=p&d=$nodeId&u=$userId&v=0";
    $pickmeupMsg = "Pick me up (activated)";
    $pickmeupIcon = 'truck.png';
    $hoverMessage = t('Click to turn off "pick me up"');
  }
  else {
    $pickmeupUrl = strtok(request_uri(), '?') . "?m=p&d=$nodeId&u=$userId&v=1";
    $pickmeupMsg = "Pick me up (deactivated)";
    $pickmeupIcon = 'truck-off.png';
    $hoverMessage = t('Click this link if you want someone from a nearby Labdoo hub to pick up this dootronic from its current location');
  }
  if(node_access("update", $nodeObj, $user)) {
    $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/" . $pickmeupIcon . "' style='width: 35px; height: 30px;'/>&nbsp;
                <a style='cursor:Pointer;' title='".$hoverMessage."' href='".$pickmeupUrl."'>" .$pickmeupMsg."</span></a>&nbsp&nbsp&nbsp";
  }
  else {
    if (user_is_logged_in()) {
      $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/" . $pickmeupIcon . "' style='width: 35px; height: 30px;'/>&nbsp;
                  <span style='color:grey;'>".$pickmeupMsg."</span>&nbsp&nbsp&nbsp";
    }
    else {
      $htmlCode = $htmlCode . "<img src='/profiles/labdoo/files/pictures/" . $pickmeupIcon . "' style='width: 35px; height: 30px;'/>&nbsp;
                  <span style='cursor:Pointer; color:grey;' title='Log in to modify this field'>".$pickmeupMsg."</span>&nbsp&nbsp&nbsp";
    }
  }

  $htmlCode = $htmlCode . '</td><td align="right">';

  // Right arrow
  $htmlCode = $htmlCode . "<a style='float: right;' href='../laptop/".$nextIdFull."'>
              <img src='/profiles/labdoo/files/pictures/arrow_right.png' style='float: right; width: 30px; height: 31px;'/></span></a>";

  // Table ending
  $htmlCode = $htmlCode . '</td></tr></tbody></table>';

  return($htmlCode);
}


/**
 * Returns the previous or next node from a given base node
 *
 * @param object $node The base node
 * @param string $op The operation, one of {'prev', 'next'}
 *
 * @return The ID of the previous or next node
 *
 */
function labdoo_lib_prev_next_node($node, $op) {

  $nid = $node->nid;
  $type = $node->type;

  if($op == 'next') {
    $query = "SELECT nid FROM node WHERE (nid > $nid AND type = '$type') ORDER BY nid LIMIT 1";
    $nodeId = db_query($query)->fetchField();
    if(!$nodeId) { // wrap around
      $query = "SELECT min(nid) FROM node WHERE type = '$type'";
      $nodeId = db_query($query)->fetchField();
    }
  }
  else { // prev
    $query = "SELECT nid FROM node WHERE (nid < $nid AND type = '$type') ORDER BY nid DESC LIMIT 1";
    $nodeId = db_query($query)->fetchField();
    if(!$nodeId) { // wrap around
      $query = "SELECT max(nid) FROM node WHERE type = '$type'";
      $nodeId = db_query($query)->fetchField();
    }
  }
  return $nodeId;
}


/**
 * Generates a table listing all the dootronics linked to a dootrip.
 *
 * @param node $node The dootrip node.
 *
 * @return array The table with the dootronics linked to the dootrip.
 * 
 */
function _generate_dootrip_dootronics_table($node) {
  $dootronicsTable = array();

  // Extract dootronics list
  $wNode = entity_metadata_wrapper('node', $node);
  $doojectsList = $wNode->field_laptops->value();
  if(!$doojectsList) 
    return $dootronicsTable;

  // Add the table header
  $i = 0;
  $j = 0;
  $dootronicsTable[$i][$j++] = "ID";
  $dootronicsTable[$i][$j++] = "Status";
  $dootronicsTable[$i][$j++] = "Model";
  $dootronicsTable[$i][$j++] = "Serial number";
  $dootronicsTable[$i][$j++] = "Watt-hours";
  $dootronicsTable[$i][$j++] = "Weight";
  $dootronicsTable[$i][$j++] = "Edoovillage";
  $dootronicsTable[$i][$j++] = "Edoovillage link";

  // For each dootronic, add a row to the table
  // (make sure to order items correctly)
  foreach($doojectsList as $doojectNode) {
    if(!key_exists('nid', $doojectNode))
      continue;
    $i++;
    $j = 0;
    $doojectLoaded = node_load($doojectNode->nid);
    $wDoojectLoaded = entity_metadata_wrapper('node', $doojectLoaded);
    // Extract the ID
    $dootronicsTable[$i][$j++] = "# " . $doojectLoaded->title; 
    // Extract the status
    $dootronicsTable[$i][$j++] = $wDoojectLoaded->field_status->value();
    // Extract the model 
    $dootronicsTable[$i][$j++] = $wDoojectLoaded->field_model->value();
    // Extract the serial number 
    $dootronicsTable[$i][$j++] = $wDoojectLoaded->field_serial_number->value();
    // Extract the watt-hours 
    $dootronicsTable[$i][$j++] = $wDoojectLoaded->field_battery_watt_hours->value();
    // Extract the weight (hack: should extract Kgms units from the field)
    $dootronicsTable[$i][$j++] = $wDoojectLoaded->field_dooject_weight->value() . " Kgms"; 
    // Extract the edoovillage (if any)
    $edoovillageNode = $wDoojectLoaded->field_edoovillage_destination->value(); 
    if($edoovillageNode) 
      $dootronicsTable[$i][$j++] = lbd_nodeid2title($edoovillageNode->nid); 
    else
      $dootronicsTable[$i][$j++] = "Not assigned";
    // Extract the edoovillage link
    if($edoovillageNode) 
      $dootronicsTable[$i][$j++] = "https://platform.labdoo.org/" . drupal_get_path_alias("node/" . $edoovillageNode->nid);
    else
      $dootronicsTable[$i][$j++] = "Not assigned";
  }

  return($dootronicsTable);
}


/**
 * Renders a dooject's header
 *
 * @return The code to render
 *
 */
function labdoo_render_dootrip_header() {
  global $language;
  $langCode = $language->language;
  $htmlCode = '';

  $nodeObj = node_load(arg(1));
  $prevNodeId = labdoo_lib_prev_next_node($nodeObj, 'prev');
  $nextNodeId = labdoo_lib_prev_next_node($nodeObj, 'next');

  $prevUri = drupal_get_path_alias("node/" . $prevNodeId, $langCode);
  $nextUri = drupal_get_path_alias("node/" . $nextNodeId, $langCode);

  // Table header
  $htmlCode = $htmlCode . '<table align="center" width="1150px"><tr><td align="left" width="60px">';

  // Left arrow
  $htmlCode = $htmlCode . "<a style='float: left;' href='../" . $prevUri . "'>
              <img src='/profiles/labdoo/files/pictures/arrow_left.png' style='float: right; width: 30px; height: 31px;'/></span></a>";

  $htmlCode = $htmlCode . '</td><td align="left">';

  // Button to download list of dootronics
  $dootronicsTable = _generate_dootrip_dootronics_table($nodeObj);
  $dootripDownloadButton = labdoo_table_download_button($dootronicsTable, "downloadButtonDootrips", "download-button-data.png", 180);
  $htmlCode = $htmlCode . $dootripDownloadButton;

  $htmlCode = $htmlCode . '</td><td align="center">';

  // Right arrow
  $htmlCode = $htmlCode . "<a style='float: right;' href='../" . $nextUri . "'>
              <img src='/profiles/labdoo/files/pictures/arrow_right.png' style='float: right; width: 30px; height: 31px;'/></span></a>";

  // Table ending
  $htmlCode = $htmlCode . '</td></tr></tbody></table>';

  return($htmlCode);
}


/**
 * Renders a story's header
 *
 * @return The code to render
 *
 */
function labdoo_render_story_header() {
  global $language;
  $langCode = $language->language;
  $htmlCode = '';

  $nodeObj = node_load(arg(1));
  $prevNodeId = labdoo_lib_prev_next_node($nodeObj, 'prev');
  $nextNodeId = labdoo_lib_prev_next_node($nodeObj, 'next');

  $prevUri = drupal_get_path_alias("node/" . $prevNodeId, $langCode);
  $nextUri = drupal_get_path_alias("node/" . $nextNodeId, $langCode);

  // Button 'go to' on a new row
  $query = "SELECT field_story_edoovillage_target_id FROM field_data_field_story_edoovillage WHERE entity_id=" . arg(1);
  $parentNodeId = db_query($query)->fetchField();
  $loadedParentNode = node_load($parentNodeId);

  if($loadedParentNode->type == "edoovillage")
    $goBackIcon = "/profiles/labdoo/files/pictures/back-to-school-page.png' width='280px'";
  else
    $goBackIcon = "/profiles/labdoo/files/pictures/back-to-hub-page.png' width='230px'";
  $htmlCode = $htmlCode . 
              "<p><a href='../node/$parentNodeId'>
              <img src='$goBackIcon' width='120px'/></a></p>";

  // Table header
  $htmlCode = $htmlCode . '<table align="center" width="1150px"><tr><td align="left" width="140px">';

  // Left arrow
  $htmlCode = $htmlCode . "<p><a style='float: left;' href='../" . $prevUri . "'>
              <img src='/profiles/labdoo/files/pictures/arrow_left.png' width='30px'/>". "&nbsp;" . t("Previous story") ."</a></p>";
  $htmlCode = $htmlCode . '</td><td align="center">';

  // Decorations
  $htmlCode = $htmlCode . '<img src="/profiles/labdoo/files/pictures/labdoo-stories-header.png" width="650px"/>';
  $htmlCode = $htmlCode . '</td><td align="left">';

  // Right arrow
  $htmlCode = $htmlCode . "<p><a style='float: right;' href='../" . $nextUri . "'>" . t("Next story") . "&nbsp;" .
              "<img src='/profiles/labdoo/files/pictures/arrow_right.png' width='30px'/></a></p>";

  // Table ending
  $htmlCode = $htmlCode . '</td></tr></tbody></table>';

  return($htmlCode);
}



/**
 * Displays the header of an edoovillage or a hub.
 *
 * @param integer $nodeId The node identifier of a hub or an edoovillage.
 * @param string $type Determines the type of node corresponding to $nodeId. Can be either "edoovillage" or "hub".
 *
 * @return The renderable header code 
 *
 */
function labdoo_render_edoovillage_hub_header($nodeId = NULL, $type) {
  global $language;

  if($nodeId == NULL) {
    if ((arg(0) != 'node') || !is_numeric(arg(1))) 
      return;
    $nodeId = arg(1);
  }

  // FIXME: this is a bit strange behavior. We should not need to check whether is numeric
  // because node_load should return false if it is not (although i have not checked
  // the internal code for node_load). However, if the user feeds a value like '8a',
  // where '8' is a valide node ID, the node_load actually ends up loading node '8'.
  // So this next clause ensures that this cannot happen.
  if(!is_numeric($nodeId))
    return;

  $nodeObj = node_load($nodeId);
  if($nodeObj == FALSE)
    return;

  $langCode = $language->language;
  $htmlCode = "";

  // Accept only edoovillages and hubs 
  $types = array('hub' => 1, 'edoovillage' => 1);
  if(!isset($types[$nodeObj->type]))
    return;

  // Table header
  $htmlCode = $htmlCode . '<table border="0" cellpadding="1" cellspacing="1" style="width: 600px;"><tbody><tr>';

  // Edoovillage stats 
  $htmlCode = $htmlCode . lbd_display_dooject_column_chart($nodeId, $type);  

  // Table ending
  $htmlCode = $htmlCode . '</tr></tbody></table>';

  return($htmlCode);
}


/**
 * Displays the header of a photo album.
 *
 * @return The renderable header code 
 *
 */
function labdoo_render_photo_album_header() {
  global $language;
  $defaultLanguage = language_default();
  $htmlCode = "";

  if ((arg(0) != 'node') || !is_numeric(arg(1))) 
    return;

  $nodeObj = node_load(arg(1));
  $nodeId = $nodeObj->nid;

  // Accept only certain types of content types
  $types = array('node_gallery_gallery' => 1) ;
  if(!isset($types[$nodeObj->type]))
    return;

  // Table header
  $htmlCode = $htmlCode . '<table border="0" cellpadding="1" cellspacing="1" style="width: 850px;"><tbody><tr><td>';

  // Edoovillage or hub icon and button
  $wNode = entity_metadata_wrapper('node', $nodeObj);
  $gotoIcon = "/sites/default/files/content/general-objects/goto-edoovillage.png";
  $parentNodeType = 'edoovillage';
  $parentNode = $wNode->field_photo_album_edoovillage->value();
  if(!$parentNode) {
    $gotoIcon = "/sites/default/files/content/general-objects/goto-hub.png";
    $parentNodeType = 'hub';
    $parentNode = $wNode->field_photo_album_hub->value();
  }
  $albumUri = drupal_get_path_alias("node/" .  $parentNode->nid, $language->language);
  // First check if the URL has a 'lan' parameter. This is a special fix, please see
  // TODO DE-COLORBOX for more info.
  if(!empty($_GET['lan'])) 
    $albumUri = $_GET['lan'] . "/" . $albumUri;
  else if($language->language != $defaultLanguage->language)
    $albumUri = $language->language . "/" . $albumUri;
  $htmlCode = $htmlCode . '<p class="small" style="font-family: monospace; " align="middle">
                           <a href="/'.$albumUri.'">
                           <img alt="" src="'.$gotoIcon.'" style="width: 150px; "/></a>';

  // Next cell
  $htmlCode = $htmlCode . '</td><td>';

  // Edoovillage stats 
  $htmlCode = $htmlCode . lbd_display_dooject_column_chart($parentNode->nid, $parentNodeType);  

  // Table ending
  $htmlCode = $htmlCode . '</td></tr></tbody></table>';

  return($htmlCode);
}


/**
  * Verifies if this user can be CC-ed instead of BCC-ed in email communications
  *
  * @param user The user object
  *
  * @return True if the user can be CC-ed, false otherwise
  *
  */
function _user_can_be_cced($user) {
  $userRoles = array_values($user->roles);
  if(in_array('superhub manager', $userRoles) ||
     in_array('edoovillage manager', $userRoles) ||
     in_array('hub manager', $userRoles)) { 
    return True;
  }

  return False;
}


/**
 * Generates a comma-separated list of emails that need
 * to be notified upon a change of status of a dooject
 *
 * @param node The dooject's node
 * @param canCC Set to true if we only want the list of emails that can be openly CC-ed instead of BCC-ed
 *
 */
function labdoo_dooject_extract_emails($node, $canCC=False) {
    $emailsList = "";
    $emailsListCC = ""; // Emails that can be CC-ed (instead of BCC-ed)
    $emailSet = array();

    if($node->field_tagger) {
      foreach(field_get_items('node', $node, 'field_tagger') as $element) {
        $userObj = user_load($element['target_id']);
        if(in_array($userObj->mail, $emailSet))
          continue;
        if(_user_can_be_cced($userObj)) {
          $emailsListCC = $emailsListCC . ", " . $userObj->mail;
        }
        else {
          $emailsList = $emailsList . ", " . $userObj->mail;
        }
        array_push($emailSet, $userObj->mail);
      }
    }

    if($node->field_manager) {
      foreach(field_get_items('node', $node, 'field_manager') as $element) {
        $userObj = user_load($element['target_id']);
        if(in_array($userObj->mail, $emailSet))
          continue;
        if(_user_can_be_cced($userObj)) {
          $emailsListCC = $emailsListCC . ", " . $userObj->mail;
        }
        else {
          $emailsList = $emailsList . ", " . $userObj->mail;
        }
        array_push($emailSet, $userObj->mail);
      }
    }
 
    if(property_exists($node, 'field_additional_followers')) {
      if($node->field_additional_followers) {
        foreach(field_get_items('node', $node, 'field_additional_followers') as $element) {
          $userObj = user_load($element['target_id']);
          if(in_array($userObj->mail, $emailSet))
            continue;
          if(_user_can_be_cced($userObj)) {
            $emailsListCC = $emailsListCC . ", " . $userObj->mail;
          }
          else {
            $emailsList = $emailsList . ", " . $userObj->mail;
          }
          array_push($emailSet, $userObj->mail);
        }
      }
    }

    if($node->field_additional_notification_em) {
      foreach(field_get_items('node', $node, 'field_additional_notification_em') as $element) {
        if(in_array($element["email"], $emailSet))
          continue;
        $emailsList = $emailsList . ", " . $element["email"];
        array_push($emailSet, $element["email"]);
      }
    }

    $doojectStatus = labdoo_lib_get_field($node, 'field_status', 'node', 'value'); 
    if(($doojectStatus == "T1" || $doojectStatus == "S4" || $doojectStatus == "S3")) {
      if(property_exists($node, 'field_edoovillage_destination')) {
        if($node->field_edoovillage_destination) {
          foreach(field_get_items('node', $node, 'field_edoovillage_destination') as $element) {
            $edoovillageNode = node_load($element['target_id']);
            if($edoovillageNode->field_project_manager_s_) {
              foreach(field_get_items('node', $edoovillageNode, 'field_project_manager_s_') as $element2) {
                $userObj = user_load($element2['target_id']);
                if(in_array($userObj->mail, $emailSet))
                  continue;
                if(_user_can_be_cced($userObj)) {
                  $emailsListCC = $emailsListCC . ", " . $userObj->mail;
                }
                else {
                  $emailsList = $emailsList . ", " . $userObj->mail;
                }
                array_push($emailSet, $userObj->mail);
              }
            }
            if($edoovillageNode->field_edoo_additional_followers) {
              foreach(field_get_items('node', $edoovillageNode, 'field_edoo_additional_followers') as $element2) {
                $userObj = user_load($element2['target_id']);
                if(in_array($userObj->mail, $emailSet))
                  continue;
                if(_user_can_be_cced($userObj)) {
                  $emailsListCC = $emailsListCC . ", " . $userObj->mail;
                }
                else {
                  $emailsList = $emailsList . ", " . $userObj->mail;
                }
                array_push($emailSet, $userObj->mail);
              }
            }
            if($edoovillageNode->field_edoo_additional_notif_em) {
              foreach(field_get_items('node', $edoovillageNode, 'field_edoo_additional_notif_em') as $element2) {
                if(in_array($element2["email"], $emailSet))
                  continue;
                $emailsList = $emailsList . ", " . $element2["email"];
                array_push($emailSet, $element2["email"]);
              }
            }
          }
        }
      }
    }

    if($node->field_hub_laptop) {
      foreach(field_get_items('node', $node, 'field_hub_laptop') as $element) {
        $hubNode = node_load($element['target_id']);
        if($hubNode->field_hub_manager_s_) {
          foreach(field_get_items('node', $hubNode, 'field_hub_manager_s_') as $element2) {
            $userObj = user_load($element2['target_id']);
            if(in_array($userObj->mail, $emailSet))
              continue;
            if(_user_can_be_cced($userObj)) {
              $emailsListCC = $emailsListCC . ", " . $userObj->mail;
            }
            else {
              $emailsList = $emailsList . ", " . $userObj->mail;
            }
            array_push($emailSet, $userObj->mail);
          }
        }
      }
    }

    if ($canCC) {
      // Return the list of emails that can be CCed instead
      $emailsList = $emailsListCC;
    }
    
    $emailsList = $emailsList . ", " . variable_get('site_mail', '');

    if($emailsList[0] == ",")
      $emailsList = substr($emailsList, 2);

    return $emailsList; 
}


/**
 * Generates a comma-separated list of emails that need
 * to be notified upon a change of status of a dootrip
 *
 * @param node $node
 *   The dooject's node
 *
 */
function labdoo_dootrip_extract_emails($node, $canCC=False) {
    $emailsList = "";
    $emailsListCC = ""; // Emails that can be CC-ed (instead of BCC-ed)
    $emailSet = array();

    foreach(field_get_items('node', $node, 'field_dootripper_s_') as $element) {
      $userObj = user_load($element['target_id']);
      if(in_array($userObj->mail, $emailSet))
        continue;
      if(_user_can_be_cced($userObj)) {
        $emailsListCC = $emailsListCC . ", " . $userObj->mail;
      }
      else {
        $emailsList = $emailsList . ", " . $userObj->mail;
      }
      array_push($emailSet, $userObj->mail);
    }

    if($node->field_dootrip_additional_emails) {
      foreach(field_get_items('node', $node, 'field_dootrip_additional_emails') as $element) {
        if(in_array($element["email"], $emailSet))
          continue;
        $emailsList = $emailsList . ", " . $element["email"];
        array_push($emailSet, $element["email"]);
      }
    }

    if ($canCC) {
      // Return the list of emails that can be CCed instead
      $emailsList = $emailsListCC;
    }

    $emailsList = $emailsList . ", " . variable_get('site_mail', '');

    if($emailsList[0] == ",")
      $emailsList = substr($emailsList, 2);

    return $emailsList; 
}


/**
 * Implementation of hook_node_update
 *
 */
function labdoo_lib_node_update($node) {

  if($node->type == 'laptop') {

    /*
     * Automatically update the location of a dooject
     * to match that of its assigned edoovillage for states
     * T1 or S4.
     */
    $doojectStatus = labdoo_lib_get_field($node, 'field_status', 'node', 'value'); 
    if(($doojectStatus == "T1" || $doojectStatus == "S4")) {
      // Use a PHP shutdown callback (invoked upon exiting the PHP thread)
      // to ensure the node has been stored in the database prior to updating the location.
      // FIX: this can also be done using hook_node_presave
      //      just like we are doing with other fields.
      //      For now we leave it here as an example of an alternative technique.
      register_shutdown_function('_update_dooject_location_from_edoovillage', $node);
      labdoo_lib_msg_info(t('The location of this dootronic has been automatically assigned to the location of its edoovillage.'));
    }
  }

  return;
}


/**
 * Creates a photo album node
 *
 * @param node $node parent node (an edoovillage or a hub)
 *
 * @return The node id of the newly created photo album
 *
 */
function _create_photo_album($node) {
  global $user;
  $nodeAlbum = new stdClass();
  $nodeAlbum->type = 'node_gallery_gallery';
  node_object_prepare($nodeAlbum);
  $nodeAlbum->title = $node->title . " - Photo Album";
  $nodeAlbum->language = LANGUAGE_NONE;
  ## Don't copy location, since the location is already tracked by the edoovillage.
  ## This way we don't have to update this field when there is a change.
#  $nodeAlbum->locations = $node->locations;
  $nodeAlbum->created = time();
  $nodeAlbum->changed = $nodeAlbum->created;
  $nodeAlbum->status = 1;
  $nodeAlbum->promote = 0;
  $nodeAlbum->sticky = 0;
  $nodeAlbum->format = 2;
  $nodeAlbum->uid = $user->uid;
  node_save($nodeAlbum);
  return($nodeAlbum->nid);
}


/**
 * Allocate a new dooject ID
 *
 * @return The new ID
 *
 */
function lbd_next_dootronic_id() {

  $query = "SELECT title FROM node WHERE type='laptop' ORDER BY title ASC";
  $result = db_query($query);

  // The following algorithm searches for any possible
  // holes in the Labdoo ID space and if none, allocates the next 
  // smallest ID
  $potentialId = 1;
  foreach($result as $item) {
    $thisId = intval($item->title);
    if($potentialId < $thisId)
      break;
    $potentialId++;
  }
  return($potentialId); 
}


/**
 * Allocate a new dootrip ID
 *
 * @return The new ID
 *
 */
function lbd_allocate_dootrip_id() {

  $query = "SELECT title FROM node WHERE type='dootrip' ORDER BY title ASC";
  $result = db_query($query);

  // The following algorithm searches for any possible
  // holes in the Labdoo ID space and if none, allocates the next 
  // smallest ID
  $potentialId = 1;
  foreach($result as $item) {
    $dootripWords = explode(' ', $item->title);
    $dootripNumber = explode('#', $dootripWords[1]);
    $thisId = intval($dootripNumber[1]);
    if($potentialId < $thisId)
      break;
    $potentialId++;
  }
  return($potentialId); 
}


/**
 * Extracts the dootrip ID from a dootrip title
 *
 * @param  string $dootripTitle The title of the dootrip
 *
 * @return The dootrip ID
 *
 */ 
function lbd_extract_dootrip_id($dootripTitle) {
  $dootripWords = explode(' ', trim($dootripTitle));
  $dootripNumber = explode('#', $dootripWords[1]);
  return $dootripNumber[1];
}


/**
 * Allocate a new edoovillage ID
 *
 * @return The new ID
 *
 */
function lbd_allocate_edoovillage_id() {

  $query = "SELECT title FROM node WHERE type='edoovillage' ORDER BY title ASC";
  $result = db_query($query);
  $total_num_edoovillages = lbd_get_total_num_objects('edoovillage');

  $edoovillageIds = array();
  foreach($result as $item) {
    $edoovillageWords = explode(' ', $item->title);
    // This edoovillage uses the old notation and has no ID, skip it
    if($edoovillageWords[0] != "Edoovillage")
      continue;
    // This edoovillage uses the new notation, extract its ID
    $edoovillageNumber = explode('#', $edoovillageWords[1]);
    $thisId = intval($edoovillageNumber[1]);
    array_push($edoovillageIds, $thisId);
  }
  sort($edoovillageIds);

  // The following algorithm searches for any possible
  // holes in the Labdoo ID space and if none, allocates the next 
  // smallest ID
  $potentialId = 0;
  $smallestId = 999999999999;
  foreach($edoovillageIds as $thisId) {
    if ($smallestId > $thisId)
      $smallestId = $thisId;
    if (!$potentialId) {
      $potentialId = $thisId + 1;
      continue;
    }
    if($potentialId < $thisId)
      break;
    $potentialId++;
  }
  // If no IDs were found in any of the edoovillage titles,
  // it means this is the first edoovillage to be saved
  // using the ID notation. Just assigned it the number of
  // edoovillages + 1. 
  if (!$potentialId)
    return $total_num_edoovillages + 1;
  // If the potential ID is larger than the total number of edoovillages,
  // this means that we deleted an edoovillage which did not have an ID. Thus
  // we should assign an ID just one number smaller than the smallest ID we 
  // currently have, expanding the ID set from the left rather than from the right.
  if ($potentialId > $total_num_edoovillages + 1) 
    return($smallestId - 1);
  return($potentialId);
}


/**
 * Attempts to acquire a lock
 *
 * @param string $lock_name The lock name
 *
 * @return True if it was acquired, False otherwise
 *
 */
function lbd_lock_acquire($lock_name) {
  $num_trials = 5;
  $wait_for_release = 10; // in seconds

  while($num_trials--) {
    if(lock_acquire($lock_name)) {
      return True;
    }
    // Waits until the lock is released or until
    // $wait_for_release seconds have passed.
    lock_wait($lock_name, $wait_for_release);
  }

  return False;
}


/**
 * Releases a lock
 *
 * @param string $lock_name The lock name
 *
 */
function lbd_lock_release($lock_name) {
// Put a throtle here, waiting a certain amount X of time
// if the last call to this function happened within Y seconds.
  lock_release($lock_name);
}


/**
 * Acquire a lock and schedule its release when 
 * the current thread exits
 *
 * @param string $lock_name The lock name
 *
 * @return True if it successfully acquired the lock, False otherwise
 *
 */
function labdoo_lib_lock_thread($lock_name) {
  lbd_lock_acquire($lock_name);
  register_shutdown_function('lbd_lock_release', $lock_name);
  return;
}
 

/**
 * Implementation of hook_node_presave
 *
 */
function labdoo_lib_node_presave($node) {

  if($node->type == 'laptop') {

    if(!property_exists($node, 'original')) {
      // This is a new dootronic, lock this call to avoid potential ID collisions
      // if two tagging operations happen concurrently
      labdoo_lib_lock_thread('lock_update_dootronic');
      /*
       * Update the title and path alias
       */
      // The Labdoo identifier of each
      // laptop is stored as the node's title
      $laptopIdInt = lbd_next_dootronic_id();
      $node->title = sprintf("%09d", $laptopIdInt);
    }

    // Add laptop path alias for 1.0 compatibility.
    // There are basically two ways to access a laptop:
    // via laptop/$ID or content/$ID
    $path = 'laptop/' . $node->title;
    $node->path = array('alias' => $path);

    // If not set, make a best estimate of its GPS coordinates
    $location = $node->locations[0]; 
    if($location && (!array_key_exists('latitude', $location) || !array_key_exists('longitude', $location))) {
      // Attempt to find out the coordinates.
      // Latitude and longitude are passed as reference.
      $ret = labdoo_lookup_coordinates($location['country'], 
                                       $location['city'], 
                                       $node->locations[0]['latitude'], 
                                       $node->locations[0]['longitude'],
                                       $silent=True,
                                       $location['street'],
                                       $location['province'],
                                       $location['postal_code'],
                                       10);
      if($ret == 0) { // If successful, do not let the system attempt to geolocate it anymore
        $node->locations[0]['inhibit_geocode'] = TRUE;
      }
      else {
        $node->locations[0]['inhibit_geocode'] = FALSE;
      }
    }

    # If status is set back to a 'non-edoovillage assigned state', remove the edoovillage
    $doojectStatus = labdoo_lib_get_field($node, 'field_status', 'node', 'value');
    if(preg_match('(S0|S1|S2)', $doojectStatus)) {
      $wNode = entity_metadata_wrapper('node', $node);
      $wNode->field_edoovillage_destination->set(0); // It expects a node ID; setting it to zero seems to do it
    }

  }

  if($node->type == 'edoovillage') {
    /*
     * Update title in case any of its parts was modified
     */
    $nodeCountry = labdoo_country_code2name($node->locations[0]['country']);
    $nodeCity = $node->locations[0]['city'];

    // Generate the name (title) of this edoovillage
    if(property_exists($node, 'original')) {
      // This is an update of an existing edoovillage
      $edoovillageWords = explode(' ', $node->title);
      if($edoovillageWords[0] != "Edoovillage") {
        // Support legacy naming convention for older edoovillages (name without IDs)
        $edoovillagePrefix = "";
      }
      else {
        // Preserve the existing ID
        $edoovillageId = explode('#', $edoovillageWords[1]);
        $edoovillagePrefix = "Edoovillage #" . $edoovillageId[1] . " - ";
      }
    }
    else {
      // This is the creation of a new edoovillage
      // Generate a new ID atomically
      labdoo_lib_lock_thread('lock_update_edoovillage');
      $edoovillagePrefix = "Edoovillage #" . lbd_allocate_edoovillage_id() . " - ";
    }

    if($nodeCountry == "[country not defined]")
      $edoovillagePrefix .= $nodeCity;
    else
      $edoovillagePrefix .= $nodeCountry . ", " . $nodeCity;

    $node->title = $edoovillagePrefix . ": " . labdoo_lib_get_field($node, 'field_project_summary', 'node', 'value');

    $wNode = entity_metadata_wrapper('node', $node);
    if(!property_exists($node, 'original')) {
      // Create this edoovillage's photo album
      $albumNid = _create_photo_album($node);
      $wNode->field_edoovillage_photo_album->set($albumNid);
    }
    else {
      // Just update the edoovillage's photo album title if there were any changes
      $nodeAlbum = $wNode->field_edoovillage_photo_album->value();
      $loadedNodeAlbum = node_load($nodeAlbum->nid);
      $loadedNodeAlbum->title = $node->title . " - Photo Album";;
      node_save($loadedNodeAlbum);
    }
  }

  if($node->type == 'hub') {
    $wNode = entity_metadata_wrapper('node', $node);
    if(!property_exists($node, 'original')) {
      // Create this hub's photo album
      $albumNid = _create_photo_album($node);
      $wNode->field_hub_photo_album->set($albumNid);
    }
    else {
      // Just update the hub's photo album title if there were any changes
      $nodeAlbum = $wNode->field_hub_photo_album->value();
      $loadedNodeAlbum = node_load($nodeAlbum->nid);
      $loadedNodeAlbum->title = $node->title . " - Photo Album";;
      node_save($loadedNodeAlbum);
    }
    // Update the parent hub nodes (the original and the new one if any)
    // to make sure its computed field_branches field is most up to date.
    // _update_hub needs to run as a callback after this hub is saved
    // to ensure it gets the most up to date state.
    if(property_exists($node, 'original')) {
      $wNodeOriginal = entity_metadata_wrapper('node', $node->original);
      $originalParentHub = $wNodeOriginal->field_parent_hub->value();
      if($originalParentHub)
        register_shutdown_function('_update_hub', $originalParentHub);
    }
    $parentHub = $wNode->field_parent_hub->value();
    if($parentHub)
      register_shutdown_function('_update_hub', $parentHub);
  }

  if($node->type == 'dootrip') {
    /*
     * Update the title
     */
    if(!property_exists($node, 'original')) {
      // Protect this call to avoid ID collisions
      labdoo_lib_lock_thread('lock_update_dootrip');
      $dootripId = lbd_allocate_dootrip_id();
    }
    else {
      $dootripId = lbd_extract_dootrip_id($node->title);
    }
    $dootripTitle = _generate_dootrip_title($node, $dootripId);
    $node->title = $dootripTitle;
    /*
     * Update GPS coordinates
     */
    $allLocations = field_get_items('node', $node, 'field_origin_of_the_trip');
    $location = $allLocations[0];
    $ret = labdoo_lookup_coordinates($location['country'], 
                                     $location['city'], 
                                     $node->field_origin_of_the_trip['und'][0]['latitude'], 
                                     $node->field_origin_of_the_trip['und'][0]['longitude']);
    if($ret == 0) // If successful, do not let the system attempt to geolocate it anymore
      $node->field_origin_of_the_trip['und'][0]['inhibit_geocode'] = TRUE;

    $allLocations = field_get_items('node', $node, 'field_destination_of_the_trip');
    $location = $allLocations[0];
    $ret = labdoo_lookup_coordinates($location['country'], 
                                     $location['city'], 
                                     $node->field_destination_of_the_trip['und'][0]['latitude'], 
                                     $node->field_destination_of_the_trip['und'][0]['longitude']);
    if($ret == 0) 
      $node->field_destination_of_the_trip['und'][0]['inhibit_geocode'] = TRUE;
  }

  if(property_exists($node, 'original') && $node->type == 'book') {
    if($node->field_is_first_page[$node->language][0]['value'] == 1)  {
      $node->field_reference_book[$node->language][0]['target_id'] = $node->nid;
    }
  }

  // If it's a newly created picture for a photo album, set the title
  // to "Picture". Trick: instead of using 'original' to check if this
  // is a new node, we use 'vid' because it is a more reliable indicator
  // due to the way photo albums allow users to modify and save pics.
  if(!property_exists($node, 'vid') && $node->type == 'node_gallery_item') {
    $node->title = "Picture";
  }

  return;
}


/**
 * Implementation of hook_node_insert
 *
 */
function labdoo_lib_node_insert($node) {

  if($node->type == 'edoovillage') {
    // Link this edoovillage's photo album back to the edoovillage itself
    $wNode = entity_metadata_wrapper('node', $node);
    $nodeAlbum = $wNode->field_edoovillage_photo_album->value();
    $loadedNodeAlbum = node_load($nodeAlbum->nid);
    $wNodeAlbum = entity_metadata_wrapper('node', $loadedNodeAlbum);
    $wNodeAlbum->field_photo_album_edoovillage->set($node->nid);
    $wNodeAlbum->save();
  }

  if($node->type == 'hub') {
    // Link this hub's photo album back to the edoovillage itself
    $wNode = entity_metadata_wrapper('node', $node);
    $nodeAlbum = $wNode->field_hub_photo_album->value();
    $loadedNodeAlbum = node_load($nodeAlbum->nid);
    $wNodeAlbum = entity_metadata_wrapper('node', $loadedNodeAlbum);
    $wNodeAlbum->field_photo_album_hub->set($node->nid);
    $wNodeAlbum->save();
  }

  if($node->type == 'book') {
    if($node->field_is_first_page[$node->language][0]['value'] == 1)  {
      // This book is newly created, we still don't know its nid,
      // so use register_shutdown_function to update its book reference
      register_shutdown_function('_update_book_reference', $node);
    }
  } 

  if($node->type == 'dootrip') {
    labdoo_lib_msg_info(t("Thank you for registering a dootrip. Please notice that 
                           the creation of the dootrip does not guarantee that you will
                           receive laptops. Please <a target='_blank' 
                           href='../content/finding-and-contacting-other-labdoo-users'>
                           contact now</a> one of the <a target='_blank' href='../hubs'>hubs near 
                           your area</a> to check if they have any laptops in stock 
                           that you can help bring on your trip."));
  }

  return;
}


/**
 * Implementation of hook_node_delete
 *
 */
function labdoo_lib_node_delete($node) {

  if($node->type == 'edoovillage') {
    // Delete photo album associated with edoovillage
    $wNode = entity_metadata_wrapper('node', $node);
    $nodeAlbum = $wNode->field_edoovillage_photo_album->value();
    node_delete($nodeAlbum->nid);
    // Delete action associated with edoovillage
    $query = "SELECT entity_id FROM field_data_field_action_type WHERE (field_action_type_value='Edoovillage' AND
              entity_id IN 
              (SELECT entity_id FROM field_data_field_edoovillage_action WHERE field_edoovillage_action_target_id=$node->nid))"; 
    $actionNodeId = db_query($query)->fetchField();
    node_delete($actionNodeId);
  }

  if($node->type == 'hub') {
    // Delete photo album associated with hub
    $wNode = entity_metadata_wrapper('node', $node);
    $nodeAlbum = $wNode->field_hub_photo_album->value();
    node_delete($nodeAlbum->nid);
    // Delete action associated with hub 
    $query = "SELECT entity_id FROM field_data_field_action_type WHERE (field_action_type_value='Hub' AND
              entity_id IN 
              (SELECT entity_id FROM field_data_field_hub_action WHERE field_hub_action_target_id=$node->nid))"; 
    $actionNodeId = db_query($query)->fetchField();
    node_delete($actionNodeId);
  }

  return;
}


/**
 * Implementation of hook_form_node_form_alter
 *
 */
function labdoo_lib_form_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  /*
   * Node is a laptop
   */
  if($form_id == 'laptop_node_form') {

    /*
     * Hide the title from the form
     * so that users can't write to it.
     * That's done because the title is
     * programmatically given the value of
     * the laptop's Labdoo ID
     */
    unset($form['title']);

    /*
     * Defaults for node creation
     */
    $node = $form_state['node'];
    if (!isset($node->nid) || isset($node->is_new)) {
      if(empty($form['field_tagger']['und'][0]['target_id']['#default_value'])) {    
        $form['field_tagger']['und'][0]['target_id']['#default_value'] = $user->name . " (" . $user->uid . ")";
        $form['field_manager']['und'][0]['target_id']['#default_value'] = $user->name . " (" . $user->uid . ")";
      }
    }
  }

  /*
   * Node is a dootrip
   */
  if($form_id == 'dootrip_node_form') {

    // Hide title
    unset($form['title']);

    /*
     * Defaults for node creation
     */
    $node = $form_state['node'];
    if (!isset($node->nid) || isset($node->is_new)) {
      if(empty($form['field_dootripper_s_']['und'][0]['target_id']['#default_value'])) {    
        $form['field_dootripper_s_']['und'][0]['target_id']['#default_value'] = $user->name . " (" . $user->uid . ")";
      }
    }

  }

  /*
   * Node is an edoovillage
   */
  if($form_id == 'edoovillage_node_form') {
    // Hide title and photo album
    unset($form['title']);
    $form['field_edoovillage_photo_album']['#access'] = FALSE;
  }

  /*
   * Node is a hub
   */
  if($form_id == 'hub_node_form') {
    // Hide photo album 
    $form['field_hub_photo_album']['#access'] = FALSE;
  }

  /*
   * Node is a superhub page 
   */
//  if($form_id == 'superhub_page_node_form') {
//
    // Hide title
//    unset($form['title']);
//  }

  /*
   * Hide book form for all non-book types
   */
  if($form_id != 'book_node_form') {

    // Hide book form 
    unset($form['book']);
  }

  /*
   * Wall node form
   */
  if($form_id == 'drupal_wall_node_form') {

    // Hide title
    unset($form['title']);
  }

  if($form_id == 'team_page_node_form') {
    // Only show the field to associate a conversation
    // with an edoovillage if this conversation belongs
    // to the QA team.
    $groupId = lbd_teams_page_group_id();
    $groupPath = drupal_get_path_alias("node/$groupId");
    if(strcmp($groupPath, "content/labdoo-global-support-lgs") != 0) {
      $form['field_are_you_a_student_teacher_']['#access'] = FALSE;
      $form['field_team_my_edoovillage']['#access'] = FALSE;
    }
  }

  if($form_id == 'team_page_node_form') {
    // These fields should only be shown for the coffee shop team.
    // Change the coffee shop team ID if it ever changes (this value
    // is based on the production instance, it won't work in development
    // mode).
    $coffeeShopTeamId = 23;
    if($form['og_group_ref']['und'][0]['default']['#default_value'][0] != $coffeeShopTeamId) {
      $form['field_send_to_all_hub_managers']['#access'] = FALSE;
      $form['field_send_to_all_edoo_managers']['#access'] = FALSE;
    }
  }
  return;
}


/**
 * Implements hook_menu_alter
 *
 */
function labdoo_lib_menu_alter(&$items) {
  // User account access
  $items['user/%user/edit']['access callback'] = 'labdoo_permissions_access_account_edit';
  $items['user/%user/roles']['access callback'] = 'labdoo_permissions_access_account_roles';
  // Adwords access
  $items['admin/config/system/google_adwords/path']['access callback'] = 'labdoo_permissions_access_adwords';
  $items['admin/config/system/google_adwords/path/add']['access callback'] = 'labdoo_permissions_access_adwords';
  $items['admin/config/system/google_adwords/path/%/edit']['access callback'] = 'labdoo_permissions_access_adwords';
  $items['admin/config/system/google_adwords/path/%/delete']['access callback'] = 'labdoo_permissions_access_adwords';
  // Photo albums access
  $items['node/%node_gallery_api_gallery/sort']['access callback'] = 'labdoo_permissions_access_photoalbum';
  $items['node/%node_gallery_api_gallery/items']['access callback'] = 'labdoo_permissions_access_photoalbum';
  $items['node/%node_gallery_api_gallery/upload']['access callback'] = 'labdoo_permissions_access_photoalbum_upload';
}


/**
 * Controls access to edit user account
 *
 * @param string $account The account upon which access is to be checked
 *
 * @return True if user is allowed access, false otherwise
 *
 */ 
function labdoo_permissions_access_account_edit($account) {
  global $user;

  $isOwnAccount = $user->uid == $account->uid;
  if($isOwnAccount)
    return TRUE;  // Allow to edit my own account

  $userRoles = array_values($user->roles);
  if(in_array('administrator', $userRoles))
    return TRUE;  // Admin can edit all accounts

  $thisAccountRoles = array_values($account->roles);
  if(in_array('superhub manager', $thisAccountRoles) || in_array('administrator', $thisAccountRoles))
    return FALSE; // No one can edit superhub or admin accounts except themselves
  
  if(in_array('superhub manager', $userRoles) || in_array('administrator', $userRoles)) 
    return TRUE;  // superhubs and admins can edit any other account 

  return FALSE;
}


/**
 * Controls access to account's roles
 *
 * @param string $account The account upon which access is to be checked
 *
 * @return True if user is allowed access, false otherwise
 *
 */ 
function labdoo_permissions_access_account_roles($account=NULL) {
  global $user;
  // Can't use $account->uid because it is not set for this menu tab due to having a lower weight
  $thisPageUser = arg(1);
  $isOwnAccount = $user->uid == $thisPageUser;

  if($isOwnAccount)
    return FALSE;

  $userRoles = array_values($user->roles);
  if(in_array('superhub manager', $userRoles) || in_array('administrator', $userRoles)) 
    return TRUE;

  return FALSE;
}


/**
 * Controls access to adwords dashboard 
 *
 * @return True if user is allowed access, false otherwise
 *
 */ 
function labdoo_permissions_access_adwords() {
  global $user;
  $userRoles = array_values($user->roles);
  if(in_array('superhub manager', $userRoles) || in_array('administrator', $userRoles)) 
    return TRUE;
  return FALSE;
}


/**
 * Controls access to photo albums
 *
 * @param string $op The operation being requested
 * @param node $gallery The photo album node
 * @param user $account If used, the user owning the photo album 
 *
 * @return True if user is allowed access, fall back to default return value otherwise
 *
 */ 
function labdoo_permissions_access_photoalbum($op, $gallery = NULL, $account = NULL) {
  global $user;

  // If user is logged in and has edit rights to this edoovillage or hub, return TRUE
  if (user_is_logged_in()) {
    // It's either an edoovillage or a hub photo album
    $nodeId = labdoo_lib_get_field($gallery, 'field_photo_album_edoovillage', 'node', 'target_id');
    if(!$nodeId) { // It's a hub photo album
      $nodeId = labdoo_lib_get_field($gallery, 'field_photo_album_hub', 'node', 'target_id');
    }
    $loadedNode = node_load($nodeId);
    if(labdoo_lib_edoo_hub_edit_access($loadedNode, $user))
      return TRUE;
  }

  // Fall back to the default user_access hook
  return node_gallery_api_user_access($op, $gallery, $account);
}


/**
 * Controls access to upload photos in albums
 *
 * @param node $gallery The photo album node
 * @param string $item_type If used, node type of the item to be uploaded 
 *
 * @return True if user is allowed access, false otherwise
 *
 */ 
function labdoo_permissions_access_photoalbum_upload($gallery, $item_type = NULL) {
  return labdoo_permissions_access_photoalbum('upload', $gallery);
}


/**
 * Implements hook_form_user_profile_form_alter
 *
 */
function labdoo_lib_form_user_profile_form_alter(&$form, &$form_state) {
  global $user;
  $userRoles = array_values($user->roles);

  if(!in_array('hub manager', $userRoles)) {
    // If it's not a hub manager, hide the hub manager notifications field group
    field_group_hide_field_groups($form, array('group_hub_manager_notifications'));
  }

  # Superhub managers can edit any user's email address
  # but we need to hide all other user info to ensure
  # only the email address is available.
  if(in_array('superhub manager', $userRoles)) {
    $account = $form['#user'];
    $isOwnAccount = $user->uid == $account->uid;
    if(!$isOwnAccount) {
      $form['account']['pass']['#access'] = FALSE;
      $form['contact']['#access'] = FALSE;
      $form['picture']['#access'] = FALSE;
    }
  }

  return;
}


/**
 * Implements hook_form_alter
 *
 */
function labdoo_lib_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  $userId = $user->uid;

  // Do not present comment form in team pages if a user is not a member of that team
  if ($form_id == 'comment_node_team_page_form' || $form_id == 'comment_node_team_task_form') {
    $teamId = lbd_teams_page_group_id();
    $members = lbd_teams_get_team_members($teamId);
    if(!in_array($userId, $members))  {
      unset($form['author']);
      unset($form['subject']);
      unset($form['comment_body']);
      if ($form_id == 'comment_node_team_page_form')
        unset($form['field_conv_comment_attach']);
      if ($form_id == 'comment_node_team_task_form')
        unset($form['field_task_comment_attach']);
      unset($form['actions']['submit'] );
      unset($form['actions']['preview'] );
    }
  }

  // Do not show the hub manager notification options during registration
  if($form_id == 'user_register_form') {
    // Add a header
    $form['customtext'] = array(
        '#type' => 'item',
        '#markup' => '<strong><font size="4" font color="#FF2400">'.
                     t("Thank you for joining the Labdoo network. Fill in this form to get you started.").'</font></strong>',
        '#weight' => -100, 
    );

    // Hide hub manager notifications field
    field_group_hide_field_groups($form, array('group_hub_manager_notifications'));
  }

  if($form_id == 'labdoo_story_node_form') {
    $form['field_story_edoovillage']['#access'] = FALSE;
  }

  // If its a dootrip and if this is a cloning operation, reset some values to avoid
  // possible mistakes
  if($form_id == 'dootrip_node_form' && (strpos(drupal_get_path_alias(current_path()), 'clone/confirm')) != FALSE) {
    foreach($form['field_laptops'][LANGUAGE_NONE] as $key => $dootronicTargetId)
      if(is_numeric($key))
        unset($form['field_laptops'][LANGUAGE_NONE][$key]['target_id']['#default_value']) ;
    unset($form['field_departure_date'][LANGUAGE_NONE][0]['#default_value']['value']) ;
    unset($form['field_arrival_date'][LANGUAGE_NONE][0]['#default_value']['value']);
    unset($form['field_status_dootrip'][LANGUAGE_NONE]['#default_value']) ;
  }

  if ($form_id == 'user_profile_form') {
    // Disable the option to enable/disable the "Personal contact form" 
    // in the user's "Edit account" tab
    $form['contact']['#access'] = FALSE;
  }

  return;
}


/** 
 * Calculates the total number of objects 
 * 
 * @param string $objectType Object type, can be one of: {'laptop', 'dootrip', 'edoovillage', 'hub', 'student', 'country'}
 * @return The total number of doojects in the Labdoo inventory 
 *  
 */
function lbd_get_total_num_objects($objectType) {

  if($objectType == 'student') {
    $query = "SELECT SUM(field_number_of_students_value) FROM field_data_field_number_of_students";
  }
  else if($objectType == 'country') {
    $query = "SELECT COUNT(*) FROM (SELECT DISTINCT country FROM location WHERE lid IN 
              (SELECT lid FROM location_instance WHERE vid IN (SELECT vid FROM node))) AS countries";
  }
  else {
    $query = "SELECT COUNT(*) FROM node WHERE type='$objectType' AND status=1";
  }

  $num = db_query($query)->fetchField();
  if(!$num)
    return 0;
 
  return($num);
}


/** 
 * Calculates the total CO2 savings due to dootrips 
 * 
 * @return The CO2 savings
 *  
 */
function lbd_get_co2_savings_dootrip() {
  $co2Saved = 0;

  $query = "SELECT nid, vid FROM node WHERE type='dootrip'";
  $dootrips = db_query($query);
  foreach($dootrips as $dootrip) {
    $dootripNode = node_load($dootrip->nid);
    $stringSavings = labdoo_calculate_dootrip_co2_savings($dootripNode);
    $co2Saved = $co2Saved + floatval(explode(' ', trim($stringSavings))[0]);
  }
     
  return($co2Saved);
}



/**
 * _update_city
 *
 */
function _update_city($lid, &$objectsCount) {  

  if(!$lid)
    return;

  $country_names = location_get_iso3166_list();

  $query = "SELECT city, country FROM location WHERE lid=$lid";
  $city = db_query($query)->fetchObject()->city;
  $country = db_query($query)->fetchObject()->country;
  $query = "SELECT latitude, longitude FROM location WHERE lid=$lid";
  $lat = db_query($query)->fetchObject()->latitude;
  $lon = db_query($query)->fetchObject()->longitude;
  if($lat == 0 and $lon == 0)
    labdoo_lookup_coordinates($country, $city, $lat, $lon, $silent=True);

  if(array_key_exists($country, $country_names))
    $countryExt = $country_names[$country];
  else 
    $countryExt = $country;

  if(!isset($objectsCount[strtoupper($city)]))
  {
    $objectsCount[strtoupper($city)]['count'] = 0;
    $objectsCount[strtoupper($city)]['lat'] = $lat;
    $objectsCount[strtoupper($city)]['lon'] = $lon;
    $objectsCount[strtoupper($city)]['country'] = $countryExt;
  }

  $objectsCount[strtoupper($city)]['count']++;
  $objectsCount[strtoupper($city)]['city'] = $city;
  return;
}


/** 
 * Calculates the number of objects for each city
 * 
 * @param type The type of objects 
 * @param selectedNids If not NULL, an array of node IDs that are to be used 
 * @return An array indexed by the name of the city in capital letters
 * and with various fields: 
 *
 *   'count': The number of doojects in the city
 *     'lat': The latitude of the city
 *     'lon': The longitude of the city
 * 'country': The country of the city 
 *  
 */ 
function labdoo_getnum_objects_by_city($type, $selectedNids = NULL) {

  $objectsCount = array();
  $query = "SELECT nid, vid FROM node WHERE type='$type'";
  $objects = db_query($query);

  foreach($objects as $object) {
    if(is_array($selectedNids) and !in_array($object->nid, $selectedNids))
      continue; 
    if($type == "dootrip") {
      $query = "SELECT field_origin_of_the_trip_lid AS lid FROM field_data_field_origin_of_the_trip 
                WHERE entity_id=$object->nid";
      $lid = db_query($query)->fetchField();
      _update_city($lid, $objectsCount);
      $query = "SELECT field_destination_of_the_trip_lid AS lid FROM field_data_field_destination_of_the_trip 
                WHERE entity_id=$object->nid";
      $lid = db_query($query)->fetchField();
      _update_city($lid, $objectsCount);
    }
    else {
      $query = "SELECT lid FROM location_instance WHERE nid=$object->nid AND vid=$object->vid";
      $lid = db_query($query)->fetchField();
      _update_city($lid, $objectsCount);
    }
  } 

  return $objectsCount;
}

/**
 * Calculates the total number of doojects in demand 
 *
 * @param edoovillageId node ID of the edoovillage we want to find the demand for 
 * @param hubId node ID of the hub we want to find the demand for 
 * @param $doAverage calculate the fair share of demand that a hub should take
 * for each edoovillage, understood as demand divided by the number of hubs
 * taking care of that edoovillage
 *
 */
function labdoo_get_demand($edoovillageId, $hubId, $doAverage) {

  if($doAverage) {

    if($hubId) {

      $query = "SELECT SUM(b.field_number_of_laptops_needed_value / a.numberHubs) 
                FROM 
                  (SELECT COUNT(*) numberHubs, entity_id 
                    FROM field_data_field_hub WHERE entity_id IN (SELECT entity_id 
                      FROM field_data_field_hub WHERE field_hub_target_id=$hubId) GROUP BY entity_id) a 
                INNER JOIN 
                  (SELECT entity_id, field_number_of_laptops_needed_value 
                    FROM field_data_field_number_of_laptops_needed  WHERE entity_id IN (SELECT entity_id 
                      FROM field_data_field_hub WHERE field_hub_target_id=$hubId)) b ON a.entity_id = b.entity_id";

    }
    else {

      // TODO: not implemented yet
      return -1;

    }

  }

  else {

    if($hubId) {
 
      $query = "SELECT SUM(field_number_of_laptops_needed_value) 
                FROM field_data_field_number_of_laptops_needed 
                WHERE entity_id IN (SELECT entity_id 
                FROM field_data_field_hub WHERE field_hub_target_id=$hubId)"; 

    }

    else if($edoovillageId) {

      $query = "SELECT SUM(field_number_of_laptops_needed_value) 
                FROM field_data_field_number_of_laptops_needed WHERE entity_id=$edoovillageId"; 

    }

    else {

      $query = "SELECT SUM(field_number_of_laptops_needed_value) FROM field_data_field_number_of_laptops_needed"; 

    }

  }

  $numLaptops = db_query($query)->fetchField();
  if(!$numLaptops)
    return 0;

  return $numLaptops;
}


/** 
 * Calculates the number of doojects assigned 
 * to an edoovillage or a hub in a given state
 *
 * @param integer $edoovillageId The ID of an edoovillage 
 * @param integer $hubId The ID of a hub 
 * @param string  $status The status of the laptops
 * @param boolean $checkHistory If true, check also historical values 
                  (used only when $edoovillageId and $hubId are NULL)
 *
 * @return The number of doojects in the status $status that
 * are assigned to the given edoovillage or hub
 * 
 */ 
function labdoo_getnum_doojects($edoovillageId, $hubId, $status, $checkHistory = False) {

  $country_names = location_get_iso3166_list();

  if($hubId) { 
    if($status == "S3" || $status == "T1" || $status == "S4" || $status == "S5" || $status == "S6" || $status == "S7" || $status == "S8" || $status == "S9") {
      // To compute the number of deployed laptops, do it from the edoovillages
      // assigned to the hub. This will include laptops that were delivered to 
      // edoovillages managed by this hub even if they were not tagged by this
      // hub.
      $query = "SELECT COUNT(*) FROM field_data_field_status WHERE field_status_value='$status' 
                AND entity_id IN (SELECT entity_id FROM field_data_field_edoovillage_destination 
                WHERE field_edoovillage_destination_target_id IN 
                (SELECT entity_id FROM field_data_field_hub WHERE field_hub_target_id=$hubId))"; 
      $numLaptops = db_query($query)->fetchField();
      // Compute also the number of laptops directly connected with the hub and take the maximum
      // between the two calculations
      $query = "SELECT COUNT(*) FROM field_data_field_status WHERE field_status_value='$status' 
                AND entity_id IN (SELECT entity_id FROM field_data_field_hub_laptop WHERE field_hub_laptop_target_id=$hubId)"; 
      $numLaptops2 = db_query($query)->fetchField();
      if($numLaptops > $numLaptops2)
        return $numLaptops;
      return $numLaptops2;
    }
    // Laptops don't have any edoovillage assigned, so count the laptops that were directly
    // assigned to this hub
    $query = "SELECT COUNT(*) FROM field_data_field_status WHERE field_status_value='$status' 
              AND entity_id IN (SELECT entity_id FROM field_data_field_hub_laptop WHERE field_hub_laptop_target_id=$hubId)"; 
  }
  else if($edoovillageId) {
    $query = "SELECT COUNT(*) FROM field_data_field_status WHERE field_status_value='$status' 
              AND entity_id IN (SELECT entity_id FROM field_data_field_edoovillage_destination 
              WHERE field_edoovillage_destination_target_id=$edoovillageId)"; 
  }
  else {
    if($checkHistory) {
      $query = "SELECT COUNT(DISTINCT(entity_id)) FROM field_revision_field_status WHERE field_status_value='$status'"; 
    }
    else {
      $query = "SELECT COUNT(*) FROM field_data_field_status WHERE field_status_value='$status'"; 
    }
  }

  $numLaptops = db_query($query)->fetchField();

  return $numLaptops;
}


/**
 * Returns the title of a node
 *
 * @param nodeId The ID of a node
 *
 * @return The title of the node 
 * 
 */
function lbd_nodeid2title($nodeId)
{
    $title = db_query("SELECT title FROM node WHERE nid = :nid ", array(':nid' => $nodeId))->fetchField();
    return $title; 
}


/**
 * Returns the node ID from the title of the node 
 *
 * @param title The title of the node 
 * @param type If set, the type of node (used to help reduce possible collisions) 
 *
 * @return The ID of a node
 * 
 */
function lbd_title2nodeid($title, $type=NULL)
{
  if($type)
    $result = db_query("SELECT nid FROM node WHERE title=:title AND type=:type", array(":title"=> $title, ":type"=> $type));
  else
    $result = db_query("SELECT nid FROM node WHERE title=:title", array(":title"=> $title));
  return $result->fetchField();
}


/**
 * Returns the node id of given a laptop identifier
 *
 * @param laptopId The ID of a laptop
 *
 * @return The node ID 
 * 
 */
function lbd_laptopid2nodeid($laptopId)
{
    $nodeId = db_query("SELECT nid FROM node WHERE title =:tit", array(':tit' => $laptopId))->fetchField();
    return $nodeId;
}


/**
 * lbd_generate_qrcode
 *
 * @param tag dooject identifier
 * @param widthHeight height of the QR code
 * @param EC_level error correction level
 * @param margin margin 
 *
 */
function lbd_generate_qrcode($tag, $widthHeight ='60', $EC_level='L', $margin='0') {
  $thisTag = urlencode("http://platform.labdoo.org/laptop/".$tag);
  echo '<img src="https://api.qrserver.com/v1/create-qr-code/?size='.$widthHeight.'x'.$widthHeight.'&data='.$thisTag.'"/>';
  return;
}


/**
 * Returns the watt-hours of a dooject
 *
 * @param node $nodeLoaded The dooject node (loaded)
 *
 * @return The watt-hours
 *
 */
function labdoo_lib_compute_watt_hours($nodeLoaded) {
  // If the Wh field is present, then print it in the label
  $volts = labdoo_lib_get_field($nodeLoaded, 'field_volts', 'node', 'value');
  $ampHours = labdoo_lib_get_field($nodeLoaded, 'field_amp_hours', 'node', 'value');

  $wattageHour = "Not available";

  if($volts != "" && $ampHours != "") {
    $Wh = round($volts * $ampHours / 1000, 1); 
    $wattageHour = $Wh . "Wh";
  }
  return($wattageHour);
}


/**
 * Given a hub, it returns the node IDs of its branches (recursively)
 *
 * @param node $nodeLoaded The hub node (loaded)
 * @param int $levelsLeft Number of additional recursive calls that are allowed
 *
 * @return The list of node IDs of the hub branches
 *
 */
function labdoo_lib_hub_branches_list($nid, $levelsLeft=3) {
  $levelsLeft = $levelsLeft - 1;
  $query = "SELECT entity_id FROM field_data_field_parent_hub WHERE field_parent_hub_target_id=$nid";
  $result = db_query($query);

  $branchIdList = array();
  foreach($result as $item) {
    // Find also all hub branches from this hub recursively (for all sublevels)
    if($levelsLeft) {
      $branchIdList2 = labdoo_lib_hub_branches_list($item->entity_id, $levelsLeft);
      foreach($branchIdList2 as $hub_nid) {
        array_push($branchIdList, $hub_nid);
      }
    }
    array_push($branchIdList, $item->entity_id);
  }
 
  return($branchIdList);
}


/**
 * Returns the list of branches associated with a hub 
 *
 * @param node $nodeLoaded The hub node (loaded)
 *
 * @return The list of hubs as a code string 
 *
 */
function labdoo_lib_compute_hub_branches($nodeLoaded) {
  $hubBranches = labdoo_lib_hub_branches_list($nodeLoaded->nid);

  $branchesCode = "";
  $branchesList = array();
  foreach($hubBranches as $hubBranch) {
    $parentHubName = lbd_nodeid2title($hubBranch);
    $parentHubUri = 'node/' . $hubBranch;
    // Add a comment with the $parentHubName to allow for alphabetic ordering 
    array_push($branchesList, '<!--' . $parentHubName . '--><a href="' . $parentHubUri . '">' . $parentHubName . '</a>');
  }
  sort($branchesList);

  $branchesCode = implode("<br/>", $branchesList);
  if($branchesCode == "")
    $branchesCode = "None";

  return($branchesCode);
}


/**
 * Returns the list of edoovillages related to a dootrip
 *
 * @param node $nodeLoaded The dootrip node (loaded)
 *
 * @return The list of edoovillages as a string 
 *
 */
function labdoo_lib_compute_dootrip_edoovillages($nodeLoaded) {
  $query = "SELECT field_edoovillage_destination_target_id FROM field_data_field_edoovillage_destination 
            WHERE entity_id IN (SELECT field_laptops_target_id FROM field_data_field_laptops 
            WHERE entity_id=$nodeLoaded->nid)";
  $result = db_query($query);

  $edoovillageIds = array();
  foreach($result as $item) {
    $edoovillageIds[] = $item->field_edoovillage_destination_target_id;
  }
  $numTimes = array_count_values($edoovillageIds);
  $edoovillagesCode = "";
  $edoovillagesList = array();
  foreach($edoovillageIds as $edoovillageId) {
    if($edoovillageId == 0)
      // A dootronic is assigned to this dootrip but has no
      // edoovillage assigned, skip it.
      continue;
    if(in_array($edoovillageId, $edoovillagesList)) 
      continue;
    $edoovillagesList[] = $edoovillageId;
    $numDootronics = $numTimes[$edoovillageId];
    $edoovillageName = lbd_nodeid2title($edoovillageId);
    $edoovillageUri = '../node/' . $edoovillageId;
    $edoovillagesCode .= '<a href="' . $edoovillageUri . '">' . $edoovillageName . ' (Number of dootronics: ' . $numDootronics . ')</a>'; 
    $edoovillagesCode .= "<br/>";
  }

  if($edoovillagesCode == "")
    $edoovillagesCode = "None";

  return($edoovillagesCode);
}


/**
 * Returns the username of the user entity passed
 *
 * @param array $entity The user entity
 *
 * @return The username
 *
 */
function labdoo_lib_compute_username($entity) {
  return($entity->name);
}


/**
 * Returns the list of dootronics associated to a hub managed by a user
 *
 * @param user $userId The ID of the user
 *
 * @return The list of dootronics
 *
 */
function labdoo_lib_user2hub2dootronic($userId) {
  $dootronicsList = array();
  $query = "SELECT entity_id FROM field_data_field_hub_laptop WHERE field_hub_laptop_target_id IN 
            (SELECT entity_id FROM field_data_field_hub_manager_s_ WHERE field_hub_manager_s__target_id=$userId);";
  $result = db_query($query);
  foreach($result as $dootronic) 
    array_push($dootronicsList, $dootronic->entity_id);
  return($dootronicsList);
}


/**
 * Returns the list of dootronics associated to an edoovillage managed by a user
 *
 * @param user $userId The ID of the user
 *
 * @return The list of dootronics
 *
 */
function labdoo_lib_user2edoovillage2dootronic($userId) {
  $dootronicsList = array();
  $query = "SELECT entity_id FROM field_data_field_edoovillage_destination WHERE field_edoovillage_destination_target_id IN 
            (SELECT entity_id FROM field_data_field_project_manager_s_ WHERE field_project_manager_s__target_id=$userId);";
  $result = db_query($query);
  foreach($result as $dootronic) 
    array_push($dootronicsList, $dootronic->entity_id);
  return($dootronicsList);
}


/**
 * Returns the list of edoovillages related to a hub
 *
 * @param $hubId The ID of the hub 
 *
 * @return The list of edoovillages IDs 
 *
 */
function labdoo_lib_hub2edoovillage($hubId) {
  $edoovillageList = array();
  // An edoovillage is related to a hub via two paths:
  //   - The hub is managing the edoovillage (first SELECT)
  //   - The hub has contributed a dootronic which was deployed at the edoovillage (second SELECT)
  $query = "SELECT entity_id as nid FROM field_data_field_hub WHERE field_hub_target_id=$hubId 
            UNION
            SELECT DISTINCT field_edoovillage_destination_target_id as nid FROM field_data_field_edoovillage_destination 
                   WHERE entity_id IN (SELECT entity_id FROM field_data_field_hub_laptop 
                   WHERE field_hub_laptop_target_id=$hubId) AND field_edoovillage_destination_target_id != 0 
            ORDER BY nid;";
  $result = db_query($query);
  foreach($result as $edoovillage) 
    array_push($edoovillageList, $edoovillage->nid);
  return($edoovillageList);
}


/**
 * Checks if user has (specific) edit rights to an edoovillage or hub without such
 * user being a (general) edoovillage or hub manager
 *
 * @param node $node The edoovillage or hub node (must be one of the two)
 * @param user $user The user upon which edit access is to be checked 
 *
 * @return True if user has edit rights, False otherwise
 *
 */
function labdoo_lib_edoo_hub_edit_access($node, $user) {
  // Assumes node is always either an edoovillage or a hub
  if($node->type == 'edoovillage') {
    $field_additional_editors = 'field_edoo_additional_editors';
    $field_managers = 'field_project_manager_s_';
  }
  else {  // It's a hub
    $field_additional_editors = 'field_hub_additional_editors';
    $field_managers = 'field_hub_manager_s_';
  }
  $editorIds = labdoo_lib_get_field_all($node, $field_additional_editors, 'node', 'target_id'); 
  if(in_array($user->uid, $editorIds)) 
    return TRUE;
  $managerIds = labdoo_lib_get_field_all($node, $field_managers, 'node', 'target_id'); 
  if(in_array($user->uid, $managerIds)) 
    return TRUE;
  return FALSE;
}


/**
 * Implements hook_node_access
 *
 */
function labdoo_lib_node_access($node, $op, $account) {
  global $user;

  if(!user_is_logged_in()) 
    return NODE_ACCESS_IGNORE;

  // Do not allow to delete edoovillages
  // that have dootronics assigned
  if($op == "delete") {
    if($node->type == "edoovillage") {
      $query = "SELECT COUNT(*) FROM field_data_field_status WHERE 
                entity_id IN (SELECT entity_id FROM field_data_field_edoovillage_destination 
                WHERE field_edoovillage_destination_target_id=$node->nid)"; 
      $numLaptops = db_query($query)->fetchField();
      if($numLaptops != 0) 
        return NODE_ACCESS_DENY;
    }
  }

  // Allow users with edit rights on an edoovillage (or hub) to be able
  // to write a story for that edoovillage
  $path = drupal_get_path_alias(current_path());
  if(0 === strpos($path, 'node/add/labdoo-story')) {
    $edoovillageId = $_GET['field_story_edoovillage']; 
    $edoovillageNode = node_load($edoovillageId);
    if($edoovillageNode) {
      if(labdoo_lib_edoo_hub_edit_access($edoovillageNode, $user)) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }

  // For logged in users accessing a dootronic page, check
  // if the user should have extra access rights due to
  // its relationship paths (e.g. via hub, via edoovillage)
  // with the dootronic
  if(!property_exists($node, 'type')) {
    return NODE_ACCESS_IGNORE;
  }
    
  if($node->type == 'laptop') {
    $dootronicsList = labdoo_lib_user2hub2dootronic($account->uid);
    if(in_array($node->nid, $dootronicsList)) {
      return NODE_ACCESS_ALLOW;
    }
    $dootronicsList = labdoo_lib_user2edoovillage2dootronic($account->uid);
    if(in_array($node->nid, $dootronicsList)) {
      return NODE_ACCESS_ALLOW;
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_node_view
 *
 */
function labdoo_lib_node_view($node, $view_mode) {
  global $language;
  global $user;

//labdoo_lib_msg_info("<a>Maintenance Note: Labdoo will be down for maintenance on 21/02/2021 from 6:00 to 9:00 CEST<br/></a>"); 
//labdoo_lib_msg_info("<a>During this upgrade we will deploy a new Labdoo landing page. Stay tuned for the new exciting changes!</a>"); 

  $path = drupal_get_path_alias(current_path());

  if($node->type == 'edoovillage') {
      labdoo_lib_msg_info("Traveling to this country and you would like to bring a laptop to this project? <a href=\"content/contact-labdoo?re=1\">Reach out to Labdoo</a> and we will help you make the difference.");
  }  

  // The following are some front page messages we enable from time to time.
  // By default, keep them commented out.
/*labdoo_lib_msg_info("Join our next online technical Q&A workshop on October 19, 2020 at 20:00 CEST<br/>
  <hr/>
  For more information, <a href='https://platform.labdoo.org/content/virtual-interactive-sanitizing-workshop-0-hero-monday-1910-2100-2100'>access this link.</a>
  <hr/>
  ");*/ 

  /*
  if((strcmp($path, 'content/front-page') == 0)) {
  labdoo_lib_msg_info("NEW FEATURE: TRY A LABDOO LAPTOP IN THE CLOUD
  <br/>
  <hr/>
  If you want to get a feel of what a Labdoo laptop looks like with its educational software fully loaded, check the following online demo:<br/>
  <hr/>
  Please log under:  <a target='_blank' href=http://cloud.labdoo.org>http://cloud.labdoo.org</a>
  <p>Username: student</p>Password: labdoo</p>");
  }
  */

// Temporary code to deal with GDPR
// If user not re-registered to newsletter, send friendly reminder
//  if(user_is_logged_in()) {
//    $query = "SELECT COUNT(*) FROM simplenews_subscription WHERE status=1 AND 
//              snid IN (SELECT snid FROM simplenews_subscriber WHERE uid=$user->uid)";
//    $news_activated = db_query($query)->fetchField();
//    if ($news_activated == 0)
//      labdoo_lib_msg_info(t("We'd love to continue this journey with you!
//                             Due to GDPR compliance, we need to get your consent to continue sending you 
//                             the Labdoo newsletter. Please go to the <a href=\"../newsletters\">Newsletter dashboard</a>
//                             to manage your subscriptions. Not subscribing again will mean we won't be able to send
//                             you anymore newsletters explaining all the wornderful Labdoo humanitarian stories 
//                             occuring around the world."));
//  }

  // TODO DE-COLORBOX: temporary fix. This forces a redirect of all photo galleries in German language
  // to the default language English, because there is a bug that prevents them from loading the 
  // colorbox slideshow. We also add a URL parameter 'lan=de' so that the links in the photo album
  // can be dynamically set to point back to the 'de' pages.
  // Upon fixing this bug, the following redirect can be removed.
  // See also https://platform.labdoo.org/content/slideshow-feature-does-not-work-german-de-language
  //
  // This feature is now disabled, as it does not work with automatic language redirect
//  if($language->language == 'de' && $node->type == 'node_gallery_gallery' && $view_mode == 'full' && arg(0) == 'node') {
//    $options = array('query' => array('lan' => 'de'));
//    drupal_goto('../' . $path, $options);
//  }

  // Add to this table any necessary redirects.
  // Follow the examples to add new entries.
  $labdoo_lib_page_redirects = [
    "ca/content/about-labdoo" => "content/sobre-labdoo",  // Example type 1: per language redirect 
    "content/zu-labdoo" => "LabdooD",                     // Example type 2: redirect for all languages 
    // Add below more entries following one of the two types
    "de/content/about-labdoo" => "content/zu-labdoo",
    "content/überblick-lerninhalte-ftp-server" => "content/overview-educational-content",
    "content/educational-content-oer-open-educational-resources" => "content/overview-educational-content",
    "content/offline-wikis-et-ressources-éducatives-libres" => "content/overview-educational-content",
    "content/impressum-0" => "content/impressum",
    "newsletter/labdoo-newsletter-global" => "newsletters",
    "content/front-page" => "content/edoovillages-dashboard",  // Added when we deployed the WP landing pages which took over the Drupal front page
    // Redirects for German super-hub pages
    "LabdooD" => "https://www.labdoo.org/deu/de/",
    "LabdooA" => "https://www.labdoo.org/deu/de/",
    "LabdooCH" => "https://labdoo.ch/",
    "content/Projektpartner" => "https://www.labdoo.org/deu/de/partner/",
    "content/spender" => "https://www.labdoo.org/deu/de/spender/",
    "content/labdooorg-ev-d" => "https://www.labdoo.org/deu/de/labdoo-ev/",
    "content/verein-labdooorg-ch" => "https://labdoo.ch/",
    "content/faq-forum" => "https://www.labdoo.org/deu/de/faq/",
    "content/impressum" => "https://www.labdoo.org/deu/de/impressum/",

    // Main helpers in Spanish
    "es/content/about-labdoo" => "content/acerca-de-labdoo",
    "es/content/about-hubs" => "content/acerca-de-los-hubs-centros-de-operación",
    "es/content/managing-edoovillages" => "content/administración-de-edoovillage",
    "es/content/about-dootronics" => "content/acerca-de-los-dootronics-dispositivos-donados",
    "es/content/dootrip-system" => "content/el-sistema-de-dootrips",
    "es/content/about-teams" => "content/acerca-de-los-equipos",
    "es/content/newsletters" => "content/boletines",
    "es/content/labdoo-wiki" => "content/labdoo-wiki-0",
    "es/content/labdoo-user-accounts" => "content/cuentas-de-usuario-de-labdoo",
    "es/content/labdoo-global-support-lgs-program" => "content/programa-de-soporte-global-de-labdoo-sgl",
    "es/content/labdoo-cities" => "content/labdoo-para-ciudades",
    "es/content/labdoos-corporate-social-responsibility-csr-package" => "content/paquete-labdoo-de-responsabilidad-social-corporativa-rsc",
    // Main helpers in Catalan
    "ca/content/about-hubs" => "content/què-són-els-hubs",
    "ca/content/managing-edoovillages" => "content/gestionar-una-edoovillage",
    // TODO: complete the next mappings when translations are completed
    "ca/content/about-dootronics" => "content/què-són-els-dootronics",
    "ca/content/dootrip-system" => "content/el-sistema-de-dootrips-0",
    "ca/content/about-teams" => "content/què-són-els-equips",
    "ca/content/newsletters" => "content/newsletters-1",
    "ca/content/labdoo-wiki" => "content/la-wiki-de-labdoo",
    "ca/content/labdoo-user-accounts" => "content/comptes-dusuari-de-labdoo",
    "ca/content/labdoo-global-support-lgs-program" => "content/com-rebre-ajuda-de-lequip-tècnic-de-labdoo",
    // "ca/content/labdoos-corporate-social-responsibility-csr-package" => "",
    "ca/content/labdoo-cities" => "content/labdoo-ciutats"
  ];

  // Perform any page redirect if needed

  // TODO: implement the reverse path => start from content/about-labdoo =>
  //       switch to Catalan => takes you to ca/content/sobre-labdoo =>
  //       switch to German => should take you to de/content/zu-labdoo
  //       This can be done by finding a reverse connecting path in labdoo_lib_page_redirects

  if($language->language == "en")
    $extended_path = $path;
  else
    $extended_path = $language->language . "/" . $path;
  if(array_key_exists($extended_path, $labdoo_lib_page_redirects)) 
    drupal_goto($labdoo_lib_page_redirects[$extended_path]);
  else if(array_key_exists($path, $labdoo_lib_page_redirects)) 
    drupal_goto($labdoo_lib_page_redirects[$path]);  

  if($node->type == 'laptop') {
    $method = '';
    $dooject = '';
    $usr = '';
    $value = '';
    $dooject = $hub = NULL;
    if(!empty($_GET['m']))
      $method = $_GET['m'];
    if(!empty($_GET['d']))
      $dooject = $_GET['d'];
    if(!empty($_GET['u']))
      $usr = $_GET['u'];
    else {
      global $user;
      $usr = $user->uid;
    }
    if(!empty($_GET['v'])) 
      $value = $_GET['v'];
    if($method != '' && $dooject != '' && $usr != '' && $dooject != '') {
      if($method == 'p' && node_access("update", $node, $user)) 
        labdoo_update_flags_dooject($method, $dooject, $usr, $value);
      if($method == 'f')
        labdoo_update_flags_dooject($method, $dooject, $usr, $value);
    }
  }

  // Handle page redirects here

  $languages = language_list();

  if(($node->type == 'edoovillage') &&       // only redirect edoovillages
     (strcmp($path, "edoovillage") != 0) &&  // avoid infinite loop by not redirecting the target URL itself
     (strpos($path, 'revisions') == 0) &&    // do not redirect when in revision mode
     ($view_mode == 'full')) {               // only redirect when in full view mode
    drupal_goto('edoovillage', array('language' => $languages[$language->language], 'query' => array('e' => $node->nid)));
  }

  if(($node->type == 'hub') && 
     (strcmp($path, 'hub') != 0) && 
     (strpos($path, 'revisions') == 0) && 
     ($view_mode == 'full')) {
    drupal_goto('hub', array('language' => $languages[$language->language], 'query' => array('h' => $node->nid)));
  }

  return;
}


/**
 * Prints the labels of a dooject
 *                                 
 * @param laptopid The ID of the dooject 
 *
 */
function lbd_print_dooject_labels($laptopid = NULL) {

  $query = explode('&', $_SERVER['QUERY_STRING']);
  $params = array();

  print(
    t('Print and attach these three labels to: (1) the device, (2) the power adaptor and (3)
       inside the battery compartment of the device. You can omit the third tag if the device has no battery
       compartment. Check this <a href="/profiles/labdoo/files/pictures/tagging-flow.png" class="colorbox-load">drawing</a> if in doubt.')
  );

  $isRange = 0;
  foreach($query as $param) {
    $keyPair = explode('=', $param);
    if($keyPair[0] == "id_first") {
      $laptopidFirst = $keyPair[1];
      $isRange += 1;
    }
    if($keyPair[0] == "id_last") {
      $laptopidLast = $keyPair[1];
      $isRange += 1;
    }
    
  }

  if($isRange == 1) {
    print(t('<p>Wrong Parameters. Please use both an id_first and an id_last parameter to define a range of tags.</p>'));
    return; 
  }

  $laptopIdList = array();
  if($isRange == 2) {
    if(!ctype_digit($laptopidFirst) or !ctype_digit($laptopidLast)) {
      print(t('<p>Wrong Parameters. Please use a valid <span style="color:#ff0000;">9 digit</span> number to correctly display tags.</p>'));
      return; 
    }
    for ($x = $laptopidFirst; $x <= $laptopidLast; $x++) {
      array_push($laptopIdList, sprintf("%09d", $x));
    }
  }
  else {
    foreach($query as $param) {
      $keyPair = explode('=', $param);
      if($keyPair[0] != "id")
        continue;
      array_push($laptopIdList, $keyPair[1]);
    }
  }

  foreach($laptopIdList as $laptopid) {
    $nodeId = lbd_laptopid2nodeid($laptopid);
    if($nodeId == "" || (($nodeLoaded = node_load($nodeId)) == FALSE)) {
      print(t('<p>Wrong Identifier. Please use a valid <span style="color:#ff0000;">9 digit</span> number to correctly display tags.</p>'));
      return; 
    }
    
    $adjustedWidth = 110;
    // If the Wh field is present, the print it in the label
    $wattageHour = labdoo_lib_compute_watt_hours($nodeLoaded);

    print('
<br>
<br>

<table border="0" cellpadding="1" cellspacing="1" style="width: 780px;">
<tbody>
<tr>
<td style="width: ' . $adjustedWidth . 'px;">
<img src="/profiles/labdoo/files/pictures/labdoo-site-logo.png" width="70">
<p><strong style="color: rgb(0, 0, 0); font-family: monospace; line-height: 2px; font-size: 11px;">
Device tag
ID: '.$laptopid.'
</strong></p>
</td>
<td style="width: 100px;">
    ');
    lbd_generate_qrcode($laptopid);
    print('
</td>
<td style="width: ' . $adjustedWidth . 'px;">
<img src="/profiles/labdoo/files/pictures/labdoo-site-logo.png" width="70">
<p><strong style="color: rgb(0, 0, 0); font-family: monospace; line-height: 2px; font-size: 11px;">
Power adap. tag
ID: '.$laptopid.'
</strong></p>
</td>
<td style="width: 100px;">
    ');
    lbd_generate_qrcode($laptopid);
    print('
</td>
<td style="width: ' . $adjustedWidth . 'px;">
<img src="/profiles/labdoo/files/pictures/labdoo-site-logo.png" width="70">
<p><strong style="color: rgb(0, 0, 0); font-family: monospace; line-height: 2px; font-size: 11px;">
Batt. comp. tag
ID: '.$laptopid.'
</strong></p>
</td>
<td style="width: 100px;">
    ');
    lbd_generate_qrcode($laptopid);
    print('
</td>
<td style="width: 150px;">
<p><strong style="color: rgb(0, 0, 0); font-family: monospace; line-height: 2px; font-size: 11px;">Battery<br>watt-hours:<br>' . $wattageHour . '<br></strong></p>
</td>
</tr>
<tr>
<td colspan="2">
<strong style="color: red; font-family: monospace; line-height: 2px; font-size: 10px;">
This device has to stay at your property or donations will stop.
</strong>
</td>
</tr>
</tbody>
</table>
    ');
  }

  return;
}


/**
 * Checks if a dooject is being followed by a user
 *
 * @param doojectObject The dooject object 
 * @param userObject The user object 
 *
 * @return boolean Returns true if the dooject is followed by the user, false otherwise
 *
 */
function labdoo_is_dooject_followed($doojectObject, $userObject) {

  $wDoojectNode = entity_metadata_wrapper('node', $doojectObject);
  $currList = $wDoojectNode->field_additional_followers->value();

  if(in_array($userObject, $currList))
    return True;
  else
    return False;
}
 

/**
 * Updates the flags of a dooject 
 *
 * @param method The method defining what type of action: {f (follow), p (pick me up)}
 * @param laptopid The ID of the dooject 
 * @param userid The ID of the user 
 * @param value The value to set 
 *
 */
function labdoo_update_flags_dooject($method = "", $doojectId = NULL, $userId = NULL, $value = NULL) {

  if($method != 'f' && $method != 'p')
  {
    // Not a valid method
    return;
  }

  if(($doojectId == NULL) || (!is_numeric($doojectId)) || (intval($doojectId) < 0))
  {
    // Not a valid dooject
    return;
  }

  if(($userId == NULL) || (!is_numeric($userId)) || (intval($userId) < 0))
  {
    // Not a valid user
    return;
  }

  if($value != 0 && $value != 1)
  {
    // Wrong parameter
    return;
  }

  $doojectNode = node_load($doojectId);
  if($doojectNode == FALSE || $doojectNode->type != 'laptop')
  {
    // Dooject not found
    return;
  }

  $newRef = user_load($userId);
  if($newRef == FALSE)
  {
    // User not found
    return;
  }

  if($method == 'f') {
    $wDoojectNode = entity_metadata_wrapper('node', $doojectNode);
    $currList = $wDoojectNode->field_additional_followers->value();
    if(!$currList)
      $currList = array();

    if(in_array($newRef, $currList))
    {
      if($value == '1')
      {
        labdoo_lib_msg_info(t('You are already following Dootronic ' . $doojectNode->title));
        return; // User is already following this dooject, just return
      }
    }
    else if($value == '0')
    {
      labdoo_lib_msg_info(t('You are not following Dootronic ' . $doojectNode->title));
      return; // User is already not following this dooject, just return
    }

    if($value == '1')
    {
      $currList[] = $newRef;
      labdoo_lib_msg_info(t('You are now following Dootronic ' . $doojectNode->title));
    }
    else
    {
      $key = array_search($newRef, $currList);
      unset($currList[$key]);
      labdoo_lib_msg_info(t('You are no longer following Dootronic ' . $doojectNode->title));
    }

    $wDoojectNode->field_additional_followers->set($currList);
    $wDoojectNode->save();
  }

  if($method == 'p') {
    $wDoojectNode = entity_metadata_wrapper('node', $doojectNode);
    $currPickmeFlag = $wDoojectNode->field_pick_me_up->value();
    if($value == '1') {
      labdoo_lib_msg_info(t('Dootronic ' . $doojectNode->title . ' is marked as ready to be picked up'));
      $wDoojectNode->field_pick_me_up->set(TRUE);
    }
    else {
      labdoo_lib_msg_info(t('Dootronic ' . $doojectNode->title . ' is marked as not ready to be picked up'));
      $wDoojectNode->field_pick_me_up->set(FALSE);
    }
    $wDoojectNode->save();
  }

  return;
}


/**
 * Get the value of a node field.
 * If there are multiple values, get just the first one. 
 * Field must have the key $key.
 *
 * @param node $node
 *   The node where the entity field is contained
 * @param string $field 
 *   The entity field name 
 * @param string $type
 *   The type of node, it must be one of {'user', 'node', 'comment'}
 * @param string $key
 *   The key to retrieve
 * @return The value in the field
 *
 */
function labdoo_lib_get_field($node, $field, $type, $key) {
  $field_items = field_get_items($type, $node, $field);
  if(!$field_items)
    return;
  $item = array_values($field_items)[0];
  if(!$item)
    return NULL;
  return($item[$key]);
}


/**
 * Get the value of a node field.
 * Return an array with all the values.
 * This function is a generalization of labdoo_lib_get_field()
 * to return multiple values.
 *
 * Field must have the key $key.
 *
 * @param node $node
 *   The node where the entity field is contained
 * @param string $field 
 *   The entity field name 
 * @param string $type
 *   The type of node, it must be one of {'user', 'node', 'comment'}
 * @param string $key
 *   The key to retrieve
 * @return an array with the values in the field
 *
 */
function labdoo_lib_get_field_all($node, $field, $type, $key) {
  $values = array();
  $field_items = field_get_items($type, $node, $field);
  if(!$field_items)
    return($values);
  foreach($field_items as $item) {
    array_push($values, $item[$key]); 
  }
  return($values);
}


/**
 * Prints an array in a user friendly way
 *
 * @param array $array An input array
 * @param string $prefix A prefix to add before the printing of each element of the array
 *
 */
function labdoo_lib_print_array($array) {
  print '<pre>'; print_r($array);  print '</pre>';
  return;
}


/**
 * Prings a backtrace (for debugging purposes)
 *
 */
function labdoo_lib_print_backtrace() {
  $trace=debug_backtrace();
  $index = 0;
  while($trace[$index]) {
    $caller=$trace[$index];
    drupal_set_message("Called by {$caller['function']}");
    $index++;
  }
  return;
}


/**
 * Renders the AddToAny share button
 *
 * @return Code rendering the AddToAny block
 *
 */
function _render_addtoany() {
  $blockAddToAny = module_invoke('addtoany', 'block_view', 'addtoany_button');
  $code = render($blockAddToAny["content"]);
  // Add a tiny invisible image (of size zero in fact) to control the image that will show up 
  // when sharing the page with addtoany
  $code = $code . '<img src="/profiles/labdoo/files/pictures/laptop.png" width="0" style="visibility:hidden"/>';
  return($code);
}


/**
 * Renders the language switch block 
 *
 * @return Code rendering the language switch block
 * 
 */
function labdoo_render_language_switch() {
  $blockLanguage = module_invoke('lang_dropdown', 'block_view', 'language');
  $languageSwitchCode = render($blockLanguage["content"]); 
  $languageSwitchCode = str_replace("<form ", "<form style='height:10px' ", $languageSwitchCode);
  $code = "<table><tr><td>$languageSwitchCode</td></tr></table>" . "<br/>";
  return($code);
} 


/**
 * Renders the macro statistics 
 *
 * @param string $type Type of rendering, can be "horizontal" or "vertical"
 * @return Code rendering the macro statistics
 *
 */
function labdoo_render_macro_stats($type, $addTitle=False) {
  global $language;
  $defaultLanguage = language_default();
  $langCode = "";
  if($language->language != $defaultLanguage->language)
    $langCode = "/" . $language->language;

  $numLaptopsNeeded = labdoo_get_demand(NULL, NULL, FALSE); 
  $numLaptopsDelivered = labdoo_getnum_doojects(NULL, NULL, 'S4', True);
  $numLaptopsTransit = labdoo_getnum_doojects(NULL, NULL, 'T1') + labdoo_getnum_doojects(NULL, NULL, 'S3'); 
  $numLaptopsTagged = lbd_get_total_num_objects('laptop'); 
  $numHubs = lbd_get_total_num_objects('hub');
  $numEdoovillages = lbd_get_total_num_objects('edoovillage');
  $numStudents = lbd_get_total_num_objects('student');
  $numCountries = lbd_get_total_num_objects('country');;

  // Compute CO2 savings
  // CO2 savings = Savings from dootronics + savings from dootrips
  if($cacheResult = cache_get('labdoo_co2_savings_dootrip')) {
    $co2SavingsDootrip = $cacheResult->data;
  }
  else {
    $co2SavingsDootrip = lbd_get_co2_savings_dootrip(); 
    // Save it in the cache
    // Note: this cache is periodically cleaned up in labdoo_lib_cron
    cache_set('labdoo_co2_savings_dootrip', $co2SavingsDootrip, 'cache');
  }
  $co2SavingsDootronic = $numLaptopsDelivered * 18.59; 
  $co2SavingsTotal = intval($co2SavingsDootrip + $co2SavingsDootronic);

  $header = "";
  $separator = "<br>";
  $trailer = "<br>";
 
  if($type == "horizontal") {
    $separator = "&nbsp; &nbsp;";
    $trailer ="<br/>";
    // TODO: check if path belongs to labdoo_lib_page_redirects
    //       If it does, then do display the language switch 
    if(!labdoo_lib_node_is_type(array('book'))) {
      $header = "<table><tr><td style='width:1090px'>";
      $trailer ="</td><td width='130px' align='center'>".labdoo_render_language_switch()."</td></tr></table>";
    }
  }

  $statsTitle = "";
  if($addTitle)
    $statsTitle = t("Global Progress: ");

// Lines currently not included in the macro stats:
// <span style=\"font-size: 24px; align: left; line-height: 30px; color: #ff0000\">$numLaptopsNeeded</span>
// <span style=\"font-size: 12px; align: left; line-height: 30px; \">" . t('Dootronics needed') . "</span>$separator

  $code = $header;
  $code = $code . $statsTitle . "
<span style=\"font-size: 22px; align: left; line-height: 30px; \"><a href=$langCode/content/dootronics-dashboard style=\"color: #ff0000\">$numLaptopsTagged</a></span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \"><a href=$langCode/content/dootronics-dashboard style=\"color: #333333\">" . t('Dootronics tagged') . "</a></span>$separator
<span style=\"font-size: 22px; align: left; line-height: 30px; \"><a href=$langCode/content/dootronics-dashboard style=\"color: #ff0000\">$numLaptopsDelivered</a></span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \"><a href=$langCode/content/dootronics-dashboard style=\"color: #333333\">" . t('Delivered') . "</a></span>$separator
<span style=\"font-size: 22px; align: left; line-height: 30px; \"><a href=$langCode/content/edoovillages-dashboard style=\"color: #ff0000\">$numEdoovillages</a></span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \"><a href=$langCode/content/edoovillages-dashboard style=\"color: #333333\">" . t('Schools') . "</a></span>$separator
<span style=\"font-size: 22px; align: left; line-height: 30px; \"><a href=$langCode/content/edoovillages-dashboard style=\"color: #ff0000\">$numStudents</a></span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \"><a href=$langCode/content/edoovillages-dashboard style=\"color: #333333\">" . t('Students') . "</a></span>$separator
<span style=\"font-size: 22px; align: left; line-height: 30px; \"><a href=$langCode/content/hubs-dashboard style=\"color: #ff0000\">$numHubs</a></span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \"><a href=$langCode/content/hubs-dashboard style=\"color: #333333\">" . t('Hubs') . "</a></span>$separator
<span style=\"font-size: 22px; align: left; line-height: 30px; \"><a href=$langCode/content/dootronics-dashboard style=\"color: #ff0000\">$co2SavingsTotal</a></span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \"><a href=$langCode/content/dootronics-dashboard style=\"color: #333333\">" . t('Kg CO2 saved') . "</a></span>$separator
<span style=\"font-size: 22px; align: left; line-height: 30px; \"><a href=$langCode/content/dootronics-dashboard style=\"color: #ff0000\">$numCountries</a></span>
<span style=\"font-size: 12px; align: left; line-height: 30px; \"><a href=$langCode/content/dootronics-dashboard style=\"color: #333333\">" . t('Countries') . "</a></span>$separator
$trailer
  ";

  return $code;
}


/**     
 * Renders the Labdoo iGlobal Statistics and generates a JSON file 
 * https://github.com/Labdoo/Labdoo/issues/96
 *
 */
function labdoo_macro_stats_to_json() {

  $numLaptopsNeeded = labdoo_get_demand(NULL, NULL, FALSE);
  $numLaptopsDelivered = labdoo_getnum_doojects(NULL, NULL, 'S4', True);
  $numLaptopsTransit = labdoo_getnum_doojects(NULL, NULL, 'T1') + labdoo_getnum_doojects(NULL, NULL, 'S3');
  $numLaptopsTagged = lbd_get_total_num_objects('laptop');
  $numHubs = lbd_get_total_num_objects('hub');
  $numEdoovillages = lbd_get_total_num_objects('edoovillage');
  $numStudents = lbd_get_total_num_objects('student');
  $numCountries = lbd_get_total_num_objects('country');;

  // Compute CO2 savings
  // CO2 savings = Savings from dootronics + savings from dootrips
  //$co2SavingsDootrip = $cacheResult->data;
  //$co2SavingsDootronic = $numLaptopsDelivered * 18.59;
  //$co2SavingsTotal = intval($co2SavingsDootrip + $co2SavingsDootronic);

if($cacheResult = cache_get('labdoo_co2_savings_dootrip')) {
    $co2SavingsDootrip = $cacheResult->data;
  }
  else {
    $co2SavingsDootrip = lbd_get_co2_savings_dootrip(); 
    // Save it in the cache
    // Note: this cache is periodically cleaned up in labdoo_lib_cron
    cache_set('labdoo_co2_savings_dootrip', $co2SavingsDootrip, 'cache');
  }
  $co2SavingsDootronic = $numLaptopsDelivered * 18.59; 
  $co2SavingsTotal = intval($co2SavingsDootrip + $co2SavingsDootronic);


  $myfile = fopen("/var/www/lbd/data.json", "w");

  $txt="{\n";
  fwrite($myfile, $txt);
  $txt="  \"_coment\": \"This is a JSON file execlusively generated to send this information to the Wordpress marker, is generated on labdoo_render_macro_stats\",\n";
  fwrite($myfile, $txt);

  $txt="  \"level1\": {\n";
  fwrite($myfile, $txt);

  $txt="    \"dootronics\": \"$numLaptopsTagged\",\n";
  fwrite($myfile, $txt);
  $txt="    \"escuelas\": \"$numEdoovillages\",\n";
  fwrite($myfile, $txt);
  $txt="    \"estudiantes\": \"$numStudents\",\n";
  fwrite($myfile, $txt);
  $txt="    \"hubs\": \"$numHubs\",\n";
  fwrite($myfile, $txt);
  $txt="    \"paises\": \"$numCountries\",\n";
  fwrite($myfile, $txt);
  $txt="    \"co2saved\": \"$co2SavingsTotal\"\n";
  fwrite($myfile, $txt);
  $txt="}}";
  fwrite($myfile, $txt);
  fclose($myfile);


}



/**
 * Renders the Labdoo footer block 
 *
 * @return The code to render
 *
 */
function labdoo_render_footer() {
  global $language;
  $defaultLanguage = language_default();

  // Compute language code prefix for links
  $langCode = "";
  if($language->language != $defaultLanguage->language)
    $langCode = "/" . $language->language;

  // Compute footer links (TODO: factor out this code into a function)
  $path = explode('/', drupal_get_normal_path('content/labdoos-terms-conditions-and-data-protection'));
  $urlTerms = '"'.$langCode.'/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$path[1].'"';
  $path = explode('/', drupal_get_normal_path('content/source-code-development-team'));
  $urlDev = '"'.$langCode.'/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$path[1].'"';
  $path = explode('/', drupal_get_normal_path('content/glits-good-labdoo-habits'));
  $urlGlits = '"'.$langCode.'/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$path[1].'"';
  $path = explode('/', drupal_get_normal_path('content/faq'));
  $urlFaq = '"'.$langCode.'/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$path[1].'"';
  $path = explode('/', drupal_get_normal_path('content/values-philosophy-and-principles-labdoo-project'));
  $urlValues = '"'.$langCode.'/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$path[1].'"';
  $path = explode('/', drupal_get_normal_path('content/about-labdoo'));
  $urlNutshell = '"'.$langCode.'/wiki-index?field_book_language_value=All&field_reference_book_target_id='.$path[1].'"';
  $urlContact = '"'.$langCode.'/content/contact-labdoo'.'"';

  // Now write the code
  $aboutLabdoo = t('About Labdoo');
  $valuesAndPhilos = t('Values and Philosophy');
  $termsAndConditions = t('Terms and Conditions');
  $sourceCode = t('Source Code / Development Team'); 
  $contactLabdoo = t('Contact Labdoo');
  $faq = t('FAQ');

  $code = ' 
<table align="center"> 
<tr>
<td width="300">
<a href='.$urlNutshell.'>'.$aboutLabdoo.'</a>
</td>
<td width="250">
<a href='.$urlGlits.'>Glits</a>
</td>
<td width="300">
<img src="/profiles/labdoo/files/pictures/equation-2-alpha-smaller.png" width="60">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="/rss.xml"><img src="/misc/feed.png"></a>
</td>
</tr>
<tr>
<td>
<a href='.$urlValues.'>'.$valuesAndPhilos.'</a>
</td>
<td>
<a href='.$urlFaq.'>'.$faq.'</a>
</td>
<td>
<a href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons</a>
</td>
</tr>
<tr>
<td>
<a href='.$urlDev.'>'.$sourceCode.'</a>
</td>
<td>
<a href='.$urlTerms.'>'.$termsAndConditions.'</a>
</td>
<td>
<a href='.$urlContact.'>'.$contactLabdoo.'</a>
</td>
</tr>
</table>
<br/><br/>
<img src="/profiles/labdoo/files/pictures/footer-acts.png">
';

  // Some regions need special footer. 
  // The following overwrites the footer block based on each region / language.
  if($langCode == '/de') {
    $code = ' 
<table align="center"> 
<tr>
<td width="300">
<a href='.$urlNutshell.'>'.$aboutLabdoo.'</a>
</td>
<td width="250">
<a href='.$urlGlits.'>Glits</a>
</td>
<td width="300">
<img src="/profiles/labdoo/files/pictures/equation-2-alpha-smaller.png" width="60">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="/rss.xml"><img src="/misc/feed.png"></a>
</td>
</tr>
<tr>
<td>
<a href='.$urlValues.'>'.$valuesAndPhilos.'</a>
</td>
<td>
<a href='.$urlFaq.'>'.$faq.'</a>
</td>
<td>
<a href="http://creativecommons.org/licenses/by-sa/3.0/">Creative Commons</a>
</td>
</tr>
<tr>
<td>
<a href='.$urlDev.'>'.$sourceCode.'</a>
</td>
<td>
<a href="/de/content/impressum">Impressum</a>
</td>
<td>
<a href='.$urlContact.'>'.$contactLabdoo.'</a>
</td>
</tr>
</table>
<br/><br/>
<img src="/profiles/labdoo/files/pictures/footer-acts.png">
';
  }

  return $code;
}


/**
 * Renders the Labdoo team object header
 *
 * @return The code to render
 *
 */
function labdoo_render_team_object_header() {
  if ((arg(0) != 'node') || !is_numeric(arg(1)))
    return;
  $node = node_load(arg(1));

  $codeTeams = "";
  $teamsList = labdoo_lib_get_field_all($node, 'field_additional_teams', 'node', 'target_id'); 
  foreach($teamsList as $teamId) {
    $teamPath = drupal_get_path_alias("node/" .  $teamId) . "/activities";
    $teamName = lbd_nodeid2title($teamId);
    $codeTeams .= '<a href="../'.$teamPath.'">'.$teamName.'</a> ';
  }

  $code = "<p align='right'><strong><font color='gray'>" . t("Following this conversation") . "</font></strong><br/>" . lbd_print_team_followers($node) . "</p>"; 
  if($codeTeams != "")
    $code = $code . "<p align='right'><strong><font color='gray'>" . t("Additional teams following this conversation") . "</font></strong><br/>" . $codeTeams . "</p>"; 
  $code = $code . "<hr/>";

  return $code; 
}


/**
 * Renders the superhub menu block 
 *
 * @return The code to render
 *
 */
function labdoo_render_superhub_menu() {
  global $language;

  //
  // If we are here, we passed the filter (labdoo_block_filter_superhub_menu)
  // so that there can only be two cases:
  //   (1) We are in a superhub page. Load it's associated menu block and return its body code.
  //   (2) We are not in a superhub page but there exists a superhub block menu with a language
  //       equal to the current page language. Load this superhub block menu.
  //
  if(labdoo_lib_node_is_type(array('superhub_page'))) {
    # case (1)
    $query = "SELECT entity_id FROM field_data_field_linked_pages WHERE field_linked_pages_target_id=" . arg(1);
  }
  else {
    if($language->language == 'en')
      return "";
    # case (2)
    $query = "SELECT entity_id FROM field_data_field_shub_page_language WHERE field_shub_page_language_value='$language->language' AND entity_id IN 
             (SELECT entity_id FROM field_data_field_superhub_page_type WHERE field_superhub_page_type_value='block')";
  }
  $menuBlockId = db_query($query)->fetchField();
  if($menuBlockId == "")
    return "";

  $node = node_load($menuBlockId);
  $code = labdoo_lib_get_field($node, 'body', 'node', 'value');
  return $code;
}


/**
 * Implements hook_user_view().
 *
 */
function labdoo_lib_user_view($account, $view_mode, $langcode) {
  // Set the page title of the user profile page 
  // to the user's full name.
  $wrapper = entity_metadata_wrapper('user', $account);
  drupal_set_title($wrapper->field_user_name->value());

  return;
}


/**
 * Implements hook_user_presave
 *
 */
function labdoo_lib_user_presave(&$edit, &$account, $category) {
  /*
   * When creating or updating a user, geolocate its position so that
   * it can be displayed on the user maps
   */
  if(!isset($edit['locations']))
    return;
  $location = $edit['locations'][0]; 
  $ret = labdoo_lookup_coordinates($location['country'],
                                   $location['city'],
                                   $edit['locations'][0]['latitude'],
                                   $edit['locations'][0]['longitude']);
  if($ret == 0) // If successful, do not let the system attempt to geolocate it anymore
    $edit['locations'][0]['inhibit_geocode'] = TRUE;
  else
    $edit['locations'][0]['inhibit_geocode'] = FALSE;

  return;
}


/**
 * Implements the visibility filter for the blocks in the sidebar_second region
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_sidebar_second() {
  $path = drupal_get_path_alias(current_path());

  if(strcmp($path, "actions") == 0)
      return TRUE;

  if(strcmp($path, "myActions") == 0)
      return TRUE;

  if(strcmp($path, "teams") == 0)
      return TRUE;

  if(strcmp($path, "teams-activities") == 0)
      return TRUE;

  if(strcmp($path, "my-teams-activities") == 0)
      return TRUE;

  if(strcmp($path, "my-teams") == 0)
      return TRUE;

  if(strcmp($path, "wiki-index") == 0)
      return TRUE;

  if(strcmp($path, "newsletters") == 0)
      return TRUE;

  if(strcmp($path, "hubs") == 0)
      return TRUE;

  if(strcmp($path, "content/contact-labdoo") == 0)
      return TRUE;

  if(strcmp($path, "content/notification-email") == 0)
      return TRUE;

  if(arg(0) == 'user')
      return TRUE;

  if(arg(0) == 'registration' and !strpos($path, 'delete') and !strpos($path, 'edit')) {
    if(user_is_logged_in()) {
      global $user;
      $userId = $user->uid;
      labdoo_lib_msg_info(t("You can see all your registrations from <a href=\"../user/$userId/myevents\">this page</a>."));
    }
    return TRUE;
  }

  return FALSE;
}


/**
 * Implements the visibility filter for the vertical macro stats block
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_macro_vertical() {
  $path = drupal_get_path_alias(current_path());

  # For wiki pages, do not show the vertical stats (show instead the horizontal stats),
  # except for the main general wiki index page
  if(labdoo_lib_node_is_type(array('book')) && strcmp($path, "wiki-index") != 0)
    return FALSE;

  return labdoo_block_filter_sidebar_second();
}


/**
 * Implements the visibility filter for the actions feed block
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_actions_feed() {
  $path = drupal_get_path_alias(current_path());

  if(strcmp($path, "wiki-index") == 0)
      return FALSE;

  if(labdoo_lib_node_is_type(array('book')))
    return FALSE;

  return labdoo_block_filter_sidebar_second();
}


/**
 * Implements the visibility filter for the search block
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_search() {
  $path = drupal_get_path_alias(current_path());

//  if(strcmp($path, "content/about-labdoo") == 0)
//    return FALSE;

  if(strcmp($path, "user/login") == 0)
    return FALSE;

  if(strcmp($path, "user/password") == 0)
    return FALSE;

  if(strcmp($path, "user/register") == 0)
    return FALSE;

  if(strcmp($path, "user") == 0)
    return FALSE;

  if(strcmp($path, "content/tag-one-dooject") == 0)
    return FALSE;

  if(strcmp($path, "content/map-visualizer") == 0)
    return FALSE;

  if(strcmp($path, "content/doopoints") == 0)
    return FALSE;

  if(strcmp($path, "content/doopoints-miami-hub") == 0)
    return FALSE;

  if(0 === strpos($path, 'node/add/'))
    return FALSE;

  if(labdoo_lib_node_is_type(array('labdoo_story')))
    return FALSE;

  return TRUE;
}


/**
 * Implements the visibility filter for the language switch block
 *    
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *    
 */
function labdoo_block_filter_language_switch() {

  // Show up the switch whenever the right column (sidebar_second) is displayed 
  if(labdoo_block_filter_sidebar_second())
    return TRUE;

  return FALSE;
}


/**
 * Implements the visibility filter for the blocks in the header region
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_header() {
  $path = drupal_get_path_alias(current_path());

  if(strcmp($path, "user") == 0)
      return TRUE;

  if(strcmp($path, "user/password") == 0)
      return TRUE;

  if(strcmp($path, "map") == 0)
      return TRUE;

  if(strcmp($path, "dootrips") == 0)
      return TRUE;

  if(strcmp($path, "labdooers") == 0)
      return TRUE;

  if(strcmp($path, "teams-dashboard") == 0)
      return TRUE;

  if(strcmp($path, "edoovillage") == 0)
      return TRUE;

  if(strcmp($path, "hub") == 0)
      return TRUE;

  if(strcmp($path, "labdoo-stories") == 0)
      return TRUE;

  if(strcmp($path, "contact") == 0)
      return TRUE;

  if(strcmp($path, "content/dootronics-dashboard") == 0)
      return TRUE;

  if(strcmp($path, "content/dootrips-dashboard") == 0)
      return TRUE;

  if(strcmp($path, "content/edoovillages-dashboard") == 0 || strcmp($path, "call-for-laptops") == 0)
      return TRUE;

  if(strcmp($path, "content/hubs-dashboard") == 0)
      return TRUE;

  if(strcmp($path, "content/thank-you") == 0)
      return TRUE;

  if(strcmp($path, "content/doopoints") == 0)
      return TRUE;

  if(strcmp($path, "content/doopoints-miami-hub") == 0)
      return TRUE;

  if((strcmp($path, "share-wall") == 0) || (strcmp($path, "content/my-share-wall") == 0))
      return TRUE;

  if(labdoo_lib_node_is_type(array('laptop', 'dootrip', 'node_gallery_gallery', 
                             'drupal_wall', 'team_page', 'superhub_page', 'simplenews', 'labdoo_story')))
    return TRUE;

  if(0 === strpos($path, 'node/add/'))
      return TRUE;

  if(arg(0) == 'node' && arg(2) == 'edit')
      return TRUE;

  if(lbd_teams_page_group_id() || (0 === strpos($path, 'content/team-members')))
    return TRUE;

  if(lbd_wiki_is_book_node())
    return TRUE;

  if(strcmp($path, "update-dootronics") == 0)
      return TRUE;

  if(strcmp($path, "clone-dootronics") == 0)
      return TRUE;

  return FALSE;
}


/**
 * Implements the visibility filter for the Labdoo footer block 
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_footer() {
  $path = drupal_get_path_alias(current_path());

  if(strcmp($path, "content/follow-dooject") == 0)
      return FALSE;

  if(strcmp($path, "content/tag-one-dooject") == 0)
      return FALSE;

  return TRUE;
}


/**
 * Implements the visibility filter for the Labdoo team object header 
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_team_object_header() {

  if(!user_is_logged_in()) 
    return FALSE;
  if(!labdoo_lib_node_is_type(array('team_page', 'event', 'team_task')))
    return FALSE;

  return TRUE;
}


/**
 * Implements the visibility filter for the superhub menu block
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_superhub_menu() {
  global $language;

  /*
   * If there exists a superhub menu page with the 'Language'
   * field set and equal to the current page language,
   * display such superhub menu page.
   */
  $query = "SELECT entity_id FROM field_data_field_shub_page_language WHERE field_shub_page_language_value='$language->language' AND entity_id IN 
           (SELECT entity_id FROM field_data_field_superhub_page_type WHERE field_superhub_page_type_value='block')";
  $menuBlockId = db_query($query)->fetchField();
  // Return true if such menu block was found and if sidebar_second is present.
  if($menuBlockId && labdoo_block_filter_sidebar_second())
    return TRUE;

  /*
   * Check that it is of the right content type
   */
  if(!labdoo_lib_node_is_type(array('superhub_page', 'book')))
    return FALSE;

  $node = node_load(arg(1));

  /*
   * Check that it is of type page
   */
//  if(labdoo_lib_get_field($node, 'field_superhub_page_type', 'node', 'value') != 'page')
//    return FALSE;

  return TRUE;
}


/**
 * Implements hook_element_info_alter().
 *
 * Sets the text format processor to a custom callback function.
 * This code is based on the Better Formats module.
 *
 */
function labdoo_lib_element_info_alter(&$type) {
  if (isset($type['text_format']['#process'])) {
    foreach ($type['text_format']['#process'] as &$callback) {
      if ($callback === 'filter_process_format') {
        $callback = 'labdoo_lib_filter_process_format';
      }
    }
  }
}


/**
 * Callback for MODULENAME_element_info_alter().
 *
 */
function labdoo_lib_filter_process_format($element) {
  $element = filter_process_format($element);
  if(!isset($element['#bundle'])) {
    return;
  }
  // Change input format to "Filtered HTML" for body fields of article nodes
  if (($element['#bundle'] == 'superhub_page' || $element['#bundle'] == 'simplenews') && $element['#field_name'] == 'body') {
    $element['format']['format']['#default_value'] = 'full_html';
  }
  return $element;
}


/**
 * Returns the number of doojects assigned to a dootrip
 *
 * @param node $nodeLoaded The dootrip node (loaded)
 *
 * @return The number of doojects
 *
 */
function labdoo_lib_compute_dootrip_load($nodeLoaded) {
  $dootronics = field_get_items('node', $nodeLoaded, 'field_laptops');
  if(empty($dootronics))
    return(0);
  return(count($dootronics));
}


/**
 * Call back function used to check if the given account corresponds
 * to the current user
 *
 * @param $account An input account
 *
 * @return TRUE if the accounts match, FALSE otherwise
 *
 */
function _is_my_user_page($account = NULL) {
  global $user;

  if($account->name == $user->name)
      return TRUE;

  return FALSE;
}


/*
 * hook_menu
 *
 */
function labdoo_lib_menu() {

  $items['user/%user/metrics'] = array(
    'access callback' => 'user_is_logged_in',
    'access arguments' => array(1),
    'page callback' => '_labdoo_lib_user_metrics',
    'page arguments' => array(1),
    'title' => t('Global contributions'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/myRoles'] = array(
    'access callback' => '_is_my_user_page',
    'access arguments' => array(1),
    'page callback' => '_labdoo_lib_user_roles',
    'page arguments' => array(1),
    'title' => t('My roles'),
    'weight' => 5,
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/myevents'] = array(
    'access callback' => '_is_my_user_page',
    'access arguments' => array(1),
    'page callback' => '_labdoo_lib_user_myevents',
    'page arguments' => array(1),
    'title' => t('My events'),
    'weight' => 3,
    'type' => MENU_LOCAL_TASK,
  );

  $items['user/%user/gettingStarted'] = array(
    'access callback' => '_is_my_user_page',
    'access arguments' => array(1),
    'page callback' => '_labdoo_lib_getting_started',
    'page arguments' => array(1),
    'title' => t('Getting started'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );

  $items['clone-dootronics'] = array(
    'title' => 'Clone a dootronic multiple times in one shot',
    'description' => 'The dootronics clone form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dootronic_clone_form'),
    'access callback' => '_user_has_superhub_rights',
    'type' => MENU_CALLBACK,
  );

  $items['update-dootronics'] = array(
    'title' => 'Update a list of dootronics in one shot',
    'description' => 'The dootronics file upload form.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dootronic_file_upload_form'),
    'access callback' => '_user_has_superhub_rights',
    'type' => MENU_CALLBACK,
  );

  return $items;
}


function _labdoo_lib_user_num_doojects($userId) {
  $numberOfQueries = 1;
  $queryAll = "(SELECT entity_id FROM field_data_field_tagger)";
  $query = "SELECT t.entity_id FROM (" . $queryAll;
  $placeHolders = array();

  $queryUser = "(SELECT tUser.entity_id FROM 
                 (SELECT entity_id FROM field_data_field_tagger WHERE (field_tagger_target_id=:uid) 
                  UNION
                  SELECT entity_id FROM field_data_field_manager WHERE (field_manager_target_id=:uid)
                  UNION
                  SELECT entity_id FROM field_data_field_additional_editors WHERE (field_additional_editors_target_id=:uid) 
                  UNION
                  SELECT entity_id FROM field_data_field_additional_followers WHERE (field_additional_followers_target_id=:uid)
                 )
                AS tUser)";
  $query = $query . " UNION ALL " . $queryUser;
  $placeHolders[':uid'] = $userId;
  $numberOfQueries++;

  $query = $query . ") AS t GROUP BY entity_id HAVING count(*) >= " . $numberOfQueries;
  $result = db_query($query, $placeHolders);
  $num = $result->rowCount();

  return($num);
}


function _labdoo_lib_user_num_dootrips($userId) {
  $numberOfQueries = 1;
  $queryAll = "(SELECT entity_id FROM field_data_field_destination_of_the_trip)";
  $query = "SELECT t.entity_id FROM (" . $queryAll;
  $placeHolders = array();

  $queryUser = "(SELECT tUser.entity_id FROM
                (SELECT entity_id FROM field_data_field_dootripper_s_ WHERE (field_dootripper_s__target_id=:uid)
                 UNION
                (SELECT DISTINCT entity_id FROM field_data_field_dootrip_additional_editors WHERE field_dootrip_additional_editors_target_id=:uid))
                AS tUser)";

  $query = $query . " UNION ALL " . $queryUser;
  $placeHolders[':uid'] = $userId;
  $numberOfQueries++;

  $query = $query . ") AS t GROUP BY entity_id HAVING count(*) >= " . $numberOfQueries;
  $result = db_query($query, $placeHolders);
//  foreach($result as $item) 
//    labdoo_lib_print_array($item->entity_id);
  $num = $result->rowCount();

  return($num);
}


function _labdoo_lib_user_num_edoovillages($userId) {
  $numberOfQueries = 1;
  $queryAll = "(SELECT entity_id FROM field_data_field_edoovillage_status)";
  $query = "SELECT t.entity_id FROM (" . $queryAll;
  $placeHolders = array();

  $queryUser = "(SELECT tUser.entity_id FROM 
                 ((SELECT DISTINCT field_edoovillage_destination_target_id AS entity_id FROM field_data_field_edoovillage_destination WHERE 
                   (entity_id IN (SELECT entity_id FROM field_data_field_manager WHERE field_manager_target_id=:uid) OR 
                    entity_id IN (SELECT entity_id FROM field_data_field_tagger WHERE field_tagger_target_id=:uid) OR 
                    entity_id IN (SELECT entity_id FROM field_data_field_additional_followers WHERE field_additional_followers_target_id=:uid) OR 
                    entity_id IN (SELECT entity_id FROM field_data_field_additional_editors WHERE field_additional_editors_target_id=:uid)))
                  UNION
                  (SELECT DISTINCT field_edoovillage_destination_target_id AS entity_id FROM field_data_field_edoovillage_destination WHERE 
                    entity_id IN (SELECT field_laptops_target_id FROM field_data_field_laptops WHERE 
                    entity_id IN (SELECT entity_id FROM field_data_field_dootripper_s_ WHERE field_dootripper_s__target_id=:uid)))
                  UNION
                  (SELECT DISTINCT entity_id FROM field_data_field_project_manager_s_ WHERE field_project_manager_s__target_id=:uid)
                  UNION
                  (SELECT DISTINCT entity_id FROM field_data_field_edoo_additional_editors WHERE field_edoo_additional_editors_target_id=:uid))
                  AS tUser)";

  $query = $query . " UNION ALL " . $queryUser;
  $placeHolders[':uid'] = $userId;
  $numberOfQueries++;

  $query = $query . ") AS t GROUP BY entity_id HAVING count(*) >= " . $numberOfQueries;
  $result = db_query($query, $placeHolders);
  $num = $result->rowCount();

  return($num);
}


function _labdoo_lib_user_num_hubs($userId) {
  $numberOfQueries = 1;
  $queryAll = "(SELECT DISTINCT entity_id FROM field_data_field_hub_manager_s_)";
  $query = "SELECT t.entity_id FROM (" . $queryAll;
  $placeHolders = array();

  $queryUser = "(SELECT tUser.entity_id FROM 
                 ((SELECT DISTINCT field_hub_laptop_target_id AS entity_id FROM field_data_field_hub_laptop WHERE 
                   (entity_id IN (SELECT entity_id FROM field_data_field_manager WHERE field_manager_target_id=:uid) OR 
                    entity_id IN (SELECT entity_id FROM field_data_field_tagger WHERE field_tagger_target_id=:uid) OR 
                    entity_id IN (SELECT entity_id FROM field_data_field_additional_followers WHERE field_additional_followers_target_id=:uid) OR 
                    entity_id IN (SELECT entity_id FROM field_data_field_additional_editors WHERE field_additional_editors_target_id=:uid)))
                  UNION
                  (SELECT DISTINCT field_hub_laptop_target_id AS entity_id FROM field_data_field_hub_laptop WHERE 
                    entity_id IN (SELECT field_laptops_target_id FROM field_data_field_laptops WHERE 
                    entity_id IN (SELECT entity_id FROM field_data_field_dootripper_s_ WHERE field_dootripper_s__target_id=:uid)))
                  UNION
                  (SELECT DISTINCT entity_id FROM field_data_field_hub_manager_s_ WHERE field_hub_manager_s__target_id=:uid)
                  UNION
                  (SELECT DISTINCT entity_id FROM field_data_field_hub_additional_editors WHERE field_hub_additional_editors_target_id=:uid))
                  AS tUser)";

  $query = $query . " UNION ALL " . $queryUser;
  $placeHolders[':uid'] = $userId;
  $numberOfQueries++;

  $query = $query . ") AS t GROUP BY entity_id HAVING count(*) >= " . $numberOfQueries;
  $result = db_query($query, $placeHolders);
  $num = $result->rowCount();

  return($num);
}


function _labdoo_lib_user_num_wikis($userId) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node');
  $query->propertyCondition('type', 'book');
  $query->propertyCondition('uid', $userId);
  $result = $query->count()->execute();

  return($result);
}


function _labdoo_lib_user_metrics($account = NULL) {
  global $user;
  $userId = $account->uid;

  if(!user_is_logged_in()) {
    return "";
  }

  $labelDoojects = t('Dootronics*: ');
  $labelDootrips = t('Dootrips*: ');
  $labelEdoovillages = t('Edoovillages: ');
  $labelHubs = t('Hubs: ');
  $labelWiki = t('Wiki articles: ');

  $labelCarbon = t('Carbon emissions (kg): ');
  $labelTrees = t('Trees: ');
  $labelWater = t('Water (Liter): ');
  $labelGasLiters = t('Liters of gas: ');
  $labelPlasticBottles = t('Plastic bottles: ');
  $labelAluminumCans = t('Aluminum cans: ');
  $labelGold = t('Gold (gr): ');
  $labelSilver = t('Silver (gr): ');
  $labelPalladium = t('Palladium (gr): ');
  $labelCopper = t('Copper (kg): ');
  $labelCobalt = t('Cobalt (kg): ');
  $labelChemical = t('Chemical substances (kg): ');

  $textLegend = t('(*) dootronics and dootrips that you have participated with.<br>
                   (**) measured based on number of dootronics that you have participated with.');

  // Compute metrics 
  $numDoojects = _labdoo_lib_user_num_doojects($userId); 
  $numDootrips = _labdoo_lib_user_num_dootrips($userId); 
  $numEdoovillages = _labdoo_lib_user_num_edoovillages($userId); 
  $numHubs = _labdoo_lib_user_num_hubs($userId); 
  $numWikis = _labdoo_lib_user_num_wikis($userId); 

  // Compute carbon footprint (constants are taken from the Labdoo carbon footprint calculator)
  $footprintCarbon = $numDoojects * 18.59;
  $footprintTrees = $footprintCarbon / 18.59  * 2;
  $footprintGas = $footprintCarbon / 18.59  * 26.5;
  $footprintPlastic = $footprintCarbon / 18.59  * 59;
  $footprintWater = $footprintCarbon / 18.59  * 1500;
  $footprintAluminum = $footprintCarbon / 18.59  * 270;
  $footprintGold = $footprintCarbon / 18.59  * 0.22;
  $footprintSilver = $footprintCarbon / 18.59  * 0.44;
  $footprintPalladium = $footprintCarbon / 18.59  * 0.08;
  $footprintCopper = $footprintCarbon / 18.59  * 0.3;
  $footprintCobalt = $footprintCarbon / 18.59  * 0.065;
  $footprintChemical = $footprintCarbon / 18.59  * 22;

  $code = "
<strong><font color='red'>My contributions</font></strong>
<hr/>
<table> 
<tr>
<td width='180'>
$labelDoojects
</td>
<td width='100'>
$numDoojects
</td>
<td>
<a href=\"../../content/dootronics-dashboard?u=$userId\" target=\"_blank\">" . t("[See all contributed dootronics]") . "</a>
</td>
</tr>
<tr>
<td>
$labelDootrips
</td>
<td>
$numDootrips
</td>
<td>
<a href=\"../../content/dootrips-dashboard?u=$userId\" target=\"_blank\">" . t("[See all contributed dootrips]") . "</a>
</td>
</tr>
<tr>
<td>
$labelEdoovillages
</td>
<td>
$numEdoovillages
</td>
<td>
<a href=\"../../content/edoovillages-dashboard?u=$userId\" target=\"_blank\">" . t("[See all contributed edoovillages]") . "</a>
</td>
</tr>
<tr>
<td>
$labelHubs
</td>
<td>
$numHubs
</td>
<td>
<a href=\"../../content/hubs-dashboard?u=$userId\" target=\"_blank\">" . t("[See all contributed hubs]") . "</a>
</td>
</tr>
<tr>
<td>
$labelWiki
</td>
<td>
$numWikis
</td>
<td>
<a href=\"../../my-wikis?uid=$account->name\" target=\"_blank\">" . t("[See all contributed wikis]") . "</a>
</td>
</tr>
</table>
<hr/>
<br>
<strong><font color='red'>My carbon footprint savings**</font></strong>
<hr/>
<table> 
<tr>
<td width='180'>
$labelCarbon
</td>
<td>
$footprintCarbon
</td>
</tr>
<tr>
<td width='180'>
$labelTrees
</td>
<td>
$footprintTrees
</td>
</tr>
<tr>
<td width='180'>
$labelWater
</td>
<td>
$footprintWater
</td>
</tr>
<tr>
<td width='180'>
$labelGasLiters
</td>
<td>
$footprintGas
</td>
</tr>
<tr>
<td width='180'>
$labelPlasticBottles
</td>
<td>
$footprintPlastic
</td>
</tr>
<tr>
<td width='180'>
$labelAluminumCans
</td>
<td>
$footprintAluminum
</td>
</tr>
<tr>
<td width='180'>
$labelGold
</td>
<td>
$footprintGold
</td>
</tr>
<tr>
<td width='180'>
$labelSilver
</td>
<td>
$footprintSilver
</td>
</tr>
<tr>
<td width='180'>
$labelPalladium
</td>
<td>
$footprintPalladium
</td>
</tr>
<tr>
<td width='180'>
$labelCopper
</td>
<td>
$footprintCopper
</td>
</tr>
<tr>
<td width='180'>
$labelCobalt
</td>
<td>
$footprintCobalt
</td>
</tr>
<tr>
<td width='180'>
$labelChemical
</td>
<td>
$footprintChemical
</td>
</tr>
</table>
<hr/>
<br>
$textLegend
";

  return $code; 
}


/*
 * Construct the code to render under the "My roles" page
 *
 * @param array $account The account corresponding to the "My roles" page
 *
 * @return The code to render
 *
 */
function _labdoo_lib_user_roles($account = NULL) {
  global $user;

  if(!user_is_logged_in()) {
    return "";
  }

  $userRoles = array_values($user->roles);
  $rolesMapping = array(
    'labdooer' => t('Provides the base functionality to carry out Labdoo mini-missions.'),
    'newsletter manager' => t('Manage, create and publish newsletters to help bring awareness about your Labdoo activities.'),
    'hub manager' => t('Manage a hub, organize hub inventory, upload pictures to your hub album.'),
    'edoovillage manager' => t('Create and manage edoovillages, upload pictures to your edoovillages albums.'),
    'superhub manager' => t('Create hubs and help manage Labdoo operations at a larger regional scale.'),
    'team manager' => t('Create new teams, manage memberships and all team related activities.'),
    'wiki writer' => t('Create and edit new wiki articles and books.'),
    'administrator' => t('All access rights.'),
  );

  $allRoles = array_keys($rolesMapping);
  $potentialRoles = array_diff($allRoles, $userRoles);
  $potentialRoles = array_diff($potentialRoles, array('administrator', 'labdooer'));

  $code = "
<strong>My current roles</strong>
<hr/>
<table>";

  foreach($userRoles as $role) {
    if($role == 'authenticated user')
      $role = 'labdooer';
    if(!array_key_exists($role, $rolesMapping))
      continue;
    $code = $code . "
<tr>
<td width='180'>
" . ucfirst(t($role)) . "
</td>
<td>
" . $rolesMapping[$role] . "
</td>
</tr>";
  }

  if(empty($potentialRoles))
    $starReference = "";
  else
    $starReference = "*";

  $code = $code . "
</table><hr/><br>";

  $code = $code . "
<strong>Available extra roles$starReference</strong>
<hr/>
<table>";

  if(empty($potentialRoles))
    $code = $code . t("You are assigned all possible roles.");

  foreach($potentialRoles as $role) {
    if($role == 'labdooer')
      continue; // the base role is always assigned to a user
    $code = $code . "
<tr>
<td width='180'>
" . ucfirst(t($role)) . "
</td>
<td>
" . $rolesMapping[$role] . "
</td>
</tr>";
  }

  $code = $code . "
</table><hr/>";

  if(!empty($potentialRoles))
    $code = $code . t('(*) If you want to assign extra roles to your user account, please email contact@labdoo.org.');
    $code = $code . "<br/>";
    $code = $code . t('Read more about <a href="../../../content/labdoo-user-accounts">user roles from this wiki page.</a>');

  return $code;
}


/*
 * Construct the code to render under the "Getting started" page
 *
 * @param array $account The account corresponding to the "Getting started" page
 *
 * @return The code to render
 *
 */
function _labdoo_lib_getting_started($account = NULL) {
  global $language;
  global $user;
  $langTable = array (
    'Catalan' => 'ca',
    'English' => 'en',
    'Spanish' => 'es',
  );

  if(!user_is_logged_in()) {
    return "";
  }

  $nodePath = explode('/', drupal_get_normal_path("content/getting-started"));
  $nid = $nodePath[1];

  $query = "SELECT entity_id FROM field_data_field_reference_book WHERE field_reference_book_target_id=:nid";
  $placeHolders[':nid'] = $nid;
  $result = db_query($query, $placeHolders);
  foreach($result as $item) {
    $query = "SELECT field_book_language_value FROM field_data_field_book_language WHERE entity_id=:nid"; 
    $placeHolders[':nid'] = $item->entity_id;
    $pageLanguage = db_query($query, $placeHolders)->fetchField();
    if(array_key_exists($pageLanguage, $langTable) && $langTable[$pageLanguage] == $language->language) {
      $nid = $item->entity_id;
      break;
    }
  }

  $loadedNode = node_load($nid);
  $body = field_get_items('node', $loadedNode, 'body');
  $code = $body[0]['value'];

  return $code;
}


function _labdoo_lib_user_myevents($account = NULL) {
  global $language;
  
  $code = "<p align='right'>You can find all the Labdoo events from 
           <a href=\"../../teams-dashboard?type=event&field_task_status_value=All&field_task_type_value=All&uid=&combine=&uid_1=\">
           this link</a>.</p> <hr/>";

  $code = $code . "
    <strong><font color='red'>My events</font></strong>
    <hr/>
    <table> 
    <tr>
    <th width='400' align='left'>
    Event
    </th>
    <th width='200' align='left'>
    Date
    </th>
    <th width='140' align='left'>
    Update
    </th>
    </tr>
  ";

  $query = "SELECT registration_id, entity_id FROM registration WHERE user_uid=$account->uid";
  $registrations = db_query($query);
  foreach($registrations as $registration) {
    $regId = $registration->registration_id;
    $eventId = $registration->entity_id;

    $query = "SELECT field_event_date_value from field_data_field_event_date where entity_id=$eventId";
    $date = db_query($query)->fetchField();
    $query = "SELECT title FROM node WHERE nid=$eventId";
    $title = db_query($query)->fetchField();
    $titlePath = drupal_get_path_alias("node/" .  $eventId, $language->language);
    $redirectStr = "?destination=" . current_path();

    $code = $code . "
      <tr>
      <td>
      <a href=\"../../$titlePath\">$title</a>
      </td>
      <td>
      $date
      </td>
      <td>
      <a href=\"../../registration/$regId/edit$redirectStr\">Modify</a> | <a href=\"../../registration/$regId/delete$redirectStr\">Unregister</a> 
      </td>
      </tr>
    ";
  }

  $code = $code . "</table>";

  if($registrations->rowCount() == 0)
    $code = $code . t("You have not registered to any Labdoo events yet");

  return $code;
}




/**
 * Implements hook_user_login
 *
 */
function labdoo_lib_user_login(&$edit, $account)
{

  // Don't redirect if this is a password recovery login action
  if(isset($_POST['form_id']) && $_POST['form_id'] == 'user_pass_reset') 
    return;

  // retrieve user language
  $user_language = $account->language;

  // don't do anything if no language is defined
  if (!$user_language) {
    return;
  }

  // verify if language exists
  $languages = language_list();
  if (!isset($languages[$user_language])) {
    return;
  }

  // verify if language is enabled
  if (!$languages[$user_language]->enabled) {
    return;
  }

  // redirect to preferred language user account page 
  drupal_goto('user/' . $account->uid  . '/gettingStarted', array(
    'language' => $languages[$user_language],
  ));
}


/**
 * Returns TRUE if current node is of a certain type; FALSE otherwise
 *
 * @param array $typesList An array of content types
 * @param boolean $onlyView Return FALSE if node is not in view mode
 *
 * @return TRUE if the node is of a type in $typesList or FALSE if otherwise
 *
 */
function labdoo_lib_node_is_type($typesList, $onlyView = True) {
  // TODO: this function provides an abstraction method to generally
  // check if a node is of a certain type. It was implemented after
  // noticing that this type of check is needed in numerous places
  // accross the code, and so there are still a good number of places
  // where instead of calling this function, the following code can
  // be found in line. Need to go through the code and substitute 
  // the code in such places with a call to this method.
  if($onlyView && arg(2) != "") //  Display only in node view mode
    return FALSE;

  if((arg(0) != 'node'))
    return FALSE;

  if(!is_numeric(arg(1)))
    return FALSE;

  $node = node_load(arg(1));
  if(!$node)
    return FALSE;
  if(!in_array($node->type, $typesList))
    return FALSE;

  return TRUE;
}


/**
 * Implements hook_menu_local_tasks_alter
 *
 */
function labdoo_lib_menu_local_tasks_alter(&$data) {
  if(labdoo_lib_node_is_type(array('drupal_wall'), FALSE)) {
    if(sizeof($data['tabs']) > 0) {
      foreach($data['tabs'][0]['output'] as $key => $value) {
        if($value['#link']['path'] == "node/%/clone/%" || $value['#link']['path'] == "node/%/view") {
          unset($data['tabs'][0]['output'][$key]);
        }
      }
    }
  }
  if(labdoo_lib_node_is_type(array('node_gallery_gallery'), FALSE)) {
    if(sizeof($data['tabs']) > 0) {
      foreach($data['tabs'][0]['output'] as $key => $value) {
        if($value['#link']['path'] == "node/%/upload" && arg(2) == "upload") {
          labdoo_lib_msg_info(t("Note: please make sure the names of the images you upload have no special characters such as spaces, accents, etc."));
        }
      }
    }
  }
}


/**
 * Implements hook_views_pre_render
 *
 */
function labdoo_lib_views_pre_render(&$view) {
  if($view->name == 'wiki') {
    $view->attachment_before = t('Don\'t see a book available in a language you need? <a href="content/wiki-translations">learn how you can contribute a book translation.</a>');
  }
}


/**
 * Implementation of hook_node_validate 
 */
function labdoo_lib_node_validate($node, $form, &$form_state) {

  if ($node->type == 'laptop' || $node->type == 'edoovillage' || $node->type == 'hub') {
    $location = $node->locations[0]; 
    if($location && (array_key_exists('locpick', $location))) {
      if(($location['locpick']['user_latitude'] != "" && !is_numeric($location['locpick']['user_latitude'])) || 
         ($location['locpick']['user_longitude'] != "" && !is_numeric($location['locpick']['user_longitude'])))
        form_set_error('locations', t("Please type a correct latitude and coordinate value (example: 22.66, 5.75)")); 
    }
  }

  if ($node->type == 'dootrip') {
    $departureDate = labdoo_lib_get_field($node, 'field_departure_date', 'node', 'value');
    $arrivalDate = labdoo_lib_get_field($node, 'field_arrival_date', 'node', 'value');
    if($arrivalDate < $departureDate)
      form_set_error('field_arrival_date', t("The arrival date must not be before the departure date"));
  }

  return;
} 


/**
 * Generates HTML/Javascript code to render a button to download
 * a CSV file from a PHP (string) table array.
 *
 * @param array $table  
 *   A PHP string array with the data to download as a CSV file
 *
 * @param string @$signature
 *   A string to uniquely identify this button to avoid name collisions
 *
 * @return string $code
 *   The code to render
 *
 */ 
function labdoo_table_download_button($table, $signature="", $downloadIcon="download-button-data.png", $iconWidth=150) {

  // If the table does not have at least two rows (header 
  // plus one item), return empty code.
  if(!array_key_exists(1, $table))
    return "";

  // Convert a PHP table of strings into an HTML table
  $tableCode = "<table>";
  for ($i = 0; $i < count($table); $i++) { 
    $tableCode = $tableCode . "<tr>";
    for ($j = 0; $j < count($table[$i]); $j++)
      $tableCode = $tableCode . "<th>" . $table[$i][$j] . "</th>";
    $tableCode = $tableCode . "</tr>";
  }
  $tableCode = $tableCode . "</table>";

  // Use javascript to generate a download button for the table
  $code = '
          <div id="dvData'.$signature.'" style="display:none"> ' . $tableCode . ' </div>
          <div class=\'button\'>
              <a href="#" id ="export'.$signature.'" role=\'button\'><img src="/sites/default/files/content/general-objects/'.$downloadIcon.'" width="'.$iconWidth.'"></a>
           </div>

        <script type=\'text/javascript\' src=\'https://code.jquery.com/jquery-1.11.0.min.js\'></script>
        <script type=\'text/javascript\'>

        $(document).ready(function () {

            function exportTableToCSV($table, filename) {

                var $headers = $table.find(\'tr:has(th)\'),
                    $rows = $table.find(\'tr:has(td)\'),
                    // Temporary delimiter characters unlikely to be typed by keyboard
                    // This is to avoid accidentally splitting the actual contents
                    tmpColDelim = String.fromCharCode(11), // vertical tab character
                    tmpRowDelim = String.fromCharCode(0), // null character
                    // actual delimiter characters for CSV format
                    colDelim = \'","\',
                    rowDelim = \'"\r\n"\';
                    // Grab text from table into CSV formatted string
                    var csv = \'"\';
                    csv += formatRows($headers.map(grabRow));
                    csv += rowDelim;
                    csv += formatRows($rows.map(grabRow)) + \'"\';
                    // Data URI
                    var csvData = \'data:application/csv;charset=utf-8,\' + encodeURIComponent(csv);
                $(this)
                    .attr({
                    \'download\': filename
                        ,\'href\': csvData
                        //,\'target\' : \'_blank\' //if you want it to open in a new window
                });

                // Format the output so it has the appropriate delimiters
                function formatRows(rows){
                    return rows.get().join(tmpRowDelim)
                        .split(tmpRowDelim).join(rowDelim)
                        .split(tmpColDelim).join(colDelim);
                }

                // Grab and format a row from the table
                function grabRow(i,row){
                    var $row = $(row);
                    //for some reason $cols = $row.find(\'td\') || $row.find(\'th\') won\'t work...
                    var $cols = $row.find(\'td\'); 
                    if(!$cols.length) $cols = $row.find(\'th\');  
                    return $cols.map(grabCol)
                                .get().join(tmpColDelim);
                }

                // Grab and format a column from the table 
                function grabCol(j,col){
                    var $col = $(col),
                        $text = $col.text();
                    return $text.replace(\'"\', \'""\'); // escape double quotes
                }
            }

            $("#export'.$signature.'").click(function (event) {
                // CSV
                var d = new Date();
                var prefix = d.getFullYear() + ":" +
                             ("00" + (d.getMonth() + 1)).slice(-2) + "/" + 
                             ("00" + d.getDate()).slice(-2) + "/" + 
                             ("00" + d.getHours()).slice(-2) + ":" + 
                             ("00" + d.getMinutes()).slice(-2) + ":" + 
                             ("00" + d.getSeconds()).slice(-2);
                exportTableToCSV.apply(this, [$(\'#dvData'.$signature.'>table\'), "data-" + prefix + ".csv"]);
                
                // IF CSV, don\'t do event.preventDefault() or return false
                // We actually need this to be a typical hyperlink
            });
        });
    </script>
  ';

  return $code;
}


/**
 * Generates a download button from the query results of a view.
 *
 * @param array
 *   viewResult The results of a views query using views_get_view_result()
 *
 * @param string @$signature
 *   A string to uniquely identify this button to avoid name collisions
 * 
 * @return
 *   Code that renders the download button
 *
 */
function labdoo_views_download_button($viewResult, $signature="") {

  // If the views query is empty, return empty code
  if(empty($viewResult))
    return "";

  // Compose the header of the table first                                                
  $j = 0;
  $viewTable[0][$j++] = "ID";
  foreach($viewResult[0] as $fieldName => $value) { 
    // All CCK fields start with an extra "field_" prefix (e.g., field_field_status).
    // Remove it.
    if(substr($fieldName, 0, 6) == "field_")
      $fieldName = substr($fieldName, 6);
    $fieldInfo = field_info_instance('node', $fieldName, 'laptop');
    // If nothing was returned, skip this field as it's not interesting.
    if(!$fieldInfo)
      continue;

    $fieldNames[] = "field_" . $fieldName;
    $viewTable[0][$j++] = $fieldInfo['label'];
  }

  if(isset($fieldNames)) {
    // Compose next the table rows
    foreach($viewResult as $key => $object) {
      $j = 0;
      # Add "# " to avoid being casted to an integer value
      $viewTable[$key+1][$j++] = "# ".$object->node_title; 
      foreach($fieldNames as $fieldName) { 
        $fieldValue = $object->$fieldName;
        // If empty, it means that field is not initialized. Just 
        // assign an empty string.
        if(!$fieldValue)
          $markup = "";
        else
          $markup = $fieldValue[0]['rendered']['#markup'];
        $viewTable[$key+1][$j++] = $markup;
      }
    }
  }

  return labdoo_table_download_button($viewTable, $signature);
}


/**
 * Prints a message of type information 
 *
 * @param string
 *   msg The message to print
 *
 */ 
function labdoo_lib_msg_info($msg) {

  $fullMsg  = "";
  $fullMsg .= "<img src='/profiles/labdoo/files/pictures/equation-2-alpha-small.png' width='60'> ";
  $fullMsg .= t($msg);
  drupal_set_message($fullMsg, 'status', FALSE);

  return;
}



/**
 * Renders the object menu block 
 *
 * @return Code rendering object menu block
 *
 */
function labdoo_render_object_menu() {
  global $user;
  global $language;
  $langCode = $language->language;
  $path = drupal_get_path_alias(current_path());
  $userRoles = array_values($user->roles);
  $type = arg(0);

  if ($language->language != 'en')
    $lang = '/' . $language->language;
  else
    $lang = '';

  if ($type == "edoovillage") {
    $field_photo_album = 'field_edoovillage_photo_album';
    $nodeId = $_GET['e'];
    if(!is_numeric($nodeId))
      return "";
    $nodeObj = node_load($nodeId);
    if(!$nodeObj)
      return "";
    $code = "";
    $objectString = "edoovillage";
  }
  else if ($type == "hub") {
    $field_photo_album = 'field_hub_photo_album';
    $nodeId = $_GET['h'];
    if(!is_numeric($nodeId))
      return "";
    $nodeObj = node_load($nodeId);
    if(!$nodeObj)
      return "";
    $code = "";
    $objectString = "hub";
  }

  //
  // Actions 
  //

  // Title
  $code .= "<hr/>";
  $code .= "<p><strong><font color=#009900 size=2px>" . t("Actions available for this $objectString:") . "</font></strong></p>";
  $code .= "<hr/>";

  // Photo album
  $wNode = entity_metadata_wrapper('node', $nodeObj);
  $nodeAlbum = $wNode->$field_photo_album->value();
  $albumUri = drupal_get_path_alias("node/" . $nodeAlbum->nid, $langCode);
  $code .= "<p><a href='$albumUri'><img src='/profiles/labdoo/files/pictures/photo-album-icon.png' width='25px'/>&nbsp;" . 
            t("Go to photo album") . "</a></p> ";

  // Story
  $query = "SELECT entity_id FROM field_data_field_story_edoovillage WHERE field_story_edoovillage_target_id=$nodeId";
  $parentNodeId = db_query($query)->fetchField();
  if(!$parentNodeId) {
    if(in_array('superhub manager', $userRoles) || 
       in_array('edoovillage manager', $userRoles) || 
       in_array('hub manager', $userRoles) || 
       in_array('wiki manager', $userRoles) || 
       in_array('administrator', $userRoles) ||
       labdoo_lib_edoo_hub_edit_access($nodeObj, $user)) { 
      $code .= "<p><a href='node/add/labdoo-story?field_story_edoovillage=$nodeId'>
                <img src='/profiles/labdoo/files/pictures/pencil-icon.png' width='25px'/>&nbsp;" . 
                t("Write a story about this $objectString") . "</a></p>";
    }
    else {
      $code .= "<p><font color='gray'><img src='/profiles/labdoo/files/pictures/pencil-icon.png' width='25px'/>&nbsp;" . 
                t("Write a story about this $objectString") . "</font></p>";
    }
  }
  else {
    $code .= "<p><a href='" . drupal_get_path_alias("node/" . $parentNodeId, $langCode) . "'>
              <img src='/profiles/labdoo/files/pictures/pencil-icon.png' width='25px'/>&nbsp;" . 
              t("Read the story about this $objectString") . "</a></p> ";
  }

  // Edit 
  if(node_access("update", $nodeObj, $user) === TRUE) 
    $code .= "<p><a href='node/$nodeId/edit'><img src='/profiles/labdoo/files/pictures/house.png' width='25px'/>&nbsp;" . 
              t("Edit this $objectString") . "</a></p> ";

  // Revisions
  if(count(node_revision_list($nodeObj)) > 1)
    $code .= "<p><a href='node/$nodeId/revisions'><img src='/profiles/labdoo/files/pictures/revisions-icon.png' width='25px'/>&nbsp;" . 
              t("Review changes") . "</a></p> ";

  // Clone
  if(in_array('superhub manager', $userRoles) || in_array('administrator', $userRoles)) 
    $code .= "<p><a href='node/$nodeId/clone/confirm'><img src='/profiles/labdoo/files/pictures/clone-icon.png' width='25px'/>&nbsp;" . 
            t("Clone this $objectString") . "</a></p> ";
  else
    $code .= "<p><font color='gray'><img src='/profiles/labdoo/files/pictures/clone-icon.png' width='25px'/>&nbsp;" . 
              t("Clone this $objectString") . "</font></p> ";

  // Next and before
  $prevNodeId = labdoo_lib_prev_next_node($nodeObj, 'prev');
  $nextNodeId = labdoo_lib_prev_next_node($nodeObj, 'next');

  $prevUri = drupal_get_path_alias("node/" . $prevNodeId, $langCode);
  $nextUri = drupal_get_path_alias("node/" . $nextNodeId, $langCode);

  $code .= "<p><a href='$nextUri'><img src='/profiles/labdoo/files/pictures/arrow_right.png' width='18px'/>&nbsp;" . 
            t("Next $objectString") . "</a></p> ";
  $code .= "<p><a href='$prevUri'><img src='/profiles/labdoo/files/pictures/arrow_left.png' width='18px'/>&nbsp;" . 
            t("Previous $objectString") . "</a></p> ";

  if($type == "edoovillage") {
    // Semaphore
    $code .= "<hr/>";
    $code .= "<p><strong><font color=#009900 size=2px>" . t("This edoovillage's semaphore ") . "</font></strong>";
    $code .= "<a target='_blank' href='content/managing-your-edoovillage-semaphore'>[" . t("Help") . "]</a></p>";
    $code .= "<hr/>";

    if(!file_exists(dirname(__FILE__) . "/../../../files/pictures/semaphore-red-" . $langCode . ".png"))
      $langCode = 'en';
    $semaphorePic = 'semaphore-red-' . $langCode . '.png';
    $semaphoreState = labdoo_lib_get_field($nodeObj, 'field_semaphore', 'node', 'value');
    if($semaphoreState == 'yellow')
      $semaphorePic = 'semaphore-yellow-' . $langCode . '.png';
    else if($semaphoreState == 'green')
      $semaphorePic = 'semaphore-green-' . $langCode . '.png';
    $code .= "<img src='/profiles/labdoo/files/pictures/$semaphorePic' width='100px'/>";

    // Status
    $edooStatus = labdoo_lib_get_field($nodeObj, 'field_edoovillage_status', 'node', 'value');
    $code .= "<hr/>";
    $code .= "<p><strong><font color=#009900 size=2px>" . t("Project status: ") . "</font><font color='red'>$edooStatus</font></strong>";
    $code .= "<hr/>";
  }
  if($type == 'hub') {
    // Semaphore
    $code .= "<hr/>";
    $code .= "<p><strong><font color=#009900 size=2px>" . t("This hub's semaphore ") . "</font></strong>";
    $code .= "<a target='_blank' href='content/managing-your-hub-semaphore'>[" . t("Help") . "]</a></p>";
    $code .= "<hr/>";

    if(!file_exists(dirname(__FILE__) . "/../../../files/pictures/semaphore-hub-red-" . $langCode . ".png"))
      $langCode = 'en';
    $semaphorePic = 'semaphore-hub-green-' . $langCode . '.png';
    $semaphoreState = labdoo_lib_get_field($nodeObj, 'field_hub_status', 'node', 'value');
    if($semaphoreState == 'inactive') {
      $semaphorePic = 'semaphore-hub-yellow-' . $langCode . '.png';
      labdoo_lib_msg_info(t("This hub is temporarily inactive. You can't communicate with this hub until its semaphore goes back to green.")); 
    }
    else if($semaphoreState == 'closed') {
      $semaphorePic = 'semaphore-hub-red-' . $langCode . '.png';
      $parentHub = $wNode->field_parent_hub->value();
      if($parentHub)
        $closed_message = t("This branch is not active");
      else
        $closed_message = t("This hub is not active");
      drupal_set_message("<strong><font color=red size=6px>" . $closed_message  . "</font></strong>", 'warning', FALSE);
      labdoo_lib_msg_info(t("Please do not try to contact this hub.")); 
      labdoo_lib_msg_info(t("If you would like to volunteer and take over this hub's management operations, reach out to the Labdoo team at contact@labdoo.org.")); 
    }
    else {
      labdoo_lib_msg_info(t("Hint: to contact this hub, please make sure you are logged into your Labdoo account and then click
                           on the username next to the field 'Hub manager(s)' to go to the manager's page. From there,
                           click on the tab 'Contact'."));
    }

    $code .= "<img src='/profiles/labdoo/files/pictures/$semaphorePic' width='100px'/>";

    // Hub type 
    $code .= "<hr/>";
    $code .= "<p><strong><font color=#009900 size=2px>" . t("Hub capabilities: ") . "</font></strong>";
    $code .= "<a target='_blank' href='../content/types-hubs'>[" . t("Help") . "]</a></p>";
    $code .= "<hr/>";

    $hubTypes = labdoo_lib_get_field_all($nodeObj, 'field_types_of_mini_missions', 'node', 'value');
    if(in_array('HUBTYPE0', $hubTypes)) {
      $hubTypeIcon = "/sites/default/files/content/labdoo-toolkit/labdoo-marker-orange.png";
      $hubTypeText = t("<strong><font color='red'>Dropping point</font></strong>");
      $code .= "<p><img src=$hubTypeIcon width='25px'/>&nbsp;" . $hubTypeText . "</p>";
    }
    if(in_array('HUBTYPE1', $hubTypes)) {
      $hubTypeIcon = "/sites/default/files/content/labdoo-toolkit/labdoo-marker-blue.png";
      $hubTypeText = t("<strong><font color='#0088cc'>Sanitation point</font></strong>");
      $code .= "<img src=$hubTypeIcon width='25px'/>&nbsp;" . $hubTypeText;
    }
  } 

  return $code;
}


/**
 * Implements the visibility filter of the object menu block 
 *
 * @return TRUE if the block is to be displayed, FALSE otherwise
 *
 */
function labdoo_block_filter_object_menu() {
  $path = drupal_get_path_alias(current_path());

  if(strcmp($path, "hub") == 0 || strcmp($path, "edoovillage") == 0)
    return TRUE;

  return FALSE;
}


/**
 * Get a list of user IDs that have a certain role
 *
 * @param $role The Labdoo role
 * @return The list of user IDs 
 *
 */
function labdoo_lib_get_users_role($role) {
  $query = "SELECT uid FROM users_roles WHERE rid=(SELECT rid FROM role WHERE name='$role')";
  $users = db_query($query)->fetchAll(PDO::FETCH_ASSOC);
  foreach($users as $user) {
    $userList[] = $user['uid'];
  }
  return $userList;
}


/*
 * Implementation of hook_cron
 *
 */
function labdoo_lib_cron() {
  // Clean up
  cache_clear_all('labdoo_co2_savings_dootrip', 'cache', TRUE);
  return;
}


/*
 * Converts a string into an HTML link
 * 
 * @param string $link 
 *   The link 
 * @return string
 *   The HTML code
 *        
 */
function labdoo_lib_convert_html_link($link) {
  return "<a href=$link>" . $link . "</a>";
}


/*
 * Generates an HTML link of a node from its ID
 * 
 * @param integer $nid
 *   The node ID 
 * @param string $text 
 *   The text to display in the HTML link 
 * @return string
 *   The HTML code of the link
 *        
 */

function labdoo_lib_generate_html_link_from_nid($nid, $text) {
  $url = url('node/'. $nid, array('absolute' => TRUE, 'alias' => TRUE)); 
  return "<a href=$url>" . $text . "</a>";
}


/**
 * hook_google_recaptcha_always_protect_alter
 * Alters the list of always protected forms.
 *
 * @param array $always_protected
 *   List of always protected forms.
 */
function labdoo_lib_google_recaptcha_always_protect_alter(&$always_protected) {
  // Add Labdoo contact form to the list of always protected forms
  // Commented out for DT campaign in Germany
  $always_protected[] = 'lbd_contact_form';
  $always_protected[] = 'comment_node_team_page_form';
  $always_protected[] = 'comment_node_team_task_form';
  $always_protected[] = 'team_page_node_form';
  $always_protected[] = 'team_task_node_form';
  $always_protected[] = 'event_node_form';
}


/**
 * hook_codec_info
 *
 * Implements codec for YouTube video without cookies (used for GDPR compliance) 
 *
 */
function labdoo_lib_codec_info() {
  $codecs = array();
  $codecs['youtube_nocookie'] = array(
    'name' => t('YouTubeNoCookie'),
    'instructions' => t('This codec delivers youtube videos without using cookies (e.g., for GDPR compliance).'),
    'sample_url' => 'http://www.youtube-nocookie.com/watch?v=uN1qUeId',
    'callback' => 'video_filter_youtube_nocookie',
    'html5_callback' => 'video_filter_youtube_html5_nocookie',
    'regexp' => array(
      '/youtube-nocookie\.com\/watch\?.*?v=([a-z0-9\-_]+)/i',
      '/youtu-nocookie.be\/([a-z0-9\-_]+)/i',
      '/youtube-nocookie\.com\/v\/([a-z0-9\-_]+)/i',
      '/youtube-nocookie\.com\/embed\/([a-z0-9\-_]+)/i',
    ),
    'ratio' => 16 / 9,
    'control_bar_height' => 0,
  );
  return $codecs;
}


/**
 * Callback for YouTube codec without cookies.
 *
 * @see video_filter_codec_info()
 */
function video_filter_youtube_nocookie($video) {
  $attributes = array(
    'rel' => $video['related'] ? 'rel=1' : 'rel=0',
    'autoplay' => $video['autoplay'] ? 'autoplay=1' : 'autoplay=0',
    'fs' => 'fs=1',
  );

  $video['source'] = '//www.youtube-nocookie.com/v/' . $video['codec']['matches'][1] . '?' . implode('&amp;', $attributes);

  $params['wmode'] = 'opaque';

  return video_filter_flash($video, $params);
}


/**
 * HTML5 callback for YouTube codec without cookies.
 *
 * @see video_filter_codec_info()
 */
function video_filter_youtube_html5_nocookie($video) {
  $attributes = array(
    'rel' => $video['related'] ? 'rel=1' : 'rel=0',
    'autoplay' => $video['autoplay'] ? 'autoplay=1' : 'autoplay=0',
    'wmode' => 'wmode=opaque',
  );
  $video['source'] = '//www.youtube-nocookie.com/embed/' . $video['codec']['matches'][1] . '?' . implode('&amp;', $attributes);

  return video_filter_iframe($video);
}


/**
 * Supporting function to reset some fields in
 * the configuration of the EU cookie compliance module
 *
 */
function labdoo_lib_reset_cookie_compliance() {
  $default_filter_format = filter_default_format();
  if ($default_filter_format == 'filtered_html') {
    $default_filter_format = 'full_html';
  }
  $popup_settings = variable_get('eu_cookie_compliance', array());
  labdoo_lib_print_array($popup_settings);
  $popup_settings['popup_info'] = array(
    'value' => '<h2>We use cookies on this site to enhance your user experience</h2><p>By clicking any link on this page you are giving your consent for us to set cookies.</p>',
    'format' => $default_filter_format,
  );
  $popup_settings['popup_agreed'] = array(
    'value' => '<h2>Thank you for accepting cookies</h2><p>You can now hide this message or find out more about cookies.</p>',
    'format' => $default_filter_format,
  );
  labdoo_lib_print_array($popup_settings);
  // Enable this line to really apply changes
//    variable_set('eu_cookie_compliance', $popup_settings);
}


/**
 *  This function can be used to fix laptop collisions. 
 *
 *  @param integer $nid
 *      The node ID of the oldest collisioned laptop (if it's not the oldest--i.e., smallest value--
 *      it will not fix the collision)
 *  @param string $laptopId 
 *      The colissioned laptop ID
 *
 *  Example:
 *      drush php-eval "fix_laptop_collision(58491, \"000014309\");"
 *
 */
function fix_laptop_collision($nid, $laptopId) {
  $myCreated = db_query("SELECT created from node WHERE nid=:nodeid", array(":nodeid" => $nid))->fetchField();
  $dootronics = db_query("SELECT nid,created from node WHERE type='laptop' AND title=:title", array(":title"=> $laptopId));
  $iAmOldest = true;
  $numberDootronics = 0;

  foreach($dootronics as $dootronic) {
    $numberDootronics = $numberDootronics + 1;
    if ($dootronic->nid == $nid) 
      continue;
    // If we are here, it means there is another node different than us that has the same ID (collision).
    // Find out if we are the oldest node.
    if ($dootronic->created < $myCreated) {
      $iAmOldest = false;
    }
  }
  if ($numberDootronics > 1 && $iAmOldest) {
    print("I am the oldest node\n");  
    // Find out if the previous or next IDs are available
    $laptopIdPrev = strval(intval($laptopId) - 1);
    $laptopIdNext = strval(intval($laptopId) + 1);
    $laptopIdNew = 0;
    if (db_query("SELECT COUNT(*) from node WHERE type='laptop' AND title=:title", array(":title"=> $laptopIdNext))->fetchField() == 0) {
      print ("Found ID\n");
      $laptopIdNew = $laptopIdNext;
    }
    else if(db_query("SELECT COUNT(*) from node WHERE type='laptop' AND title=:title", array(":title"=> $laptopIdPrev))->fetchField() == 0) {
      $laptopIdNew = $laptopIdPrev;
    }
    print("New ID: " . $laptopIdNew);
    if($laptopIdNew != 0) {
      print("\nSetting ID");
      $dootronicNode = node_load($nid);
      $dootronicNode->title = sprintf("%09d", $laptopIdNew); 
      node_save($dootronicNode);
      // Delete all aliases and create a new one
      $path = path_load(array('source' => 'node/'.$nid));
      path_delete($path['pid']);
      $pathAlias = 'laptop/' . $dootronicNode->title;
      $path = array('source' => "node/$nid", 'alias' => $pathAlias);
      path_save($path);
    }
  }
}


function labdoo_lib_dootronics_donated_per_country($type) {
  $query = "SELECT lid FROM location_instance WHERE vid IN (SELECT MIN(vid) FROM node WHERE nid IN 
            (SELECT entity_id FROM field_data_field_device_type WHERE field_device_type_value='$type') GROUP BY nid)";
  $lids = db_query($query);
  $countries = array();
  foreach($lids as $lid) {
    $query = "SELECT country FROM location WHERE lid=" . $lid->lid;
    $country = db_query($query)->fetchField();
    if (!array_key_exists($country, $countries)) 
      $countries[$country] = 1;
    else
      $countries[$country]++; 
  }
  asort($countries);
  labdoo_lib_print_array($countries);
  return;
}


function labdoo_lib_dootronics_received_per_country($type) {
  $query = "SELECT lid FROM location_instance WHERE vid IN (SELECT MAX(vid) FROM node WHERE nid IN 
            (SELECT entity_id FROM field_data_field_status WHERE field_status_value='S4') AND nid IN 
            (SELECT entity_id FROM field_data_field_device_type WHERE field_device_type_value='$type') GROUP BY nid)";
  $lids = db_query($query);
  $countries = array();
  foreach($lids as $lid) {
    $query = "SELECT country FROM location WHERE lid=" . $lid->lid;
    $country = db_query($query)->fetchField();
    if (!array_key_exists($country, $countries)) 
      $countries[$country] = 1;
    else
      $countries[$country]++; 
  }
  asort($countries);
  labdoo_lib_print_array($countries);
  return;
}


function labdoo_lib_dootrips_total_kms() {
  $totalKms = 0;

  $query = "SELECT nid, vid FROM node WHERE type='dootrip'";
  $dootrips = db_query($query);
  foreach($dootrips as $dootrip) {
    $dootripNode = node_load($dootrip->nid);
    $totalKms = $totalKms + _calculate_dootrip_distance($dootripNode);
  }
     
  return($totalKms);
}


function dootronic_clone_form($form, &$form_state) {

 $form['dootronic_id'] = array(
    '#type' => 'textfield',
    '#title' => t('<strong>Use this form to clone multiple times a dootronic.</strong><br/><br/>
                   Enter the ID of the dootronic you want to clone:'),
    '#prefix' => '<img src="/sites/default/files/content/general-objects/upload-image.png" width="600"><br/><br/><br/>',
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE,
  );

 $form['clone_quantity'] = array(
    '#type' => 'textfield',
    '#title' => t('Enter the quantity of clones you want to generate:'),
    '#size' => 10,
    '#maxlength' => 10,
    '#required' => TRUE,
  );

  $form['submit_button'] = array(
    '#type' => 'submit',
    '#value' => t('Clone'),
  );

  return $form;
}

function dootronic_clone_form_validate($form, &$form_state) {
  $max_num_clones = 100;
  $dootronic_id = $form_state['values']['dootronic_id'];
  $clone_quantity = $form_state['values']['clone_quantity'];

  # Check the format of the dootronic ID
  if(!is_numeric($dootronic_id) || intval($dootronic_id) <= 0)
    form_set_error('dootronic_id', t('Dootric ID must be a 9 digit number.'));

  # Check the dootronic ID
  $nid = db_query("SELECT nid from node WHERE type='laptop' AND title=:title", array(":title"=> $dootronic_id))->fetchField();
  if(!$nid)
    form_set_error('dootronic_id', t('Dootric ID does not exist. Please use an ID of an existing dootronic making sure you type the full 9 digits.'));

  # Check the format and limits of the quantity value
  if(!is_numeric($clone_quantity) || intval($clone_quantity) > $max_num_clones || intval($clone_quantity) < 1)
    form_set_error('clone_quantity', t('Please make sure that the quantify of clones is a number between 1 and :maxquant.',
                   array(":maxquant" => $max_num_clones)));


}

function dootronic_clone_form_submit($form, &$form_state) {
  $dootronic_id = $form_state['values']['dootronic_id'];
  $clone_quantity = $form_state['values']['clone_quantity'];

  $nid = db_query("SELECT nid from node WHERE type='laptop' AND title=:title", array(":title"=> $dootronic_id))->fetchField();
  if(!$nid) {
    labdoo_lib_msg_info("Could not clone this dootronic. Error when looking up the dootronic.");
    return;
  }
  $node = node_load($nid);
  if(!$node) {
    labdoo_lib_msg_info("Could not clone this dootronic. Error when loading the dootronic.");
    return;
  }

  for($i = 1; $i <= $clone_quantity; $i++) {
    unset($node->nid);
    unset($node->vid);
    node_save($node);
    $cloned_id = db_query("SELECT title from node WHERE nid=:nodeid", array(":nodeid" => $node->nid))->fetchField();
    labdoo_lib_msg_info(t("Dootronic :did1 was correctly cloned into dootronic :did2.", array(":did1" => $dootronic_id, ":did2" => $cloned_id)));
  }

  return;
}


function dootronic_file_upload_form($form, &$form_state) {
  $form = array();
  $form['file'] = array(
        '#type' => 'file',
        '#title' => t('<strong>Use this form to upload and execute an automatic dootronic update file.</strong><br/><br/>
                      Select an automatic dootronic update file:'),
        '#prefix' => '<img src="/sites/default/files/content/general-objects/upload-image.png" width="600"><br/><br/><br/>',
        '#description' => t('Allowed file extensions: json'),
  );

  $form['edoovillage_only'] = array(
    '#type' => 'checkbox',
    '#title' => t('Only update the \'status\' and \'edoovillage\' fields of each dootronic.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Upload and execute'),
  );

  return $form;
}

function dootronic_file_upload_form_validate($form, &$form_state) {
  $file = file_save_upload('file', array(
#       'file_validate_is_image' => array(),
        'file_validate_extensions' => array('json'),
  ));

  if ($file) {
    if ($file = file_move($file, 'public://')) {
      $form_state['values']['file'] = $file;
    }
    else {
      form_set_error('file', t('Failed to write the uploaded file the site\'s file folder.'));
    }
  }
  else {
    form_set_error('file', t('No file was uploaded.'));
  }
}


function __json_value_is_present($obj, $name) {
  if (!property_exists($obj, $name)) {
    return False;
  }
  $value = $obj->{$name};
  if ($value != "" &&
      strtolower($value) != "n/a"     &&
      strtolower($value) != "null"    &&
      strtolower($value) != "unknown")
    return True;
  return False;
}


function dootronic_file_upload_form_submit($form, &$form_state) {
  $file=$form_state['values']['file'];
  unset($form_state['values']['file']);
  $file->status = FILE_STATUS_PERMANENT;
  $edoovillage_only = $form_state['values']['edoovillage_only'];

  // Save the file for our records
  file_save($file);

  // Process the file
  $updates_json = file_get_contents($file->uri);
  $updates = json_decode($updates_json);
  if($updates == NULL) {
    labdoo_lib_msg_info(t('The form contains invalid records. 
                          Please verify that the form is a correct JSON file with one or more records.'));
    return;
  }
  $dootronic = array_pop($updates);
  while($dootronic) {
    $dootronic_id = sprintf("%09d", $dootronic->labdoo_id);

    // Look up and load the dootronic
    $nid = db_query("SELECT nid from node WHERE type='laptop' AND title=:title", array(":title"=> $dootronic_id))->fetchField();
    if(!$nid) {
      labdoo_lib_msg_info(t("Could not update dootronic :did1. Error when looking up this dootronic.", array(":did1" => $dootronic_id)));
      return;
    }
    $node = node_load($nid);
    if(!$node) {
      labdoo_lib_msg_info(t("Could not update dootronic :did1. Error when loading this dootronic.", array(":did1" => $dootronic_id)));
      return;
    }
    $wNode = entity_metadata_wrapper('node', $node);

    if (!$edoovillage_only) { // Only do all the fields if edoovillage_only is not set 
      // Model
      $model_value = "";
      if (__json_value_is_present($dootronic, 'manufacturer'))
        $model_value .= $dootronic->manufacturer . "; ";
      if (__json_value_is_present($dootronic, 'device_model'))
        $model_value .= $dootronic->device_model . "; ";
      if (__json_value_is_present($dootronic, 'product_name'))
        $model_value .= $dootronic->product_name . "; ";
      $wNode->field_model->set($model_value);

      // Serial number
      if (__json_value_is_present($dootronic, 'serial_no')) {
        $wNode->field_serial_number->set($dootronic->serial_no);
      }

      // Number of cores
      if (__json_value_is_present($dootronic, 'cpu_count')) {
        $possible_core_count = list_allowed_values(field_info_field("field_cpu_type"));
        $max_core_count = intval(end($possible_core_count));
        $core_count = intval($dootronic->cpu_count);
        if ($core_count > $max_core_count)
          $core_count = $max_core_count;
        $wNode->field_cpu_type->set($core_count);
      }

      // CPU speed
      if (__json_value_is_present($dootronic, 'cpu_speed_mhz')) 
        $wNode->field_cpu->set($dootronic->cpu_speed_mhz);

      // Memory size
      if (__json_value_is_present($dootronic, 'memory_size_mb')) 
        $wNode->field_memory->set($dootronic->memory_size_mb);

      // Disk size
      $disk_size = 0;
      if (__json_value_is_present($dootronic, 'disk1_size_gb'))
        $disk_size = $disk_size + intval($dootronic->disk1_size_gb);
      if (__json_value_is_present($dootronic, 'disk2_size_gb'))
        $disk_size = $disk_size + intval($dootronic->disk2_size_gb);
      $wNode->field_hard_drive->set($disk_size);

      // Operating system
      if (__json_value_is_present($dootronic, 'os_version')) 
        $wNode->field_current_operating_system->set($dootronic->os_version);

      // Notes
      $additional_notes_value = "";
      if (__json_value_is_present($dootronic, 'notes'))
        $additional_notes_value .= $dootronic->notes . "; ";
      if (__json_value_is_present($dootronic, 'collected_via'))
        $additional_notes_value .= "Collected via: " . $dootronic->collected_via . "; ";
      if (__json_value_is_present($dootronic, 'donor_name'))
        $additional_notes_value .= "Donated by: " . $dootronic->donor_name . "; ";
      if (__json_value_is_present($dootronic, 'collection_date'))
        $additional_notes_value .= "Collection date: " . $dootronic->collection_date . "; ";
      $wNode->field_additional_notes->set($additional_notes_value);

      // Technical notes
      $technical_notes_value = "";
      if (__json_value_is_present($dootronic, 'ts'))
        $technical_notes_value .= "Date of quality check: " . $dootronic->ts . "; ";
      if (__json_value_is_present($dootronic, 'cpu_model'))
        $technical_notes_value .= "CPU model: " . $dootronic->cpu_model . "; ";
      if (__json_value_is_present($dootronic, 'disk1_model'))
        $technical_notes_value .= "disk1_model: " . $dootronic->disk1_model . "; ";
      if (__json_value_is_present($dootronic, 'disk1_type'))
        $technical_notes_value .= "disk1_type: " . $dootronic->disk1_type . "; ";
      if (__json_value_is_present($dootronic, 'disk2_model'))
        $technical_notes_value .= "disk2_model: " . $dootronic->disk2_model . "; ";
      if (__json_value_is_present($dootronic, 'disk2_type'))
        $technical_notes_value .= "disk2_type: " . $dootronic->disk2_type . "; ";
      if (__json_value_is_present($dootronic, 'quality_check'))
        $technical_notes_value .= "Failed quality check: " . $dootronic->quality_check. "; ";
      $wNode->field_technical_notes->set($technical_notes_value);

      // Additional emails
      if (__json_value_is_present($dootronic, 'donor_email')) {
        // Must be a comma separated list of emails
        $wNode->field_additional_notification_em->set(explode(",", $dootronic->donor_email));
      }
      else
        $wNode->field_additional_notification_em->set(array());

      // Weight
      if (__json_value_is_present($dootronic, 'laptop_weight_kg'))
        $wNode->field_dooject_weight->set(floatval($dootronic->laptop_weight_kg));
      else
        $wNode->field_dooject_weight->set(NULL);

      // Voltage and ampers
      if (__json_value_is_present($dootronic, 'battery_voltage')) {
        $wNode->field_volts->set(floatval($dootronic->battery_voltage));
        if (__json_value_is_present($dootronic, 'battery_energy_mwh'))
          $amp_hour_int = intval(floatval($dootronic->battery_energy_mwh) / floatval($dootronic->battery_voltage));
          $wNode->field_amp_hours->set($amp_hour_int);
      }

      // Keyboard type
      if (__json_value_is_present($dootronic, 'keyboard_layout')) 
        $wNode->field_keyboard_type->set($dootronic->keyboard_layout);

      // Hub
      if (__json_value_is_present($dootronic, 'hub')) {
        $wNode->field_hub_laptop->set(explode(",", $dootronic->hub));
      }
    }

    // Set the status. For example, some laptops may be tagged as S5 (waiting for repairs)
    $status = "S2";
    if (__json_value_is_present($dootronic, 'state')) {
      $status = $dootronic->state;
    }
    $wNode->field_status->set($status);

    // Edoovillage
    if (__json_value_is_present($dootronic, 'edoovillage')) {
      $wNode->field_edoovillage_destination->set($dootronic->edoovillage);
    }

    // Save the new dootronic information
    node_save($node);
    labdoo_lib_msg_info(t("Dootronic :did1 was correctly updated.", array(":did1" => $dootronic_id)));

    $dootronic = array_pop($updates);
  }
  labdoo_lib_msg_info(t('The form has been submitted and the file @filename has been correctly processed.',
                       array('@filename' => $file->filename)));
}

