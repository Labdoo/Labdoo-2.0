<?php

/**
 * @defgroup labdoocommunicate LabdooCommunicate: Module implementing Labdoo's communication subroutines
 *
 * This module implements the various communication features within Labdoo, such as automatic email notifications
 *
 */


/**
 * @file
 * Main module file for the Labdoo Communication module
 *
 * @ingroup labdoocommunicate
 *
 */


/**
 * Implements hook_mail().
 *
 * This hook defines a list of possible e-mail templates that this module can
 * send. Each e-mail is given a unique identifier, or 'key'.
 *
 * $message comes in with some standard properties already set: 'to' address,
 * 'from' address, and a set of default 'headers' from drupal_mail(). The goal
 * of hook_mail() is to set the message's 'subject' and 'body' properties, as
 * well as make any adjustments to the headers that are necessary.
 *
 * The $email_params argument is an array which can hold any additional data required
 * to build the mail subject and body; for example, user-entered form data, or
 * some context information as to where the mail request came from.
 *
 * Note that hook_mail() is not actually a hook. It is only called for a single
 * module, the module named in the first argument of drupal_mail(). So it's
 * a callback of a type, but not a hook.
 */
function lbd_communicate_mail($key, &$message, $email_params) {

  // All the work has already been done, so just
  // assign the subject and body
  $message['subject'] = $email_params['subject'];
  $message['body'][] = $email_params['body'];

  return;
}


/**
 * Partitions a string of coma-separated email addresses into two sets: the first
 * set includes the first $LBD_COMM_MAX_EMAILS_BATCH email addresses;
 * the second string includes the rest.
 *
 * @param $emailString The string of coma-separated email addresses
 *
 * @return An array of two components, one for each string partition
 *
 */
function _partition_email_params($emailString) {
  $LBD_COMM_MAX_EMAILS_BATCH = 40;

  $emailList = explode(",", $emailString);
  if(sizeof($emailList) > $LBD_COMM_MAX_EMAILS_BATCH) {
    $selectedEmailList = array_slice($emailList, 0, $LBD_COMM_MAX_EMAILS_BATCH);
    $leftoutEmailList = array_slice($emailList, $LBD_COMM_MAX_EMAILS_BATCH, sizeof($emailList) - $LBD_COMM_MAX_EMAILS_BATCH);
    $selectedEmailString = implode(",", $selectedEmailList);
    $leftoutEmailString = implode(",", $leftoutEmailList);
  }
  else {
    $selectedEmailString = $emailString;
    $leftoutEmailString = ""; 
  }
  return array($selectedEmailString, $leftoutEmailString);
}


/**
 * Sends a notification email
 *
 * @param array $email_params 
 *   An array of values defining the template of the email with
 *   the following fields:
 *     'type': type of email
 *     'to': comma-separated string with the destination email addresses 
 *     'subject': subject of the email
 *     'body': body of the email
 *
 */
function lbd_communicate_mail_send($email_params) {
  global $user;

  // Remove email address duplicates
  if(array_key_exists('headers', $email_params) && array_key_exists('Bcc', $email_params['headers']))
    $email_params['headers']['Bcc'] = implode(',', array_unique(explode(',', $email_params['headers']['Bcc'])));

  if(array_key_exists('headers', $email_params) && array_key_exists('Bcc', $email_params['headers'])) {
    // Throttle the amount of email sent out to a maximum of LBD_COMM_MAX_EMAILS_BATCH emails
    // and have the rest be processed in the next cron job.
    // Note: to check the status of the batches in the cache, run the command:
    //   > drush php-eval "print_r(cache_get('cachedEmailParametersArray'))"
    list($selectedEmailString, $leftoutEmailString) = _partition_email_params($email_params['headers']['Bcc']);
    $email_params['headers']['Bcc'] = $selectedEmailString;
    if($leftoutEmailString != "") {
      $cachedEmailParameters = $email_params;
      $cachedEmailParameters['headers']['Bcc'] = $leftoutEmailString;
      $cache = cache_get('cachedEmailParametersArray');
      if($cache && property_exists($cache, 'data'))
        $cachedEmailParametersArray = $cache->data;
      else
        $cachedEmailParametersArray = array();
      $cachedEmailParametersArray[] = $cachedEmailParameters;
      cache_set('cachedEmailParametersArray', $cachedEmailParametersArray);
    }
  }

  // Module that calls this hook_mail API and the type of email to sent
  $module = 'lbd_communicate';
  $key = $email_params['type'];

  // Specify 'to' and 'from' addresses.
  $to = $email_params['to'];
  $from = variable_get('site_mail', 'contact@labdoo.org');

  // The language of the e-mail. Possible values:
  // - user_preferred_language(): Used for sending mail to a particular website
  //   user, so that the mail appears in their preferred language.
  // - global $language: Used when sending a mail back to the user currently
  //   viewing the site. This will send it in the language they're currently
  //   using.
  // - language_default(): Used when sending mail to a pre-existing, 'neutral'
  //   address, such as the system e-mail address, or when you're unsure of the
  //   language preferences of the intended recipient.
  //
  $language = user_preferred_language($user);

  // Whether or not to automatically send the mail when drupal_mail() is called. 
  $send = TRUE;

  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $email_params, $from, $send);
  if ($result['result'] == FALSE) {
      // labdoo_lib_print_array($result); // enable only for temporary debugging
      drupal_set_message(t('Due to high-load, there was a problem sending an automatic message, please contact Labdoo at ' . variable_get('site_mail', 'contact@labdoo.org')), 'error');
  } 

  // Log every email that goes out. This is done as a safety measure, in case the sending of the email fails,
  // we can still recover the email communication.
  // Needs a cron job like this (outside the fail) to backup the file and avoid growing it forever:
  // 0 8 * * * /usr/bin/scp /var/chroot/lbd/var/www/lbd/profiles/labdoo/modules/custom/labdoo-email.log labdoo_write@ftp.labdoo.org:labdoo-email-$(date +\%s).log && 
  // mv /var/chroot/lbd/var/www/lbd/profiles/labdoo/modules/custom/labdoo-email.log /var/chroot/lbd/var/www/lbd/profiles/labdoo/modules/custom/labdoo-email.log.backup && 
  // touch /var/chroot/lbd/var/www/lbd/profiles/labdoo/modules/custom/labdoo-email.log && chown www-data:www-data /var/chroot/lbd/var/www/lbd/profiles/labdoo/modules/custom/labdoo-email.log

  $email_log = "/var/www/lbd/profiles/labdoo/modules/custom/labdoo-email.log";
  file_put_contents($email_log, "----------------------------------\n", FILE_APPEND);
  file_put_contents($email_log, date("F j, Y, g:i a"), FILE_APPEND);
  file_put_contents($email_log, "\n----------------------------------\n", FILE_APPEND);
  file_put_contents($email_log, print_r($email_params, true), FILE_APPEND);
}


/**
 * Given a language code, it returns the path where the email translations
 * for that language are to be found.
 *
 * @param string $langCode Language code
 *
 * @return Full path to email translation files folder
 *
 */
function _path_to_email_template($langCode) {
  return dirname(__FILE__) . '/../../../translations/email-files/' . $langCode . '/';
}


/*
 * _email_laptop_event
 *
 */
function _email_laptop_event($node) {
  global $base_url;
  global $user;
  $params = array();

  if(property_exists($node, 'original')) {
    $previousStatus = labdoo_lib_get_field($node->original, 'field_status', 'node', 'value');
    $previousPickMeUp = labdoo_lib_get_field($node->original, 'field_pick_me_up', 'node', 'value');
  }
  else {
    $previousStatus = "WAS_CREATED";
  }

  $newStatus = labdoo_lib_get_field($node, 'field_status', 'node', 'value'); 
  $newPickMeUp = labdoo_lib_get_field($node, 'field_pick_me_up', 'node', 'value'); 

  if(($previousStatus == $newStatus) && ($previousPickMeUp == $newPickMeUp))
    return;

  $edoovillageNid = 0;  // An arbitrary initial value
  $laptopId = $node->title; 
  $langCode = user_preferred_language($user)->language;
  if(!file_exists(_path_to_email_template($langCode) . "laptop_tagged_subject-" . $langCode . ".email")) 
    $langCode = 'en';

  /*
   * Send out notification email to users associated with dooject 
   */
  if($previousStatus == "WAS_CREATED" && $newStatus != "S4") {
    $email_params['type'] = "LAPTOP_ADDED";        
    $subjectFileName = _path_to_email_template($langCode) . "laptop_tagged_subject-" . $langCode . ".email";
    $bodyFileName = _path_to_email_template($langCode) . "laptop_tagged_body-" . $langCode . ".email";
    // This is a new object, so the title (i.e., the Labdoo ID) has not 
    // being set yet.  Hence, we need to manually calculate the laptopId.
    $laptopId = sprintf("%09d", lbd_next_dootronic_id());
    $params["NOTTYPE"] = "laptop_tagged";
  }
  else if($newStatus == "S4") {
    $email_params['type'] = "LAPTOP_DELIVERED";
    $subjectFileName = _path_to_email_template($langCode) . "laptop_delivered_subject-" . $langCode . ".email";
    $bodyFileName = _path_to_email_template($langCode) . "laptop_delivered_body-" . $langCode . ".email";
    $edoovillageNid = labdoo_lib_get_field($node, 'field_edoovillage_destination', 'node', 'target_id');
    $params["NOTTYPE"] = "laptop_delivered";
  }
  else {
    $email_params['type'] = "LAPTOP_UPDATED";
    $subjectFileName = _path_to_email_template($langCode) . "laptop_updated_subject-" . $langCode . ".email";
    $bodyFileName = _path_to_email_template($langCode) . "laptop_updated_body-" . $langCode . ".email";
    $params["NOTTYPE"] = "laptop_updated";
  }

  $emailsList = $user->mail;  // This is BCC-ed (the default)
  $emailsListCC = "";         // This is CC-ed
  $emailsList = $emailsList . ", " . labdoo_dooject_extract_emails($node);    
  $emailsListCC = $emailsListCC . ", " . labdoo_dooject_extract_emails($node, True);

  // If dooject has associated dootrips, add the dootrippers email address too
  $wNode = entity_metadata_wrapper('node', $node);
  $dootripsList = $wNode->field_dootrips->value();
  if($dootripsList) {
    foreach($dootripsList as $dootripNode) {
      // It is possible that $dootripNode is just an empty placeholder. This situation
      // arises on laptops that are assigned to a dootrip that gets deleted later on.
      if(!$dootripNode)
        continue;
      $dootripLoaded = node_load($dootripNode->nid);
      $emailsList = $emailsList . ", " . labdoo_dootrip_extract_emails($dootripLoaded); 
      $emailsListCC = $emailsListCC . ", " . labdoo_dootrip_extract_emails($dootripLoaded, True);
    }
  }

  // Now add to the list of email addresses all hub managers who have declared interest in receiving
  // this type of laptop event.

  // TODO: Optimize. The following code is fine if only a few users are expected to be interested in 
  // receiving these notifications. By limitting it to hub manager and to only a certain region via 
  // the radious parameter, it is expected that only a few users will be added to the notification
  // list. However, in the future we should make this code more scalable and fast. One idea is to
  // have a cache of users who opt in to receive such type of notifications and update such cache
  // upon a users saving its profile, rather than searching the whole DB for users at the time a
  // dootronic is updated as is done now. Another option is to run this code as part of cron, in 
  // a way that the system periodically checks what happened since the last time cron was run and
  // sends out notifications as needed. This second optimization would decouple the following action
  // from the user activity, making the user experience faster. Currently, the overhead is neglegible,
  // but this is an area of further performance improvement.
  $sqlCondition = "";
  if($email_params['type'] == "LAPTOP_ADDED") {
    $sqlCondition = "field_hub_manager_notifications_value='HUB_TAGGED'";
  }
  if($newPickMeUp == "1") {
    if($sqlCondition != "")
      $sqlCondition = $sqlCondition . " OR ";
    $sqlCondition = $sqlCondition . "field_hub_manager_notifications_value='HUB_PICKME'";
  }

  if($sqlCondition != "") {
    $query = "SELECT entity_id FROM field_data_field_hub_manager_notifications WHERE $sqlCondition";
    $result = db_query($query); 

    foreach($result as $item) {
      // Compute distance between hub manager and laptop
      $userId = $item->entity_id;
      $query = "SELECT city FROM location WHERE lid IN (SELECT lid FROM location_instance WHERE uid=$userId)";
      $userCity = db_query($query)->fetchField(); 
      $query = "SELECT country FROM location WHERE lid IN (SELECT lid FROM location_instance WHERE uid=$userId)";
      $userCountry = db_query($query)->fetchField(); 
      if(labdoo_lookup_coordinates($userCountry, $userCity, $userLat, $userLon) < 0)
        continue;
      $laptopLat = $node->locations[0]['latitude'];
      $laptopLon = $node->locations[0]['longitude'];
      $latlon_a['lat'] = $userLat;
      $latlon_a['lon'] = $userLon;
      $latlon_b['lat'] = $laptopLat;
      $latlon_b['lon'] = $laptopLon; 
      $distance = location_distance_between($latlon_a, $latlon_b, 'km');
      if($distance == NULL)
        continue;
      // Extract user radius 
      $query = "SELECT field_notification_area_value FROM field_data_field_notification_area WHERE entity_id=$userId";
      $userRadius = db_query($query)->fetchField();
      // If distance is within radius, add to email list
      if($distance['scalar'] <= intval($userRadius)) {
        $userObj = user_load($userId);
        $emailsList = $emailsList . ", " . $userObj->mail;
      }
    }
  }

  $email_params['to'] = $emailsListCC . ", " . variable_get('site_mail');
  $email_params['headers']['Bcc'] = $emailsList;

  $subjectTemplate = file_get_contents($subjectFileName);
  $bodyTemplate = file_get_contents($bodyFileName);

  $statusLabels = list_allowed_values(field_info_field("field_status"));

  if($newPickMeUp == "1") 
    $extraInfo = " ('Pick me up' ON)";
  else
    $extraInfo = "";

  $subject = str_replace("[ID]", $laptopId, $subjectTemplate);
  $subject = $subject . $extraInfo;

  $params["ID"] = $laptopId;
  $params["STATUS"] = $statusLabels[$newStatus] . $extraInfo;
  $params["LAPTOP_URL"] = url(drupal_get_path_alias('content/'. $laptopId), array('absolute' => TRUE));
  $params["LAPTOP_URL"] = labdoo_lib_convert_html_link($params["LAPTOP_URL"]);
  $params["EDOOVILLAGE_URL"] = labdoo_lib_generate_html_link_from_nid($edoovillageNid, lbd_nodeid2title($edoovillageNid));
  $params["CONTACT_EMAIL"] = variable_get('site_mail', '');
  $params["DASHBOARD_URL"] = $base_url . '/content/getting-started';
  $params["DASHBOARD_URL"] = labdoo_lib_convert_html_link($params["DASHBOARD_URL"]);
  $body = $bodyTemplate;
  _body_do_parameters($params, $body);

  $email_params['subject'] = $subject;
  $email_params['body'] = $body;

  lbd_communicate_mail_send($email_params);
  return;
}


/*
 * _email_dootrip_event
 *
 */
function _email_dootrip_event($node, $eventType) {
  global $user;
  global $base_url;
  $params = array();

  $langCode = user_preferred_language($user)->language;
  if(!file_exists(_path_to_email_template($langCode) . "dootrip_added_subject-" . $langCode . ".email")) 
    $langCode = 'en';

  // 3 cases:
  //  - A new dootrip was created ('insert')
  //  - A dootrip was updated ('presave')
  //  - A dooject changed status to S3 or T1 and this dooject is associated with it ('edoovillageAssigned')

  // Note: the edoovillageAssigned type is no longer used because it turned out to be too pedantic

  if($eventType == 'insert') {  
    $email_params['type'] = "DOOTRIP_ADDED";
    $subjectFileName = _path_to_email_template($langCode) . "dootrip_added_subject-" . $langCode . ".email";
    $bodyFileName = _path_to_email_template($langCode) . "dootrip_added_body-" . $langCode . ".email";
    $params["NOTTYPE"] = "dootrip_added";
  }
  else { 
    // If we are here, there are two types of events possible: 
    // 'presave' or 'edoovillageAssigned'
    if($eventType == 'presave') {
      if(!property_exists($node, 'original'))
        return;
      $wasChanged = FALSE;
      $wNodeNew = entity_metadata_wrapper('node', $node);
      $wNodeOrig = entity_metadata_wrapper('node', $node->original);
      // Check if dooject list was altered
      $doojectListNew = $wNodeNew->field_laptops->value();
      $doojectListOrig = $wNodeOrig->field_laptops->value();
      if($doojectListNew != $doojectListOrig) 
        $wasChanged = TRUE;
      // Check if assigned users were altered 
      $userListNew = $wNodeNew->field_dootripper_s_->value();
      $userListOrig = $wNodeOrig->field_dootripper_s_->value();
      if($userListNew != $userListOrig) 
        $wasChanged = TRUE;
      // Check if destination was altered
      $destinationNew = labdoo_lib_get_field($node, 'field_destination_of_the_trip', 'node', 'country');
      $destinationOrig = labdoo_lib_get_field($node->original, 'field_destination_of_the_trip', 'node', 'country');
      if($destinationNew != $destinationOrig)
        $wasChanged = TRUE;
      // Check if origin was altered
      $originNew = labdoo_lib_get_field($node, 'field_origin_of_the_trip', 'node', 'country');
      $originOrig = labdoo_lib_get_field($node->original, 'field_origin_of_the_trip', 'node', 'country');
      if($originNew != $originOrig)
        $wasChanged = TRUE;
      // Check if status was altered
      $statusNew = $wNodeNew->field_status_dootrip->value();
      $statusOrig = $wNodeOrig->field_status_dootrip->value();
      if($statusNew != $statusOrig) 
        $wasChanged = TRUE;
      // If no relevant changes, do nothing
      if($wasChanged == FALSE) 
        return;
    }
    // If we are here, this is either a 'presave' with wasChanged TRUE or an 'edoovillageAssigned' case,
    // both need to be resolved as a DOOTRIP_UPDATED
    $email_params['type'] = "DOOTRIP_UPDATED"; 
    $subjectFileName = _path_to_email_template($langCode) . "dootrip_updated_subject-" . $langCode . ".email";
    $bodyFileName = _path_to_email_template($langCode) . "dootrip_updated_body-" . $langCode . ".email";
    $params["NOTTYPE"] = "dootrip_updated";
  }

  /*
   * Send out notification email to dootripper 
   */
  $dootripTitle = $node->title; 
  // Remove the hashtag as that confuses the URL parameters
  $dootripTitle = str_replace('#', '', $dootripTitle);
  $emailsList = labdoo_dootrip_extract_emails($node);    
  $emailsListCC = labdoo_dootrip_extract_emails($node, True);
  if(strpos($emailsList, $user->mail) == FALSE)
    $emailsList = $emailsList . ", " . $user->mail;
  $email_params['to'] = $emailsListCC . ", " . variable_get('site_mail');
  $email_params['headers']['Bcc'] = $emailsList;
  $dootripNid = $node->nid;

  $subjectTemplate = file_get_contents($subjectFileName);
  $bodyTemplate = file_get_contents($bodyFileName);

  $subject = str_replace("[DOOTRIP_TITLE]", $dootripTitle, $subjectTemplate);
  // Remove preceeding integer ID from dootrip title to make it more clear
  $subject = preg_replace('/^\[Labdoo\] [0-9]+ /', '[Labdoo] ', trim($subject));
  $subject = preg_replace('/^\[Labdoo\] - /', '[Labdoo] ', trim($subject));

  $params["DOOTRIP_TITLE"] = $dootripTitle;
  $params["DOOTRIP_URL"] = labdoo_lib_generate_html_link_from_nid($dootripNid, $dootripTitle); 
  $params["CONTACT_EMAIL"] = variable_get('site_mail', '');
  $params["DASHBOARD_URL"] = $base_url . '/content/getting-started';
  $params["DASHBOARD_URL"] = labdoo_lib_convert_html_link($params["DASHBOARD_URL"]);
  $body = $bodyTemplate;
  _body_do_parameters($params, $body);

  $email_params['subject'] = $subject;
  $email_params['body'] = $body;

  lbd_communicate_mail_send($email_params);

  /*
   * Send out notification email to those hubs and edoovillages managers 
   * who have projects in the dootrip's destination country.
   * Do not need to update the field 'type' since its value does not change.
   */
  if($eventType != 'insert') // Only if this is a newly created dootrip (to avoid being pedantic)
    return;
  // Only if the announce field is turned on
  $announce = labdoo_lib_get_field($node, 'field_announce_this_dootrip', 'node', 'value');
  $announce = 0; // This feature disabled for now
                 // See https://platform.labdoo.org/content/dootrip-announce-feature-breaks-some-times
  if($announce == 0)
    return;
  $subjectFileName = _path_to_email_template($langCode) . "dootrip_announce_subject-" . $langCode . ".email";
  $subjectTemplate = file_get_contents($subjectFileName);
  $subject = $subjectTemplate;
  $bodyFileName = _path_to_email_template($langCode) . "dootrip_announce_body-" . $langCode . ".email";
  $bodyTemplate = file_get_contents($bodyFileName);

  $params["NOTTYPE"] = "dootrip_announce";
  $params["DOOTRIP_URL"] = labdoo_lib_generate_html_link_from_nid($dootripNid, $dootripTitle); 
  $params["CONTACT_EMAIL"] = variable_get('site_mail', '');
  $params["DASHBOARD_URL"] = $base_url . '/content/getting-started';
  $params["DASHBOARD_URL"] = labdoo_lib_convert_html_link($params["DASHBOARD_URL"]);
  $body = $bodyTemplate;
  _body_do_parameters($params, $body);

  $email_params['subject'] = $subject;
  $email_params['body'] = $body;

  $country = labdoo_lib_get_field($node, 'field_destination_of_the_trip', 'node', 'country');
    
  // Select hubs which manage an edoovillage in the same destination country as this
  // dootrip. The edoovillages must be in "open" state.
  $query = "SELECT DISTINCT field_hub_target_id FROM field_data_field_hub WHERE (entity_id IN 
             (SELECT nid FROM location_instance WHERE lid IN 
               (SELECT lid FROM location WHERE country=:co)) AND entity_id IN
             (SELECT entity_id FROM field_data_field_edoovillage_status WHERE field_edoovillage_status_value='open'))";
  $result = db_query($query, array(':co' => $country)); 

  foreach($result as $item) {
    $emailsList = variable_get('site_mail', '');
    $hubNode = node_load($item->field_hub_target_id);
    foreach(field_get_items('node', $hubNode, 'field_hub_manager_s_') as $element) {
      $userObj = user_load($element['target_id']);
      $emailsList = $emailsList . ", " . $userObj->mail;
    }
    $email_params['to'] = $emailsList; 
    lbd_communicate_mail_send($email_params);
  }

  return;
}


/*
 * Generates notification emails to users involved in a newly created team event 
 *
 * @param node $node The node that is being created or the parent page node if $comment is not NULL
 * @param comment $comment If it's a comment, the comment node; otherwise, NULL
 *
 */
function _email_team_event($node, $comment = NULL) {
  global $user;

  $langCode = user_preferred_language($user)->language;
  if(!file_exists(_path_to_email_template($langCode) . "team_activity_subject-" . $langCode . ".email"))
    $langCode = 'en';

  $email_params['type'] = "TEAM_ACTIVITY";
  $subjectFileName = _path_to_email_template($langCode) . "team_activity_subject-" . $langCode . ".email";
  $bodyFileName = _path_to_email_template($langCode) . "team_activity_body-" . $langCode . ".email";

  $subjectTemplate = file_get_contents($subjectFileName);
  $bodyTemplate = file_get_contents($bodyFileName);

  if($node->type == 'team_page') {
    if($comment == NULL) {
      $activityType = 'conversation';
      $activityBody = labdoo_lib_get_field($node, 'body', 'node', 'value');
    }
    else {
      $activityType = 'comment';
      $activityBody = labdoo_lib_get_field($comment, 'comment_body', 'comment', 'value');
    }
  }
  else if($node->type == 'event') {
    $activityType = 'event';
    $activityBody = labdoo_lib_get_field($node, 'body', 'node', 'value');
  }
  else if($node->type == 'team_task') {
    if($comment == NULL) {
      $activityType = 'task';
      $activityBody = labdoo_lib_get_field($node, 'body', 'node', 'value');
    }
    else {
      $activityType = 'comment';
      $activityBody = labdoo_lib_get_field($comment, 'comment_body', 'comment', 'value');
    }
  }
  $activityTitle = $node->title;
  $teamId = labdoo_lib_get_field($node, 'og_group_ref', 'node', 'target_id');
  $teamIdAll = labdoo_lib_get_field_all($node, 'og_group_ref', 'node', 'target_id');
  if(property_exists($node, 'field_additional_teams'))
    $teamIdAll = array_merge($teamIdAll, labdoo_lib_get_field_all($node, 'field_additional_teams', 'node', 'target_id')); 

  $team = node_load($teamId);
  $teamName = $team->title;

  $wNode = entity_metadata_wrapper('node', $node);
  if($node->type == 'team_page') {
    $sendAll = $wNode->field_send_to_all_conversation->value();
    $sendToFieldName = 'field_send_to_conversation'; 
  }
  else if($node->type == 'team_task') { 
    $sendAll = $wNode->field_send_to_all_task->value();
    $sendToFieldName = 'field_send_to_task'; 
  }
  else if($node->type == 'event') {
    $sendAll = $wNode->field_send_to_all_event->value();
    $sendToFieldName = 'field_send_to_event'; 
  }
  else
    $sendAll = TRUE;

  $emailsList = variable_get('site_mail', '');

  // If they exist, check the send to all hub/edoovillage managers flags
  if(isset($wNode->field_send_to_all_hub_managers)) {
    $sendAllHubs = $wNode->field_send_to_all_hub_managers->value();
    $sendAllEdoovillages = $wNode->field_send_to_all_edoo_managers->value();

    if($sendAllHubs == 1) {
      $hubManagers = labdoo_lib_get_users_role('hub manager');
      foreach($hubManagers as $hubManager) {
        $userObj = user_load($hubManager);
        $emailsList = $emailsList . ", " . $userObj->mail;
      }
    }
    if($sendAllEdoovillages == 1) {
      $edooManagers = labdoo_lib_get_users_role('edoovillage manager');
      foreach($edooManagers as $edooManager) {
        $userObj = user_load($edooManager);
        $emailsList = $emailsList . ", " . $userObj->mail;
      }
    }
  }

  if($sendAll) { // Send to all members of this team
    $members = array();
    foreach($teamIdAll as $thisTeamId) {
      $members = array_merge($members, lbd_teams_get_team_members($thisTeamId));
    }
    foreach($members as $memberId) {
      $userObj = user_load($memberId);
      $emailsList = $emailsList . ", " . $userObj->mail;
    }
  }

  // Add additional users based on the 'send to' field
  if(property_exists($node, $sendToFieldName)) {
    if($node->$sendToFieldName) {
      foreach(field_get_items('node', $node, $sendToFieldName) as $element) {
        $userObj = user_load($element['target_id']);
        $emailsList = $emailsList . ", " . $userObj->mail;
      }
    }
  }
  $emailsList = trim($emailsList, ", ");

  // Events have an additional field called field_additional_emails_event where users can add
  // additional email addresses that need to be notified. Include them too in $emailsList.
  if($node->type == 'event' || $node->type == 'team_page') {
    if($node->type == 'event')
      $additionalEmails = $wNode->field_additional_emails_event->value();
    else
      $additionalEmails = $wNode->field_additional_emails_conver->value();
    $additionalEmailsList = explode(",", $additionalEmails);
    $validatedEmails = "";
    foreach($additionalEmailsList as $email) {
      $trimmedEmail = trim($email);
      if(valid_email_address($trimmedEmail))
        $validatedEmails = $validatedEmails . ", " . $trimmedEmail;
    }
    $validatedEmails = substr($validatedEmails, 1); // remove extra comma
    if($validatedEmails != "")
      $emailsList = $emailsList . ", " . $validatedEmails;
  }

  // Ensure that all users who added a comment are included in the email list.
  // This is needed because it is possible for users to add a comment to a team
  // without being registered to that team.
  $query = "SELECT uid FROM comment WHERE nid=$node->nid";
  $items = db_query($query);
  foreach($items as $item) {
    $userLoaded = user_load($item->uid);
    $emailsList = $emailsList . ", " . $userLoaded->mail;
  }

  // Include also the author of the parent node
  $userLoaded = user_load($node->uid);
  $emailsList = $emailsList . ", " . $userLoaded->mail;

  $activityUrl = url(drupal_get_path_alias("node/" .  $node->nid, $langCode), array('absolute' => TRUE));
  $teamsMgmUrl = url(drupal_get_path_alias("my-teams", $langCode), array('absolute' => TRUE));
  if($activityType == 'comment') {
    $query = "SELECT MAX(cid) FROM comment WHERE nid=$node->nid";
    $newCid = db_query($query)->fetchField();
    $activityUrl = $activityUrl . "#comment-" . $newCid;
  }

  $subject = str_replace("[ACTIVITY_TYPE]", $activityType, $subjectTemplate);
  $subject = str_replace("[TEAM_NAME]", $teamName, $subject);
  $subject = str_replace("[ACTIVITY_SUBJECT]", $activityTitle, $subject);

  $body = str_replace("[ACTIVITY_TYPE]", $activityType, $bodyTemplate);
  $body = str_replace("[USERNAME]", $user->name, $body);
  $body = str_replace("[ACTIVITY_SUBJECT]", $activityTitle, $body);
  $body = str_replace("[TEAM_NAME]", $teamName, $body);
  $body = str_replace("[ACTIVITY_BODY]", $activityBody, $body);
  $body = str_replace("[ACTIVITY_URL]", $activityUrl, $body);
  $body = str_replace("[TEAMS_MGM_URL]", $teamsMgmUrl, $body);

  // If the activity type is 'event', add the date and location
  if($activityType == 'event') {
    // Do not print the time to avoid confusing people with different time zones.
    // Have them go to the link to find the real time of the event.
    // $eventTime = labdoo_lib_get_field($node, 'field_event_date', 'node', 'value');
    $eventLocation = labdoo_lib_get_field($node, 'field_location_event', 'node', 'value');
    // Convert to single line
    $eventLocation = str_replace("\r", " | ", $eventLocation);
    $eventLocation = str_replace("\n", "", $eventLocation);
//    $bodyHeader = "---\n";
    $bodyHeader = $bodyHeader . "Event name: " . $activityTitle . "\n";
    // $bodyHeader = $bodyHeader . "Time: " . $eventTime . "\n";
    $bodyHeader = $bodyHeader . "Location: " . $eventLocation . "\n";
    $bodyHeader = $bodyHeader . "Link: " . $activityUrl . "\n";
//    $bodyHeader = $bodyHeader . "---\n\n";
    $body = $bodyHeader . $body;
  }

  $email_params['subject'] = $subject;
  $email_params['body'] = $body;
  $email_params['to'] = variable_get('site_mail');
  $email_params['headers']['Bcc'] = $emailsList;

  lbd_communicate_mail_send($email_params);
  return;
}


/**
 * Implementation of hook_node_presave
 *
 * When called on a node creation, $node->nid is not initialized. 
 * For type laptop,  we do not really need $node->nid since we identify the
 * laptop node using its Labdoo 9-digit ID (e.g., to generate URL), so hook
 * presave can be used for both node creation and node update events.
 * For type dootrip, we do need to use $node->nid, so we can only use this
 * hook for node update and we need to let hook_node_insert handle the node
 * creation case.
 *
 */
function lbd_communicate_node_presave($node) {

  if($node->type == 'laptop') 
    _email_laptop_event($node);

  if($node->type == 'dootrip') 
    _email_dootrip_event($node, 'presave');

  return;
}


/**
 * Implementation of hook_node_insert
 *
 * For node creation, use this hook instead of hook_node_presave 
 * to ensure that $node->nid is initialized
 *
 */
function lbd_communicate_node_insert($node) {

  if($node->type == 'dootrip')
    _email_dootrip_event($node, 'insert');

  if($node->type == 'team_page' || $node->type == 'event' || $node->type == 'team_task')
    _email_team_event($node);

  return;
}


function lbd_communicate_comment_presave($comment) {
//  $node = node_load($comment->nid);
//  if($node->type == 'team_task')
//    _email_team_event($node, 'insert'); 
//drupal_set_message($node->type);
}


/**
 * Implementation of hook_user_insert
 *
 */
function lbd_communicate_user_insert(&$edit, $account, $category) {
  global $base_url;
  global $language;
  $params = array();

  /*
   * Send our welcome message to user.
   */
  // The user is being created here, so at this point the global $user is not
  // set up yet. Instead, pull the language directly from the page language,
  // which is what is used to define the initial default language of the
  // new user. 
  $langCode = $language->language;
  if(!file_exists(_path_to_email_template($langCode) . "user_created_subject-" . $langCode . ".email")) 
    $langCode = 'en';

  $email_params['type'] = "USER_CREATED";        
  $email_params['to'] = $edit['mail'] . ", " . variable_get('site_mail', ''); 

  $subjectFileName = _path_to_email_template($langCode) . "user_created_subject-" . $langCode . ".email";
  $bodyFileName = _path_to_email_template($langCode) . "user_created_body-" . $langCode . ".email";
  $params["NOTTYPE"] = "user_created";

  $subjectTemplate = file_get_contents($subjectFileName);
  $bodyTemplate = file_get_contents($bodyFileName);

  $subject = $subjectTemplate;

  $params["LABDOOUSER"] = $edit['name'];
  $params["DASHBOARD_URL"] = $base_url . '/content/getting-started';
  $body = $bodyTemplate;
  _body_do_parameters($params, $body);

  $email_params['subject'] = $subject;
  $email_params['body'] = $body;
   
  lbd_communicate_mail_send($email_params);

  /*
   * Send out informative message to hubs that have indicated interest in
   * being notified about this type of event.
   *
   */
  $email_params = array();
  $emailsList = ""; 

  // Find all hub managers interested in this event and add them to the email list
  $userLat = $account->locations[0]['latitude'];
  $userLon = $account->locations[0]['longitude']; 
  $query = "SELECT entity_id FROM field_data_field_hub_manager_notifications WHERE field_hub_manager_notifications_value='USER_NEW'";
  $result = db_query($query); 
  foreach($result as $item) {
    // Compute distance between hub manager and new user 
    $userId = $item->entity_id;
    $query = "SELECT city FROM location WHERE lid IN (SELECT lid FROM location_instance WHERE uid=$userId)";
    $userCity = db_query($query)->fetchField(); 
    $query = "SELECT country FROM location WHERE lid IN (SELECT lid FROM location_instance WHERE uid=$userId)";
    $userCountry = db_query($query)->fetchField(); 
    if(labdoo_lookup_coordinates($userCountry, $userCity, $hubMgerLat, $hubMgerLon) < 0)
      continue;
    $latlon_a['lat'] = $hubMgerLat;
    $latlon_a['lon'] = $hubMgerLon;
    $latlon_b['lat'] = $userLat;
    $latlon_b['lon'] = $userLon; 
    $distance = location_distance_between($latlon_a, $latlon_b, 'km');
    if($distance == NULL)
      continue;
    // Extract user radius 
    $query = "SELECT field_notification_area_value FROM field_data_field_notification_area WHERE entity_id=$userId";
    $userRadius = db_query($query)->fetchField();
    // If distance is within radius, add to email list
    if($distance['scalar'] <= intval($userRadius)) {
      $userObj = user_load($userId);
      $emailsList = $emailsList . ", " . $userObj->mail;
    }
  }

  if($emailsList[0] == ",")
    $emailsList = substr($emailsList, 2);

  $email_params['to'] = variable_get('site_mail');
  $email_params['headers']['Bcc'] = $emailsList;
  $email_params['type'] = "USER_CREATED";        

  // Send it in English as each hub manager may have a different prefered language
  $langCode = 'en';
  $subjectFileName = _path_to_email_template($langCode) . "notification_user_created_subject-" . $langCode . ".email";
  $bodyFileName = _path_to_email_template($langCode) . "notification_user_created_body-" . $langCode . ".email";
  $params["NOTTYPE"] = "notification_user_created";

  $subjectTemplate = file_get_contents($subjectFileName);
  $bodyTemplate = file_get_contents($bodyFileName);

  $subject = $subjectTemplate;

  $params["USERID"] = $edit['uid'];
  $body = $bodyTemplate;
  _body_do_parameters($params, $body);

  $email_params['subject'] = $subject;
  $email_params['body'] = $body;
   
  lbd_communicate_mail_send($email_params);

  return;
}


/*
 * Implementation of hook_mail_alter
 *
 */
function lbd_communicate_mail_alter(&$message) {

  // Do not send any system message when user registers
  if($message['id'] == 'user_register_no_approval_required') {
    $message['send'] = FALSE;
  }

  // TODO: figure out why some events attempt to generate an email without a 'to'
  // field. One such event is the registration of a new user.
  if($message['to'] == "") {
    watchdog("lbd_communicate", "Trying to send a message without a 'to' field", NULL, WATCHDOG_WARNING);
    $message['send'] = FALSE;
  }

  return;
}


/*
 * Implementation of hook_cron
 *
 * Please ensure this function is run once an hour, see [*] 
 *
 */
function lbd_communicate_cron() {
  global $base_url;
  $DOOTRIP_EMAIL_EXPIRED_PERIOD = 864000; // In seconds (10 days after expiration, send notification)
  $DOOTRIP_EMAIL_EXPIRED_REPETITIONS = 3; // Send three more notifications in the same interval (i.e., 10, 20, 30 days)
  $cron_last = variable_get('cron_last');
  $params = array();
  $params["NOTTYPE"] = "dootrip_expired";

  /*
   * Check for dootrips which have expired
   * and whose status have not been updated and
   * send an email reminder to their users to do
   * the update.
   */
  $now = date("c");
  $query = "SELECT field_arrival_date_value, entity_id FROM field_data_field_arrival_date WHERE field_arrival_date_value<'$now'";
  $dootrips = db_query($query);

  foreach($dootrips as $dootrip) {

    // Note: both DateObject and date_now will be based on user time zone if available or site timezone otherwise.
    // Since this is run inside cron, it will be based on the site's timezone.
    $fieldDate = new DateObject($dootrip->field_arrival_date_value, date_default_timezone(), DATE_FORMAT_ISO);
    $nowDate = date_now();
    $timePastSinceDootrip = $fieldDate->difference($nowDate, 'seconds');
    $timePastSinceCron = time() - $cron_last;
    $timePastSinceLastCheck = $cron_last;

    $doNotification = FALSE;
    for($i = 1; $i <= $DOOTRIP_EMAIL_EXPIRED_REPETITIONS; $i++) {
      // Don't notify unless $i * $DOOTRIP_EMAIL_EXPIRED_PERIOD seconds have passed.
      if($timePastSinceDootrip < ($i * $DOOTRIP_EMAIL_EXPIRED_PERIOD)) 
        continue;
      // [*] The following assumes that this function is run once every hour (3600 seconds).
      // Basically, do not renotify after more than one hour has passed since we sent
      // the last notification.
      if(($i * $DOOTRIP_EMAIL_EXPIRED_PERIOD) < ($timePastSinceDootrip - 3600))
        continue;
      $doNotification = TRUE;
    } 

    if(!$doNotification)
      continue;

    // If the dootrip has already been updated, no need to send the notification reminder
    $query = "SELECT field_status_dootrip_value FROM field_data_field_status_dootrip WHERE entity_id=" . $dootrip->entity_id;
    $status = db_query($query)->fetchField();
    if($status != "DS0")
      continue;
      
    // If we are here, it's because We concluded we need to send a notification reminder

    // Load the dootrip node and one of its dootriper users (an arbitrary dootripper will do it)
    $node = node_load($dootrip->entity_id);
    foreach(field_get_items('node', $node, 'field_dootripper_s_') as $element) {
      $user = user_load($element['target_id']);
      break;
    }

    $langCode = user_preferred_language($user)->language;
    if(!file_exists(_path_to_email_template($langCode) . "dootrip_expired_subject-" . $langCode . ".email")) 
      $langCode = 'en';

    $email_params['type'] = "DOOTRIP_EXPIRED"; 
    $subjectFileName = _path_to_email_template($langCode) . "dootrip_expired_subject-" . $langCode . ".email";
    $bodyFileName = _path_to_email_template($langCode) . "dootrip_expired_body-" . $langCode . ".email";

    /*
     * Send out notification email 
     */
    $dootripTitle = $node->title; 
    $emailsList = labdoo_dootrip_extract_emails($node);    
    $emailsListCC = labdoo_dootrip_extract_emails($node, True);
    if(strpos($emailsList, $user->mail) == FALSE)
      $emailsList = $emailsList . ", " . $user->mail;
    $email_params['to'] = $emailsListCC . ", " . variable_get('site_mail');
    $email_params['headers']['Bcc'] = $emailsList;
    $dootripNid = $node->nid;

    $subjectTemplate = file_get_contents($subjectFileName);
    $bodyTemplate = file_get_contents($bodyFileName);

    $subject = str_replace("[DOOTRIP_TITLE]", $dootripTitle, $subjectTemplate);
    // Remove preceeding integer ID from dootrip title to make it more clear
    $subject = preg_replace('/^[0-9]+ /', '', trim($subject));
    $subject = preg_replace('/^- /', '', trim($subject));

    $params["DOOTRIP_TITLE"] = $dootripTitle;
    $params["DOOTRIP_URL"] = labdoo_lib_generate_html_link_from_nid($dootripNid, $dootripTitle); 
    $params["CONTACT_EMAIL"] = variable_get('site_mail', '');
    $body = $bodyTemplate;
    _body_do_parameters($params, $body);

    $email_params['subject'] = $subject;
    $email_params['body'] = $body;

    lbd_communicate_mail_send($email_params);
  }

  // Check for any batches of emails that were too large to be sent out 
  // and which were chopped into smaller batches. Any outstanding batch
  // is saved in the cache under the cid 'cachedEmailParametersArray'
  $cache = cache_get('cachedEmailParametersArray');
  if($cache && property_exists($cache, 'data')) {
    $cachedEmailParametersArray = $cache->data;
    $newCachedEmailParametersArray = array();
    foreach($cachedEmailParametersArray as $cachedEmailParameters) {
      list($selectedEmailString, $leftoutEmailString) = _partition_email_params($cachedEmailParameters['headers']['Bcc']);
      $cachedEmailParameters['headers']['Bcc'] = $selectedEmailString;
      lbd_communicate_mail_send($cachedEmailParameters);
      if($leftoutEmailString != "") {
        $cachedEmailParameters['headers']['Bcc'] = $leftoutEmailString;
        $newCachedEmailParametersArray[] = $cachedEmailParameters;
      }
    }
    cache_set('cachedEmailParametersArray', $newCachedEmailParametersArray);
  }

  return;
}


/**
 *
 * hook_comment_insert
 *
 */
function lbd_communicate_comment_insert($comment) {
  $node = node_load($comment->nid);
  if($node->type == 'team_page' || $node->type == 'event' || $node->type == 'team_task')
    _email_team_event($node, $comment);
}


/**
 * Remove a specific email announcement from the cache.
 * This function can be used from drush as follows:
 *  > drush php-eval "lbd_communicate_pop_email_cache(0);" # pops the top element 
 *
 * @param $position The position of the email announcement to remove
 *                  in the cache entry cachedEmailParametersArray
 * 
 */
function lbd_communicate_pop_email_cache($position) {
  $cache = cache_get('cachedEmailParametersArray'); 
  $cachedEmailParametersArray = $cache->data; 
  unset($cachedEmailParametersArray[$position]);
  cache_set('cachedEmailParametersArray', $cachedEmailParametersArray);
  return;
}


/**
 * Constructs the contact form reasons table
 *
 * @return The contact form reasons table
 *
 */
function _contact_reasons() {
  $reasons = array(t('I want to contribute a device (laptop, tablet, mobile phone, etc.)'), 
                   t('I want to contribute a trip (dootrip)'), 
                   t('I want to become a Labdoo volunteer (labdooer)'), 
                   t('I want to solicit laptops or tablets for my educational project (edoovillage)'), 
                   t('I just want to send a message to Labdoo.org'));
  return $reasons;
}


/**
 * Provides the summary line for each contact reason
 *
 * @return The contact form summary lines table
 *
 */
function _contact_reasons_summary() {
  $reasons_sum = array(t('dootronic donation'), 
                       t('dootrip contribution'), 
                       t('new Labdooer'), 
                       t('edoovillage request'), 
                       t('message'));
  return $reasons_sum;
}




/**
 * Returns an array containing all the combinations of country/reason
 * codes that are to be redirected to their own contact thank you page.
 *
 * This is used to help optimize the tracking performed in engines like
 * Google adwords
 *
 * @return The array with all the country/reason codes
 *
 */ 
function _contact_urls_redirect() {
  //$urls = array('at0', 'at1', 'at2', 'at3', 'at4',
  //              'de0', 'de1', 'de2', 'de3', 'de4');
  $urls = array('at', 'de', 'ch');
  return $urls;
}


/**
 * Constructs the contact form
 */
function lbd_contact_form($form, &$form_state) {
  $country = "";
  $reason = "";
  $campaign = "";
  if(array_key_exists('co', $_GET)) 
    $country = $_GET['co'];
  if(array_key_exists('re', $_GET)) 
    $reason = $_GET['re'];
  if(array_key_exists('campaign', $_GET)) 
    $campaign = $_GET['campaign'];


  $header = "<br/><strong><font size='4' color='#FF2400'>";
  $header .= t('Thank you for reaching out to Project Labdoo.');
  $header .= "</font></strong><br/><font size='3' font color='#625D5D'>";
  $header .= t('Please fill out the following form and after reviewing your message we will get back to you.');
  $header .= "</font><br/><br/>";

  // Header text
  $form['header'] = array(
    '#markup' => $header,
  );

  // Name
  $form['name'] = array(
    '#type'       => 'textfield',
    '#title'      => t('Name'),
    '#size'       => '20',
    '#required'   => TRUE,
  );

  // Email
  $form['email'] = array(
    '#title'      => t('E-mail address'),
    '#type'       => 'textfield',
    '#size'       => '20',
    '#required'   => TRUE,
  );

  // Email
  $form['confirm-email'] = array(
    '#title'      => t('Confirm e-mail address'),
    '#type'       => 'textfield',
    '#size'       => '20',
    '#required'   => TRUE,
  );

  // Countries
  $countries = location_get_iso3166_list();
  $form['country'] = array(
    '#title'      => t('Country'),
    '#type'       => 'select',
    '#options'    => array_values($countries),
    '#required'   => TRUE,
  );

  if($country != "") {
    $form['country']['#default_value'] = array_search($country, array_keys($countries)); 
//    $form['country']['#access'] = FALSE;
  }

  // Name
  $form['city'] = array(
    '#type'       => 'textfield',
    '#title'      => t('City:'),
    '#size'       => '20',
    '#required'   => FALSE,
  );

  // Reason
  $reasons = _contact_reasons();
  $form['reason'] = array(
    '#title'      => t('The reason you are contacting Labdoo.org'),
    '#type'       => 'select',
    '#options'    => $reasons,
    '#required'   => TRUE,
  );

  if($reason != "") {
    $form['reason']['#default_value'] = $reason; 
//    $form['reason']['#access'] = FALSE;
  }

  // Campaign (hidden fielf)
  $form['campaign'] = array(
    '#type'       => 'hidden',
    '#value'   => $campaign,
  );

  // Message
  $form['message'] = array(
    '#title'      => t('Message'),
    '#type'       => 'textarea',
    '#rows'       => '5',
    '#cols'       => '10',
    '#required'   => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );

  return $form;
}


/** 
 * Validates the contact form
 */
function lbd_contact_form_validate($form, &$form_state) { 
  $valid_email = $form_state['values']['email'];
  $confirmed_email = $form_state['values']['confirm-email'];
  if (!valid_email_address($valid_email)) {
    form_set_error('email', 'Sorry. Your email address,' . $valid_email . ', is not valid. Please submit a valid E-mail address.');
  }
  if ($valid_email != $confirmed_email) {
    form_set_error('confirm-email', 'Please make sure that your confirmation email is correct.');
  }
}


/**
 * Submits the contact form
 */
function lbd_contact_form_submit($form, &$form_state) {
  $valid_email = $form_state['values']['email'];
  $message = $form_state['values']['message'];
  $reasons = _contact_reasons();
  $reasons_summary = _contact_reasons_summary();
  global $language;
  $params = array();

  // Send an email to the user who submitted the form
  $langCode = $language->language;
  if(!file_exists(_path_to_email_template($langCode) . "contact_form_submitted_subject-" . $langCode . ".email")) 
    $langCode = 'en';

  $subjectFileName = _path_to_email_template($langCode) . "contact_form_submitted_subject-" . $langCode . ".email";
  $bodyFileName = _path_to_email_template($langCode) . "contact_form_submitted_body-" . $langCode . ".email";
  $subjectTemplate = file_get_contents($subjectFileName);
  $bodyTemplate = file_get_contents($bodyFileName);
  $subject = $subjectTemplate;

  $params["NOTTYPE"] = "contact_form_submitted";
  $params["MESSAGE"] = $message;
  $params["CONTACT_EMAIL"] = variable_get('site_mail', '');
  $body = $bodyTemplate;
  _body_do_parameters($params, $body);

  $email_params = array();
  $email_params['type'] = "CONTACT_FORM_USER";
  $email_params['to'] = $valid_email;
  $email_params['subject'] = $subject;
  $email_params['body'] = $body;
  lbd_communicate_mail_send($email_params);

  // Send an email to the superhub user in charge of the user's country/region
  $country_codes = array_keys(location_get_iso3166_list());
  $country_code = $country_codes[$form_state['values']['country']];
  $country = labdoo_country_code2name($country_code); 
  $reason_code = $form_state['values']['reason'];
  $campaign = $form_state['values']['campaign'];

  // Forwarding email based on country:
  // (Note: In production, set email addresses here to the correct values.
  //  We commit this to git only for convenience.)
  $country2shub_email = array(
      "Germany" => "contact-D@Labdoo.org",
      "United States" => "wendy.lu@labdoo.org, new-york-hub@labdoo.org", 
      "Switzerland" => "zuerich-hub@labdoo.org", 
      "Taiwan" => "wendy.lu@labdoo.org",
      "Austria" => "Salzburg-Hub@Labdoo.org"
  );

  // Forwarding email based on city
  $city2shub_email = array(
      // Make sure these are lower case city names
      // TODO: This should really use regular expressions to help reduce the number of entries;
      //       for now this is ok but if we need to scale this up consider using regexes.
      "madrid" => "cesar.seoane@labdoo.org, andres.martin@labdoo.org",
      "new york" => "new-york-hub@labdoo.org",
      "new york city" => "new-york-hub@labdoo.org",
      "ny" => "new-york-hub@labdoo.org",
      "nyc" => "new-york-hub@labdoo.org",
      "manhattan, new york" => "new-york-hub@labdoo.org",
      "queens, new york" => "new-york-hub@labdoo.org",
      "brooklyn, new york" => "new-york-hub@labdoo.org",
      "bronx, new york" => "new-york-hub@labdoo.org",
      "staten island, new york" => "new-york-hub@labdoo.org",
      "nj" => "new-york-hub@labdoo.org",
      "new jersey" => "new-york-hub@labdoo.org"
  );

  // Forwardind email for fall back case (none of the above cases)
//  $world_emails_pool = array('jordi.hernandez@labdoo.org', 'eulalia.picas@labdoo.org', 'pedro.tort@labdoo.org', 'maite.fortino@labdoo.org', 'hontangas@labdoo.org');
  $world_emails_pool = array('jordi.hernandez@labdoo.org', 'eulalia.picas@labdoo.org', 'maite.fortino@labdoo.org');
//  $world_emails_pool = array('jordi.hernandez@labdoo.org', 'eulalia.picas@labdoo.org', 'pedro.tort@labdoo.org');

  if(array_key_exists($country, $country2shub_email)) {
    $to_emails = $country2shub_email[$country];
  }
  else {
    // Rest of the world. Do round robin based on the pool of volunteers in $world_emails_pool.
    // Keep it simple, and select emails randomly
    $to_emails = $world_emails_pool[time() % sizeof($world_emails_pool)]; 
  }

  $city_lowcase = strtolower($form_state['values']['city']);
  if(array_key_exists($city_lowcase, $city2shub_email))
    $to_emails = $city2shub_email[$city_lowcase];

  // Send message to superhub managers except for the case of reason = 3
  // (User solicits laptops). In this case, send an email back to requester
  // asking for more information.

  if(($reason_code != 3) || !in_array($to_emails, $world_emails_pool)) {
//  if(1 == 1) { // reason_code != 3) {
    // Send this message always in English
    $subjectFileName = _path_to_email_template("en") . "contact_form_submitted_shub_subject-en.email";
    $bodyFileName = _path_to_email_template("en") . "contact_form_submitted_shub_body-en.email";
    $subjectTemplate = file_get_contents($subjectFileName);
    $bodyTemplate = file_get_contents($bodyFileName);
    $subject = str_replace("[COUNTRY]", $country, $subjectTemplate);
    $subject = str_replace("[REASON]", $reasons_summary[$form_state['values']['reason']], $subject);
    $body = str_replace("[USERNAME]", $form_state['values']['name'], $bodyTemplate);
    $body = str_replace("[USEREMAIL]", $valid_email, $body);
    $body = str_replace("[COUNTRY]", $country, $body);
    $body = str_replace("[CITY]", $form_state['values']['city'], $body);
    $body = str_replace("[REASON]", $reasons[$form_state['values']['reason']], $body);
    $body = str_replace("[MESSAGE]", $message, $body);
    $body = str_replace("[CONTACT_EMAIL]", variable_get('site_mail', ''), $body);
    $body = str_replace("[CAMPAIGN]", $campaign, $body);

    $email_params['type'] = "CONTACT_FORM_SUPERHUB";
    $email_params['to'] = "contact@labdoo.org," . $to_emails;
    $email_params['subject'] = $subject;
    $email_params['body'] = $body;
    lbd_communicate_mail_send($email_params);
  }
  else {
//  if (1 == 1) {
    if(!file_exists(_path_to_email_template($langCode) . "edoovillage_need_info_subject-" . $langCode . ".email"))
      $langCode = 'en';

    $subjectFileName = _path_to_email_template($langCode) . "edoovillage_need_info_subject-" . $langCode . ".email";
    $bodyFileName = _path_to_email_template($langCode) . "edoovillage_need_info_body-" . $langCode . ".email";
    $subjectTemplate = file_get_contents($subjectFileName);
    $bodyTemplate = file_get_contents($bodyFileName);
    $subject = $subjectTemplate;
    $body = $bodyTemplate;

    $params["NOTTYPE"] = "edoovillage_need_info";
    $params["CONTACT_EMAIL_RESPONDER"] = $to_emails; 
    _body_do_parameters($params, $body);

    $email_params = array();
    $email_params['type'] = "EDOOVILLAGE_NEED_INFO";
    $email_params['to'] = "contact@labdoo.org," . $valid_email . "," . $to_emails;
//    $email_params['to'] = "jordi.ros@labdoo.org";
    $email_params['subject'] = $subject;
    $email_params['body'] = $body;
    lbd_communicate_mail_send($email_params);
  }
 
  // Redirect to thank you page.
  // Generate a unique URL according to country and reason so it can be used by engines like Google adwords.
  $urls_redirect = _contact_urls_redirect();

  // Because Google analytics only provides 20 different transitions per account, 
  // we limit the number of possible transitions by not including the reason code.
  // So we only include the country code and therefore we only allow one transition 
  // per country. Hence the next line is commented out.
  // $url_code = $country_code.$reason_code;
  $url_code = $country_code;

  if(in_array($url_code, $urls_redirect))
    $form_state['redirect'] = '/../content/thank-you-'.$url_code;
  else  // There is no matching code, so just forward to the default thank you page.
    $form_state['redirect'] = 'content/thank-you';
  return;
}


/*
 * Resolve all the parameters in a message body
 *
 * @params $params An array with the key-value pairs needed to resolve the parameters 
 * @params $body The message body
 * 
 */
function _body_do_parameters($params, &$body) {
  // Please add new fields to this array whenever a new
  // language is added to the list of supported languages 
  // in labdoo/translations/email-files
  $supportedLanguages = array("ca" => "Catalan", 
                              "zh-hant" => "Chinese",
                              "de" => "Deutsch", 
                              "en" => "English", 
                              "fr" => "French", 
                              "nl" => "Nederlands", 
                              "es" => "Spanish");

  // Build first the language switchers on the header of the email

  // All parameters are part of the hyperlink for each language switch
  $urlParameters = "?" . drupal_http_build_query($params);

  $htmlCode  = "<hr/>" . t("View this message in other languages:");
  $htmlCode .= "<br/>";

  // Build each language switcher
  foreach($supportedLanguages as $code => $language) {
    $urlParameters .= "&" . "language" . "=" . $code;
    $htmlCode .= "<a href='https://platform.labdoo.org/content/notification-email$urlParameters'>$language</a> | "; 
  }
  $htmlCode = substr($htmlCode, 0, -2);
  $htmlCode .= "<hr/>";

  $body = str_replace("[LANGUAGE_MENU]", $htmlCode, $body);

  // Replace the rest of parameters found in the email body
  foreach($params as $key => $value) {
    $body = str_replace("[" . $key . "]", $value, $body);
  }
  return;
}


/**
 * Print an email notification. This is used in the page
 * https://platform.labdoo.org/content/notification-email 
 *
 */
function lbd_communicate_print_notification_email() {
  $params = drupal_get_query_parameters();

  if(!array_key_exists("NOTTYPE", $params)) {
    drupal_set_message(t("Missing notification type"));
    return;
  }

  $langCode = "";
  if(array_key_exists("language", $params)) 
    $langCode = $params["language"];
  if(!file_exists(_path_to_email_template($langCode) . $params["NOTTYPE"] . "_subject-" . $langCode . ".email")) 
    $langCode = 'en';

  if(!file_exists(_path_to_email_template($langCode) . $params["NOTTYPE"] . "_subject-" . $langCode . ".email")) { 
     drupal_set_message("Incorrect notification type");
    return;
  }

  $subjectFileName = _path_to_email_template($langCode) . $params["NOTTYPE"] . "_subject-" . $langCode . ".email";
  $bodyFileName = _path_to_email_template($langCode) . $params["NOTTYPE"] . "_body-" . $langCode . ".email";
  $subject = file_get_contents($subjectFileName);
  $body = file_get_contents($bodyFileName);

  foreach($params as $key => $value) 
    $subject = str_replace("[" . $key . "]", $value, $subject);
  _body_do_parameters($params, $body);

  print(nl2br('<strong><font size="4" color="gray">' . $subject . "</font></strong><br/>"));
  print(nl2br($body));

  return;
}

