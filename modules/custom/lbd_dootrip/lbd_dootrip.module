<?php

/**
 * @defgroup labdoodootrip LabdooDootrip: Module implementing Labdoo's Dootrip System
 *
 * This module implements the Labdoo Dootrip System
 *
 */


/**
 * @file
 * Main module file for the Labdoo Dootrip module 
 *
 * @ingroup labdoodootrip
 *
 */

/**
 * Given a source node and linked field in it, update the corresponding destination 
 * field. A linked field in a source node is herein understood as an entity 
 * field linked to other nodes (called the destination nodes) which in turn
 * have an entity field linked back to the source node. An example of such type of
 * relationships are the dootrip and dooject fields found in the dooject and dootrip 
 * node types, respectively.
 *
 * @param node $node
 *   The source node
 * @param string $src_field
 *   The linked field in the source node
 * @param string $dst_field
 *   The linked field in the destination node
 * @param string $src_name
 *   A user friendly name for the source field
 * @param string $dst_name
 *   A user friendly name for the destination field
 * @param boolean $new
 *   True if the node was newly created, false otherwise
 */
function _update_linked_nodes($node, $src_field, $dst_field, $src_name, $dst_name, $new=FALSE) {

  // If this call comes from a node view path (see function lbd_dootrip_node_view),
  // skip the rest of work.
  if(array_key_exists('content', $node)) 
    return;

  $dstListNew = field_get_items('node', $node, $src_field);

  if($new) {
    $dstListOld = array();
  }
  else {
    $dstListOld = field_get_items('node', $node->original, $src_field);
  }

  if($dstListNew == $dstListOld)
    return; 

  // Try to add this source to the destinations:
  // For each dst added by the newly submitted form, if
  // this src is not assigned to such dst, then assign it.
  foreach($dstListNew as $key => $dstNode) {
    $dstLoaded = node_load($dstNode['target_id']);
    $wDstNode = entity_metadata_wrapper('node', $dstLoaded);
    $srcList = $wDstNode->$dst_field->value();
    if(!$srcList) 
      $srcList = array();
    $addIt = True;
    if(!$new) {
      foreach($srcList as $key => $srcNode) {
        if($srcNode->nid == $node->nid) {
          $addIt = FALSE;
          break;
        }
      }      
    }
    if($addIt) {
      drupal_set_message("The " . $src_name . " '" . $node->title . "'  was added to the " . $dst_name . " '" . $dstLoaded->title . "'", 'status', FALSE);
      $srcList[] = $node;
      $wDstNode->$dst_field->set($srcList);
      field_attach_update('node', $dstLoaded);
    }
  }

  // Try to remove this source from the destinations:
  // For each dst removed by the newly submitted form, if
  // this src is assigned to such dst, then unassign it.
  if(!$new && !empty($dstListOld)) { 
    foreach($dstListOld as $key => $dstNode) {

      if(in_array($dstNode, $dstListNew))
        continue;      

      $dstLoaded = node_load($dstNode['target_id']);
      if(!$dstLoaded) // Destination node no longer exists (it was probably removed)
        continue;

      $wDstNode = entity_metadata_wrapper('node', $dstLoaded);
      $srcList = $wDstNode->$dst_field->value();
      if(!$srcList)
        continue;

      foreach($srcList as $key => $srcNode) {
        if($srcNode->nid == $node->nid) {
          unset($srcList[$key]);
          drupal_set_message("The " . $src_name . " '" . $node->title . "'  was removed from the " . $dst_name . " '" . $dstLoaded->title . "'", 'status', FALSE);
          $wDstNode->$dst_field->set($srcList);
          field_attach_update('node', $dstLoaded);
        }
      }
    }
  }

  return;
}


/**
 * Implementation of hook_node_update
 *
 * Note: the calling of _update_linked_nodes would generate an infinite loop
 * if they were implemented in the hook_node_presave.
 *
 */
function lbd_dootrip_node_update($node) {

  if($node->type == 'laptop') 
    _update_linked_nodes($node, 'field_dootrips', 'field_laptops', 'dootronic', 'dootrip', FALSE); 

  if($node->type == 'dootrip') 
    _update_linked_nodes($node, 'field_laptops', 'field_dootrips', 'dootrip', 'dootronic', FALSE); 

  return;
}


/**
 * Implementation of hook_node_insert
 *
 */
function lbd_dootrip_node_insert($node) {

  if($node->type == 'laptop') 
    _update_linked_nodes($node, 'field_dootrips', 'field_laptops', 'dootronic', 'dootrip', TRUE); 

  if($node->type == 'dootrip') 
    _update_linked_nodes($node, 'field_laptops', 'field_dootrips', 'dootrip', 'dootronic', TRUE); 

  return;
}


/**
 * labdoo_calculate_dootrip_weight
 *
 * @param node $node
 *   A dootrip node
 * @return A message indicating the weight of all the doojects associated with the dootrip
 *
 */
function labdoo_calculate_dootrip_weight($node) {
  $weight = 0;
  $suffix = "";
  $prefix = "";

  $wNode = entity_metadata_wrapper('node', $node);
  $doojectsList = $wNode->field_laptops->value();
  if(!$doojectsList) {
    return t("No dootronics linked to this dootrip yet");
  }

  foreach($doojectsList as $doojectNode) {
    if(!key_exists('nid', $doojectNode))
      continue;
    $doojectLoaded = node_load($doojectNode->nid);
    $wDoojectLoaded = entity_metadata_wrapper('node', $doojectLoaded);
    $doojectWeight = $wDoojectLoaded->field_dooject_weight->value();
    if(!$doojectWeight) {
      $suffix = t("More than ");
      $prefix = t(" (Please update the weight field in all the doojects for an accurate weight estimation)");
      continue;
    }
    $weight = $weight + $doojectWeight;
  }

  if($weight == 0) 
    return t("Please update the weight of each individual dootronic");
  else
    return t($suffix . $weight . " Kgms" . $prefix);
}


/**
 * Calculates the great-circle distance between two points, with
 * the Vincenty formula.
 * @param float $latitudeFrom Latitude of start point in [deg decimal]
 * @param float $longitudeFrom Longitude of start point in [deg decimal]
 * @param float $latitudeTo Latitude of target point in [deg decimal]
 * @param float $longitudeTo Longitude of target point in [deg decimal]
 * @param float $earthRadius Mean earth radius in [m]
 * @return float Distance between points in [m] (same as earthRadius)
 */
function _vincentyGreatCircleDistance($latitudeFrom, 
                                      $longitudeFrom, 
                                      $latitudeTo, 
                                      $longitudeTo, 
                                      $earthRadius = 6371000) {
  // convert from degrees to radians
  $latFrom = deg2rad($latitudeFrom);
  $lonFrom = deg2rad($longitudeFrom);
  $latTo = deg2rad($latitudeTo);
  $lonTo = deg2rad($longitudeTo);

  $lonDelta = $lonTo - $lonFrom;
  $a = pow(cos($latTo) * sin($lonDelta), 2) +
    pow(cos($latFrom) * sin($latTo) - sin($latFrom) * cos($latTo) * cos($lonDelta), 2);
  $b = sin($latFrom) * sin($latTo) + cos($latFrom) * cos($latTo) * cos($lonDelta);

  $angle = atan2(sqrt($a), $b);
  return $angle * $earthRadius;
}


/**
 * _calculate_dootrip_distance
 *
 * @param node $node
 *   A dootrip node
 * @return The traveling distance of the dootrip in Kms
 *
 */
function _calculate_dootrip_distance($node) {
  $srcLat = "";
  $srcLon = "";
  $dstLat = "";
  $dstLon = "";

  $srcCity = labdoo_lib_get_field($node, 'field_origin_of_the_trip', 'node', 'city'); 
  $srcCity = preg_replace('/\s+/', '%20', $srcCity);
  $srcCountry = labdoo_lib_get_field($node, 'field_origin_of_the_trip', 'node', 'country'); 
  $srcCountryLong = labdoo_country_code2name($srcCountry);

  $dstCity = labdoo_lib_get_field($node, 'field_destination_of_the_trip', 'node', 'city'); 
  $dstCity = preg_replace('/\s+/', '%20', $dstCity);
  $dstCountry = labdoo_lib_get_field($node, 'field_destination_of_the_trip', 'node', 'country'); 
  $dstCountryLong = labdoo_country_code2name($dstCountry);

  if(labdoo_lookup_coordinates($srcCountry, $srcCity, $srcLat, $srcLon) < 0) 
    return t("[Not available this time, try again later]");
  if(labdoo_lookup_coordinates($dstCountry, $dstCity, $dstLat, $dstLon) < 0) 
    return t("[Not available this time, try again later]");

  $distKms = round(_vincentyGreatCircleDistance($srcLat, $srcLon, $dstLat, $dstLon)/1000);
  return $distKms;
}


/**
 * labdoo_calculate_dootrip_distance
 *
 * @param node $node
 *   A dootrip node
 * @return A message indicating the traveling distance of the dootrip
 *
 */
function labdoo_calculate_dootrip_distance($node) {
  return(strval(_calculate_dootrip_distance($node)) . " Kms");
}


/**
 * labdoo_calculate_dootrip_co2_savings
 *
 * @param node $node
 *   A dootrip node
 * @return A message indicating the amount of CO2 emissions saved thanks to the dootrip
 *
 */
function labdoo_calculate_dootrip_co2_savings($node) {
  $dootronicWeightKgms = 2.5; // The dootronic weight field is not mandatory, so assume here a reasonable value
  $CO2gramsPerKgmPerKm = 0.5; // See http://timeforchange.org/co2-emissions-shipping-goods 
  $numDootronics = 1;         // If no dootronics assigned, use the smallest number

  $dootronics = field_get_items('node', $node, 'field_laptops');
  if(!empty($dootronics))
    $numDootronics = count($dootronics);

  $dootrip_distance = _calculate_dootrip_distance($node);
  if(!is_numeric($dootrip_distance))
    $dootrip_distance = 0;

  $co2SavingsKgms = round($CO2gramsPerKgmPerKm * 
                          $numDootronics * 
                          $dootronicWeightKgms *
                          $dootrip_distance / 1000, 1); 

  if ($numDootronics == 1)
    return(strval($co2SavingsKgms) . t(" Kgms of CO2 emissions will be saved assuming one laptop is transported"));
  return(strval($co2SavingsKgms) . t(" Kgms of CO2 emissions saved"));
}


/*
 * Implementation of hook_node_view
 *
 */
function lbd_dootrip_node_view($node, $view_mode) {

  // The field 'field_dootrip_weight' is a computed type field
  // that depends on values from other nodes' fields. Due to a limitation
  // of the computed_field module, this type of depencies don't get
  // correctly updated. To force an update, we clean the field cache 
  // Note: instead of cleaning the cache (which slows performance), we opt
  // for just resaving this node, which effectively forces the update.
  if($node->type == 'dootrip') 
    node_save($node);
//    field_cache_clear();
  return;
}

