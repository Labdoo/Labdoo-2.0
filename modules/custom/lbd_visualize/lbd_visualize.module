<?php

/**
 * @defgroup labdoovisualize LabdooVisualize: Set of dashboards and displays to help visualize Labdoo data
 *
 * This module provides the Labdoo's dashboards and the set of displays to help organize and visualize data.
 *
 * Design principle: module towards enabling transparency, opennes of data and ease of management.
 *
 */


/**
 * @file
 * Main file for the Labdoo Visualization module
 *
 * @ingroup labdoovisualize 
 *
 */


/*
 * Sanitizes a string so it can be visualized in the dashboards
 *
 * @param unsanitizedText The input string
 *
 * @return The sanitized string
 * 
 */
function sanitizeStringForVisualization($unsanitizedText) {
    $sanitizedText = str_replace('"', "'", $unsanitizedText); 
    $sanitizedText = preg_replace( "/\r|\n/", "", $sanitizedText);
    return $sanitizedText;
}


/* 
 * Structure of the following code: 
 *
 *  lbd_display_dashboard_doojects     |=> Functions that select from the database the
 *  lbd_display_dashboard_edoovillages |   objects that must be displayed. They end up
 *  lbd_display_dashboard_hubs         |   calling print_dashboard_switcher and 
 *  lbd_display_dashboard_dootrips     |   print_dashboard_objects to display the results. 
 *
 *  print_dashboard_switcher           |=> Displays a switcher to select type of object
 *  print_dashboard_objects            |=> Prints the actual dashboard
 *
 *  The four lbd_display_* functions (one for each Labdoo object) take (among others)
 *  the user ID as argument, allowing them to generate "myObject" type of dashboards. 
 */

/*
 * Cache implementation:
 *
 *  In order to scale up the computation of the dashboard (as the number of objects increase),
 *  the code incorporates a cache. The cache stores results for both geolocation maps and 
 *  tables and is indexed across all possible dimensions of the dashboards: users, doojects,
 *  dootrips, hubs, edoovillages.
 *
 *  To see the current status of the cache, run the following db command:
 *    mysql> SELECT cid FROM cache WHERE cid LIKE '%lbd_visualization%';
 *  To clean the cash, run the following drush command:
 *    # drush php-eval "cache_clear_all('lbd_visualization', 'cache', TRUE);" 
 *
 */

/**
 * Displays a dashboard of doojects
 * 
 * @param userId Identifier of the user or NULL for all users
 * @param hubId Identifier of a hub or NULL for all hubs 
 * @param edoovillageId Identifier of the edoovillage or NULL for all edoovillages
 * @param country Country in which the doojects reside or NULL for all countries 
 * @param switcher If TRUE, display the switcher; otherwise, don't display it
 * @param $justCache If TRUE, only update the cache and do not display the dashboard
 *
 * @return A dashboard of the doojects 
 *
 */
function lbd_display_dashboard_doojects($userId = NULL, $hubId = NULL, $edoovillageId = NULL, $country = NULL, $switcher = TRUE, $justCache = FALSE) {
  // Maximum number of objects to refresh at each call of this functions.
  // This limit is needed to avoid memory exhaustion.
  $MAX_NUM_OBJECTS = 5000; 
  // Personalized dashboards are marked as volatile, so the cache refresher run by cron can easily differentiate them.
  // The cache for this type of dashboards is usually smaller, and it's ok to simply clean them up periodically and have users
  // recompute them upon viewing them. The other caches (the general ones not marked as volatile), take a long time to 
  // compute so we need to recompute them in the background (via cron) so the user does not experience large latency.
  if($userId != NULL || $hubId != NULL || $edoovillageId != NULL || $country != NULL)
    $volatileString = 'volatile_';
  else
    $volatileString = '';
  $cacheIndexPrefix = 'lbd_visualization_dooject_' . $volatileString . 'u' . $userId . 'h' . $hubId . 'e' . $edoovillageId . 'c' . $country . '_';
  // Fast path: first check the cache
  if(!$justCache && ($cache = cache_get($cacheIndexPrefix . '0_' . 'objects'))) {
    $cache = cache_get($cacheIndexPrefix . 'metrics'); // The metrics section is not batched
    $metrics = $cache->data;
    $batch_id = 0;
    // Now pull all the batches
    $objects = array();
    $selectedNids = array();
    while(($cache = cache_get($cacheIndexPrefix . $batch_id . '_' . 'objects'))) {
      $objects = $objects + $cache->data;
      $cache = cache_get($cacheIndexPrefix . $batch_id . '_' . 'selected_nids');
      $selectedNids = array_merge($selectedNids, $cache->data);
      $batch_id = $batch_id + 1;
    }

  }

  else {

    // Get the batch ID that identifies the subset of dootronics we
    // need to process in this call
    if(!($cache = cache_get($cacheIndexPrefix . 'batch_id'))) {
      // If it has been deleted from the cache, start from zero
      cache_set($cacheIndexPrefix . 'batch_id', "0", 'cache');
      $batch_id = "0";
    }  
    else {
      $cache = cache_get($cacheIndexPrefix . 'batch_id');
      $batch_id = $cache->data;
    }
 
    global $language;
    $defaultLanguage = language_default();
    $defaultLanguageCode = $defaultLanguage->language;

    $possibleStates = array('S0', 'S1', 'S2',  'S3', 'S4', 'S5', 'S6', 'S7', 'S8', 'S9', 'T1', 'T2');

    $numberOfQueries = 1;
    $queryAll = "(SELECT entity_id FROM field_data_field_tagger)";
    $query = "SELECT t.entity_id FROM (" . $queryAll;
    $placeHolders = array();

    if($userId != NULL)
    {
      $queryUser = "(SELECT tUser.entity_id FROM 
                     (SELECT entity_id FROM field_data_field_tagger WHERE (field_tagger_target_id=:uid) 
                      UNION
                      SELECT entity_id FROM field_data_field_manager WHERE (field_manager_target_id=:uid)
                      UNION
                      SELECT entity_id FROM field_data_field_additional_editors WHERE (field_additional_editors_target_id=:uid) 
                      UNION
                      SELECT entity_id FROM field_data_field_additional_followers WHERE (field_additional_followers_target_id=:uid)
                     )
                    AS tUser)";
      $query = $query . " UNION ALL " . $queryUser;
      $placeHolders[':uid'] = $userId; 
      $numberOfQueries++;
    }
    if($hubId != NULL) 
    {
      $queryHub = "(SELECT entity_id FROM field_data_field_hub_laptop WHERE (field_hub_laptop_target_id=:hid))";
      $query = $query . " UNION ALL " . $queryHub;
      $placeHolders[':hid'] = $hubId; 
      $numberOfQueries++;
    }
    if($edoovillageId != NULL)
    {
      // By using "IN ($edoovillageId)" below, this supports seeing all dootronics assigned to a *list* of edoovillages.
      // This subtle feature was added to help visualize dootronics during the Covid-19 crisis.
      // Example querying for 3 edoovillages: https://www.labdoo.org/content/dootronics-dashboard?e=92941,92953,92958
      // Note that this does not really use the $placeHolders array and it directly adds $edoovillageId to the query below.
      // Somehow it was not picking it up using $placeHolders, possibly a string representation issue. Left for future
      // debugging due to lack of time.
      $queryEdoovillage = "(SELECT entity_id FROM field_data_field_edoovillage_destination WHERE (field_edoovillage_destination_target_id IN ($edoovillageId)))";
      $query = $query . " UNION ALL " . $queryEdoovillage;
      $placeHolders[':eid'] = $edoovillageId; 
      $numberOfQueries++;
    }
    if($country != NULL)
    {
      $queryCountry = "(SELECT nid AS entity_id FROM location_instance 
                        WHERE lid IN (SELECT lid FROM location WHERE country=:co) 
                        AND nid IN (SELECT entity_id FROM field_data_field_tagger))";
      $query = $query . " UNION ALL " . $queryCountry;
      $placeHolders[':co'] = $country; 
      $numberOfQueries++;
    } 

    $query = $query . ") AS t GROUP BY entity_id HAVING count(*) >= " . $numberOfQueries . " ORDER BY t.entity_id DESC";

    $result = db_query($query, $placeHolders);

    $objects = array();
    $selectedNids = array();

    // Compute the range of objects we need to process in this call
    $range_min = $batch_id * $MAX_NUM_OBJECTS + 1;
    $range_max = ($batch_id + 1) * $MAX_NUM_OBJECTS;
    $current_object_num = 0;

    $limitCounter = 200000000;
    foreach($result as $item) {

      $current_object_num = $current_object_num + 1;
      if($current_object_num < $range_min || $current_object_num > $range_max) 
	continue;

      if($limitCounter-- == 0)
        break;

      $objectNid = $item->entity_id;
      array_push($selectedNids, $objectNid);

      $node = node_load($item->entity_id);

      // Continue if ID not within requested boundaries
      // Query example: https://www.labdoo.org/content/dootronics-dashboard?e=93145,1457&minID=22000&maxID=23000
      $intID = (int)$node->title; 
      if(!empty($_GET['minID'])) { 
        $minID = (int)$_GET['minID'];
        if ($intID < $minID) {
            continue;
        }
      }
      if(!empty($_GET['maxID'])) { 
        $maxID = (int)$_GET['maxID'];
        if ($intID > $maxID) {
            continue;
        }
      }

      // Extract Labdoo ID 
      $objects[$objectNid]['ID'] = $node->title; 


      // Extract Hub Field 
      $hubsList = labdoo_lib_get_field_all($node, 'field_hub_laptop', 'node', 'target_id');
      $hubsListStr = "";
      foreach($hubsList as $hubNodeId) { 
        $hubsListStr .= lbd_nodeid2title($hubNodeId) . " | ";
      }
      $objects[$objectNid]['hub'] = substr($hubsListStr, 0, -3);

      // Extract Edoovillage Field 
      $edoovillageNodeId = labdoo_lib_get_field($node, 'field_edoovillage_destination', 'node', 'target_id');
      if(!empty($node->field_edoovillage_destination)) 
        $objects[$objectNid]['edoovillage'] = lbd_nodeid2title($edoovillageNodeId); 
      else
        $objects[$objectNid]['edoovillage'] = "";

      // Extract Status Field 
      $objects[$objectNid]['status'] = $objectstatus = labdoo_lib_get_field($node, 'field_status', 'node', 'value');

      // Extract Notes Field 
      if(!empty($node->field_additional_notes)) 
        $objects[$objectNid]['notes'] = labdoo_lib_get_field($node, 'field_additional_notes', 'node', 'value'); 
      else
        $objects[$objectNid]['notes'] = "";

      // Extract Tagger Field 
      $query = "SELECT name FROM users WHERE uid = " . labdoo_lib_get_field($node, 'field_tagger', 'node', 'target_id');
      $objects[$objectNid]['tagger'] = db_query($query)->fetchField(); 

      // Extract Manager Field 
      $managerUid = labdoo_lib_get_field($node, 'field_manager', 'node', 'target_id');
      if($managerUid) {
          $query = "SELECT name FROM users WHERE uid = " . $managerUid;
          $objects[$objectNid]['manager'] = db_query($query)->fetchField(); 
      }
      else {
          watchdog("lbd_visualize", "Laptop " . $node->title . " does not have a manager associated with it.", NULL, WATCHDOG_ERROR);
          $objects[$objectNid]['manager'] = "";
      }

      // Extract email list field 
      $objects[$objectNid]['emails'] = "";
      if(!empty($node->field_additional_notification_em)) 
        foreach(field_get_items('node', $node, 'field_additional_notification_em') as $item)
          $objects[$objectNid]['emails'] = $objects[$objectNid]['emails'] . " " . $item['email'];

      // Extract the country 
      $country_names = location_get_iso3166_list();
      $objects[$objectNid]['country'] = $node->location['country'];
      if(array_key_exists($node->location['country'], $country_names))
          $objects[$objectNid]['country'] = $country_names[$node->location['country']];

      // Extract the serial number 
      $objects[$objectNid]['serialNumber'] = labdoo_lib_get_field($node, 'field_serial_number', 'node', 'value'); 

      // Pick me up flag
      if(labdoo_lib_get_field($node, 'field_pick_me_up', 'node', 'value') == 1)
        $objects[$objectNid]['pickMeUp'] = 'yes';
      else 
        $objects[$objectNid]['pickMeUp'] = 'no';

      // Dootrips field 
      $dootripsFieldList = field_get_items('node', $node, 'field_dootrips'); 
      $objects[$objectNid]['dootripId'] = "";
      if(!empty($dootripsFieldList)) {
        $dootripsStrList = "";
        foreach($dootripsFieldList as $key => $dootripNode) {
          $dootripNodeId = $dootripNode['target_id'];
          $dootripsStrList .= "#" . lbd_extract_dootrip_id(lbd_nodeid2title($dootripNodeId)) . " ";
        }
        $objects[$objectNid]['dootripId'] = substr($dootripsStrList, 0, -1);
      }

      // Extract Model Field 
      $objects[$objectNid]['model'] = labdoo_lib_get_field($node, 'field_model', 'node', 'value');

      // Extract creation date
      $objects[$objectNid]['createdDate'] = format_date($node->created, 'custom', 'Y-m-d');

      // Extract Watt-hours
      $volts = labdoo_lib_get_field($node, 'field_volts', 'node', 'value');
      $mAh = labdoo_lib_get_field($node, 'field_amp_hours', 'node', 'value');
      $objects[$objectNid]['Wh'] = $volts * $mAh / 1000; 

      // Calculate the link to the object 
      $urlPath = drupal_get_path_alias("node/" . $objectNid, $language->language); 
      if($language->language != $defaultLanguageCode)
        $urlPath = $language->language . "/" . $urlPath;
      $objects[$objectNid]['link'] = "<!--$node->title (comment added to help alphabetically order this column)-->" . 
                                     "<a href=/$urlPath>$node->title</a>";

      // Mark the state so we can perform counting operations
      foreach($possibleStates as $thisState)
        $objects[$objectNid][$thisState] = ($objectstatus == $thisState ? 1 : 0);

    }

    $metrics[0] = array('label' => 'Labdoo ID', 'field' => 'link', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
    $metrics[1] = array('label' => 'Status', 'field' => 'status', 'aggregate' => 'no', 'picker' => 'yes', 'menu' => "yes", 'slider' => "no");
    $metrics[2] = array('label' => 'Hub', 'field' => 'hub', 'aggregate' => 'no', 'picker' => 'yes', 'menu' => "yes", 'slider' => "no");
    $metrics[3] = array('label' => 'Edoovillage', 'field' => 'edoovillage', 'aggregate' => 'no', 'picker' => 'yes', 'menu' => "yes", 'slider' => "no");
    $metrics[4] = array('label' => 'Country', 'field' => 'country', 'aggregate' => 'no', 'picker' => 'yes', 'menu' => "yes", 'slider' => "no");
    $metrics[5] = array('label' => 'Serial number', 'field' => 'serialNumber', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
    $metrics[6] = array('label' => 'Pick me up', 'field' => 'pickMeUp', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
    $metrics[7] = array('label' => 'Model', 'field' => 'model', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
    $metrics[8] = array('label' => 'Date created', 'field' => 'createdDate', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
    $metrics[9] = array('label' => 'Wh', 'field' => 'Wh', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
    $metrics[10] = array('label' => 'Dootrips', 'field' => 'dootripId', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
    $metrics[11] = array('label' => 'Notes', 'field' => 'notes', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
    $metrics[12] = array('label' => 'S0 - tagged', 'field' => 'S0', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
    $metrics[13] = array('label' => 'S1 - donated', 'field' => 'S1', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
    $metrics[14] = array('label' => 'S2 - sanitized', 'field' => 'S2', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
    $metrics[15] = array('label' => 'S3 - assigned', 'field' => 'S3', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
    $metrics[16] = array('label' => 'T1 - in transit', 'field' => 'T1', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
    $metrics[17] = array('label' => 'S4 - deployed', 'field' => 'S4', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
    $metrics[18] = array('label' => 'S5 - needs recycle', 'field' => 'S5', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
    $metrics[19] = array('label' => 'S6 - recycled', 'field' => 'S6', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "no", 'slider' => "no");

    if(empty($objects)) {

      $objects[0]['edoovillage'] = ""; 
      $objects[0]['hub'] = "";
      $objects[0]['status'] = "";
      $objects[0]['country'] = "";
      $objects[0]['serialNumber'] = ""; 
      $objects[0]['pickMeUp'] = ""; 
      $objects[0]['model'] = ""; 
      $objects[0]['createdDate'] = ""; 
      $objects[0]['Wh'] = ""; 
      $objects[0]['notes'] = ""; 
      $objects[0]['dootripId'] = ""; 
      $objects[0]['link'] = "No dootronics in this view"; 
      $objects[0]['completed'] = $objects[0]['open'] = 0; 
      foreach($possibleStates as $thisState)
      $objects[0][$thisState] = 0;

    }

    // Store results into the cache
    cache_set($cacheIndexPrefix . $batch_id . '_' . 'objects', $objects, 'cache');
    cache_set($cacheIndexPrefix . $batch_id . '_' . 'selected_nids', $selectedNids, 'cache');
    cache_set($cacheIndexPrefix . 'metrics', $metrics, 'cache');  // Metrics descriptions are the same for all batches, so no need to add batch_id

    if($current_object_num <= $range_max) {
      $next_batch_id = "0";
    }
    else {
      $next_batch_id = (string)((int)$batch_id + 1);
    }
    cache_set($cacheIndexPrefix . 'batch_id', $next_batch_id, 'cache');

  }

  if(!$justCache && $switcher)
    print_dashboard_switcher($userId);
  if(!$justCache)
    print_dashboard_objects('laptop', 'dootronics', $objects, $metrics, $selectedNids, $cacheIndexPrefix, $justCache);

}


/**
 * Displays a dashboard of edoovillages
 * 
 * @param userId Identifier of the user or NULL for all users
 * @param hubId Identifier of a hub or NULL for all hubs 
 * @param country Country in which the edoovillages reside or NULL for all countries 
 * @param switcher If TRUE, display the switcher; otherwise, don't display it
 * @param $justCache If TRUE, only update the cache and do not display the dashboard
 *
 * @return A dashboard of the edoovillages 
 *
 */
function lbd_display_dashboard_edoovillages($userId = NULL, $hubId = NULL, $country = NULL, $switcher = TRUE, $justCache = FALSE) {
  if($userId != NULL || $hubId != NULL || $country != NULL)
    $volatileString = 'volatile_';
  else
    $volatileString = '';
  $cacheIndexPrefix = 'lbd_visualization_edoovillage_' . $volatileString . 'u' . $userId . 'h' . $hubId . 'c' . $country . '_';
  if(!$justCache && ($cache = cache_get($cacheIndexPrefix . 'objects'))) {
    $objects = $cache->data;
    $cache = cache_get($cacheIndexPrefix . 'metrics');
    $metrics = $cache->data;
    $cache = cache_get($cacheIndexPrefix . 'selected_nids');
    $selectedNids = $cache->data;
  }

  else {
 
  global $language;
  $defaultLanguage = language_default();
  $defaultLanguageCode = $defaultLanguage->language;

  $numberOfQueries = 1;
  $queryAll = "(SELECT DISTINCT entity_id FROM field_data_field_edoovillage_status)";
  $query = "SELECT t.entity_id FROM (" . $queryAll;
  $placeHolders = array();

  if($hubId != NULL) 
  {
    $queryHub = "(SELECT tHub.entity_id FROM
                   ((SELECT DISTINCT entity_id FROM field_data_field_hub WHERE (field_hub_target_id IN ($hubId) ))
                   UNION
                   (SELECT DISTINCT field_edoovillage_destination_target_id as entity_id FROM field_data_field_edoovillage_destination
                    WHERE entity_id IN (SELECT entity_id FROM field_data_field_hub_laptop
                    WHERE field_hub_laptop_target_id IN ($hubId)) AND field_edoovillage_destination_target_id != 0)) AS tHub)";
    $query = $query . " UNION ALL " . $queryHub;
    $placeHolders[':hid'] = $hubId;
    $numberOfQueries++;
  }
  if($country != NULL)
  {
    $queryCountry = "(SELECT nid AS entity_id FROM location_instance 
                      WHERE lid IN (SELECT lid FROM location WHERE country=:co) 
                      AND nid IN (SELECT entity_id FROM field_data_field_edoovillage_status))";
    $query = $query . " UNION ALL " . $queryCountry;
    $placeHolders[':co'] = $country;
    $numberOfQueries++;
  } 
  if($userId != NULL)
  {
    # First select: query to find all edoovillages connected to a user via a dooject
    # Second select: query to find all edoovillages connected to a user via a dootrip
    # Third select: query to find all edoovillages that the user is managing
    $queryUser = "(SELECT tUser.entity_id FROM 
                   ((SELECT DISTINCT field_edoovillage_destination_target_id AS entity_id FROM field_data_field_edoovillage_destination WHERE 
                     (entity_id IN (SELECT entity_id FROM field_data_field_manager WHERE field_manager_target_id=:uid) OR 
                      entity_id IN (SELECT entity_id FROM field_data_field_tagger WHERE field_tagger_target_id=:uid) OR 
                      entity_id IN (SELECT entity_id FROM field_data_field_additional_followers WHERE field_additional_followers_target_id=:uid) OR 
                      entity_id IN (SELECT entity_id FROM field_data_field_additional_editors WHERE field_additional_editors_target_id=:uid)))
                    UNION
                    (SELECT DISTINCT field_edoovillage_destination_target_id AS entity_id FROM field_data_field_edoovillage_destination WHERE 
                      entity_id IN (SELECT field_laptops_target_id FROM field_data_field_laptops WHERE 
                      entity_id IN (SELECT entity_id FROM field_data_field_dootripper_s_ WHERE field_dootripper_s__target_id=:uid)))
                    UNION
                    (SELECT DISTINCT entity_id FROM field_data_field_project_manager_s_ WHERE field_project_manager_s__target_id=:uid)
                    UNION
                    (SELECT DISTINCT entity_id FROM field_data_field_edoo_additional_editors WHERE field_edoo_additional_editors_target_id=:uid))
                    AS tUser)";
    $query = $query . " UNION ALL " . $queryUser;
    $placeHolders[':uid'] = $userId;
    $numberOfQueries++;
  }

  $query = $query . ") AS t GROUP BY entity_id HAVING count(*) >= " . $numberOfQueries;
  $result = db_query($query, $placeHolders);

  $objects = array();
  $selectedNids = array();

  $limitCounter = 1000000000;
  foreach($result as $item) {

    if($limitCounter-- == 0)
      break;

    $objectNid = $item->entity_id;
    array_push($selectedNids, $objectNid);

    $node = node_load($item->entity_id);

    # TODO: By construction this check is not necessary, but in development
    # mode sometimes entity_id fields can be linked to the wrong
    # node type. For lack of a better solution, we add the check.
    if($node->type != "edoovillage")
      continue;

    // Extract title 
    $objects[$objectNid]['title'] = $node->title; 

    // Extract hubs 
    $objects[$objectNid]['hub'] = "";
    $hubsListStr = "";
    foreach(field_get_items('node', $node, 'field_hub') as $item) {
      $hubNodeId = $item['target_id'];
      $hubsListStr .= lbd_nodeid2title($hubNodeId) . " | ";
    }
    $objects[$objectNid]['hub'] = substr($hubsListStr, 0, -3);

    // Extract needed field 
    $objects[$objectNid]['needed'] = $needed = labdoo_lib_get_field($node, 'field_number_of_laptops_needed', 'node', 'value');

    // Extract intransit field 
    $objects[$objectNid]['intransit'] = $inTransit = labdoo_getnum_doojects($objectNid, NULL, "T1") +
                                                     labdoo_getnum_doojects($objectNid, NULL, "S3");

    // Extract delivered field 
    $objects[$objectNid]['delivered'] = $delivered = labdoo_getnum_doojects($objectNid, NULL, "S4"); 

    // Extract remaining field 
    $remaining = $needed - $inTransit - $delivered;
    if($remaining < 0)
        $remaining = 0;
    $objects[$objectNid]['remaining'] = $remaining; 

    // Extract %completed field 
    if($needed != 0)
        $objects[$objectNid]['pcompleted'] = floor(($needed - $remaining) / $needed * 100.00); 
    else
        $objects[$objectNid]['pcompleted'] = 0;
 
    // Extract number of students
    $objects[$objectNid]['numStudents'] = labdoo_lib_get_field($node, 'field_number_of_students', 'node', 'value'); 
    if(!is_numeric($objects[$objectNid]['numStudents']))
        $objects[$objectNid]['numStudents'] = "0";

    // Extract status field 
    $objects[$objectNid]['status'] = $objectstatus = labdoo_lib_get_field($node, 'field_edoovillage_status', 'node', 'value'); 

    // Extract creation date
    $objects[$objectNid]['createdDate'] = format_date($node->created, 'custom', 'Y-m-d');

    // Extract status field 
    $objects[$objectNid]['semaphore'] = labdoo_lib_get_field($node, 'field_semaphore', 'node', 'value'); 

    // Get the country
    $country_names = location_get_iso3166_list();
    $objects[$objectNid]['country'] = $node->location['country'];
    if(array_key_exists($node->location['country'], $country_names))
        $objects[$objectNid]['country'] = $country_names[$node->location['country']];
        
    $urlPath = drupal_get_path_alias("node/" . $objectNid, $language->language);
    if($language->language != $defaultLanguageCode)
      $urlPath = $language->language . "/" . $urlPath;
    $objects[$objectNid]['link'] = "<!--$node->title (comment added to help alphabetically order this column)-->" . 
                                   "<a href=/$urlPath>$node->title</a>";

    // Mark the state so we can perform counting operations
    $possibleStates = array('completed', 'open');
    foreach($possibleStates as $thisState) {
      $objects[$objectNid][$thisState] = ($objectstatus == $thisState ? 1 : 0);
    }

  }

  if(empty($objects)) {

    $objects[0]['title'] = ""; 
    $objects[0]['hub'] = "";
    $objects[0]['needed'] = "";
    $objects[0]['intransit'] = "";
    $objects[0]['delivered'] = ""; 
    $objects[0]['remaining'] = ""; 
    $objects[0]['pcompleted'] = 0;
    $objects[0]['numStudents'] = "";
    $objects[0]['status'] = "";
    $objects[0]['country'] = "";
    $objects[0]['link'] = "No edoovillages in this view"; 
    $objects[0]['completed'] = $objects[0]['open'] = 0; 
    $objects[0]['createdDate'] = ""; 
    $objects[0]['semaphore'] = ""; 

  }

  $metrics[0] = array('label' => 'Edoovillage', 'field' => 'link', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
  $metrics[1] = array('label' => 'Date created', 'field' => 'createdDate', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[2] = array('label' => 'Hubs', 'field' => 'hub', 'aggregate' => 'no', 'picker' => 'yes', 'menu' => "yes", 'slider' => "no");
  $metrics[3] = array('label' => 'Needed (N)', 'field' => 'needed', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[4] = array('label' => 'In transit (T)', 'field' => 'intransit', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[5] = array('label' => 'Delivered (D)', 'field' => 'delivered', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[6] = array('label' => 'Remaining (R = N-T-D)', 'field' => 'remaining', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[7] = array('label' => '% Completed', 'field' => 'pcompleted', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "yes");
  $metrics[8] = array('label' => 'Number of students', 'field' => 'numStudents', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[9] = array('label' => 'Status', 'field' => 'status', 'aggregate' => 'no', 'picker' => 'yes', 'menu' => "yes", 'slider' => "no");
  $metrics[10] = array('label' => 'Country', 'field' => 'country', 'aggregate' => 'no', 'picker' => 'yes', 'menu' => "yes", 'slider' => "no");
  $metrics[11] = array('label' => 'Completed', 'field' => 'completed', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
  $metrics[12] = array('label' => 'Open', 'field' => 'open', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
  $metrics[13] = array('label' => 'Semaphore', 'field' => 'semaphore', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");

  cache_set($cacheIndexPrefix . 'objects', $objects, 'cache');
  cache_set($cacheIndexPrefix . 'metrics', $metrics, 'cache');
  cache_set($cacheIndexPrefix . 'selected_nids', $selectedNids, 'cache');

  }

  if(!$justCache && $switcher)
    print_dashboard_switcher($userId);
  print_dashboard_objects('edoovillage', 'edoovillages', $objects, $metrics, $selectedNids, $cacheIndexPrefix, $justCache);

}


/**
 * Displays a dashboard of hubs
 * 
 * @param userId Identifier of the user or NULL for all users
 * @param country Country in which the hubs reside or NULL for all countries 
 * @param switcher If TRUE, display the switcher; otherwise, don't display it
 * @param $justCache If TRUE, only update the cache and do not display the dashboard
 *
 * @return A dashboard of the edoovillages 
 *
 */
function lbd_display_dashboard_hubs($userId = NULL, $country = NULL, $switcher = TRUE, $justCache = FALSE) {
  if($userId != NULL || $country != NULL)
    $volatileString = 'volatile_';
  else
    $volatileString = '';
  $cacheIndexPrefix = 'lbd_visualization_hub_' . $volatileString . 'u' . $userId . 'c' . $country . '_';
  if(!$justCache && ($cache = cache_get($cacheIndexPrefix . 'objects'))) {
    $objects = $cache->data;
    $cache = cache_get($cacheIndexPrefix . 'metrics');
    $metrics = $cache->data;
    $cache = cache_get($cacheIndexPrefix . 'selected_nids');
    $selectedNids = $cache->data;
  }

  else {
 
  global $language;
  $defaultLanguage = language_default();
  $defaultLanguageCode = $defaultLanguage->language;

  $numberOfQueries = 1;
  $queryAll = "(SELECT DISTINCT entity_id FROM field_data_field_hub_manager_s_)";
  $query = "SELECT t.entity_id FROM (" . $queryAll;
  $placeHolders = array();

  // Fetch all objects
  if($country != NULL)
  {
    $queryCountry = "(SELECT nid AS entity_id FROM location_instance 
                      WHERE lid IN (SELECT lid FROM location WHERE country=:co) 
                      AND nid IN (SELECT entity_id FROM field_data_field_hub_manager_s_))";
    $query = $query . " UNION ALL " . $queryCountry;
    $placeHolders[':co'] = $country;
    $numberOfQueries++;
  } 
  if($userId != NULL)
  {
    # First select: query to find all hubs connected to a user via a dooject
    # Second select: query to find all hubs connected to a user via a dootrip
    # Third select: query to find all hubs that the user is managing
    $queryUser = "(SELECT tUser.entity_id FROM 
                   ((SELECT DISTINCT field_hub_laptop_target_id AS entity_id FROM field_data_field_hub_laptop WHERE 
                     (entity_id IN (SELECT entity_id FROM field_data_field_manager WHERE field_manager_target_id=:uid) OR 
                      entity_id IN (SELECT entity_id FROM field_data_field_tagger WHERE field_tagger_target_id=:uid) OR 
                      entity_id IN (SELECT entity_id FROM field_data_field_additional_followers WHERE field_additional_followers_target_id=:uid) OR 
                      entity_id IN (SELECT entity_id FROM field_data_field_additional_editors WHERE field_additional_editors_target_id=:uid)))
                    UNION
                    (SELECT DISTINCT field_hub_laptop_target_id AS entity_id FROM field_data_field_hub_laptop WHERE 
                      entity_id IN (SELECT field_laptops_target_id FROM field_data_field_laptops WHERE 
                      entity_id IN (SELECT entity_id FROM field_data_field_dootripper_s_ WHERE field_dootripper_s__target_id=:uid)))
                    UNION
                    (SELECT DISTINCT entity_id FROM field_data_field_hub_manager_s_ WHERE field_hub_manager_s__target_id=:uid)
                    UNION
                    (SELECT DISTINCT entity_id FROM field_data_field_hub_additional_editors WHERE field_hub_additional_editors_target_id=:uid))
                    AS tUser)";
    $query = $query . " UNION ALL " . $queryUser;
    $placeHolders[':uid'] = $userId;
    $numberOfQueries++;
  }

  $query = $query . ") AS t GROUP BY entity_id HAVING count(*) >= " . $numberOfQueries;
  $result = db_query($query, $placeHolders);

  $objects = array();
  $selectedNids = array();

  $limitCounter = 1000000;
  foreach($result as $item) {
    if($limitCounter-- == 0)
      break;

    $objectNid = $item->entity_id;
    array_push($selectedNids, $objectNid);

    $node = node_load($item->entity_id);

    // Extract title 
    $objects[$objectNid]['title'] = $node->title; 

    // Extract manager's email
    $query = "select mail from users where uid in (select field_hub_manager_s__target_id 
	      from field_data_field_hub_manager_s_ where entity_id=" . $node->nid . ")";

    # Do not enable this, since at Labdoo we don't openly advertise
    # email addresses
//    $objects[$objectNid]['email'] = db_query($query)->fetchField(); 


    // Extract needed field 
    $objects[$objectNid]['needed'] = $needed = labdoo_get_demand(NULL, $objectNid, FALSE);

    // Extract intransit field 
    $objects[$objectNid]['intransit'] = $inTransit = labdoo_getnum_doojects(NULL, $objectNid, "T1") +
                                                     labdoo_getnum_doojects(NULL, $objectNid, "S3");

    // Extract delivered field 
    $objects[$objectNid]['delivered'] = $delivered = labdoo_getnum_doojects(NULL, $objectNid, "S4"); 

    // Extract remaining field 
    $remaining = $needed - $inTransit - $delivered;
    if($remaining < 0)
        $remaining = 0;
    $objects[$objectNid]['remaining'] = $remaining; 

    // Extract 'Shared' metrics used for aggregate calculations (to avoid double counting)
    // Extract needed shared 
    $objects[$objectNid]['neededShared'] = $neededShared = floor(labdoo_get_demand(NULL, $objectNid, TRUE));

    // Extract remaining field 
    $remainingShared = $neededShared - $inTransit - $delivered;
    if($remainingShared < 0)
        $remainingShared = 0;
    $objects[$objectNid]['remainingShared'] = $remainingShared; 

    // Extract %completed field 
    if($needed != 0)
        $objects[$objectNid]['pcompleted'] = floor(($needed - $remaining) / $needed * 100.00); 
    else
        $objects[$objectNid]['pcompleted'] = 0;

    // Extract creation date
    $objects[$objectNid]['createdDate'] = format_date($node->created, 'custom', 'Y-m-d');

    // Extract status/semaphore field 
    $semaphoreValue = labdoo_lib_get_field($node, 'field_hub_status', 'node', 'value'); 
    if($semaphoreValue == 'open') {
      $objects[$objectNid]['semaphore'] = "<strong><font color='#109618'>$semaphoreValue</font></strong>";
    }
    else if($semaphoreValue == 'inactive') {
      $objects[$objectNid]['semaphore'] = "<strong><font color='orange'>$semaphoreValue</font></strong>"; 
    }
    else {
      $objects[$objectNid]['semaphore'] = "<strong><font color='red'>$semaphoreValue</font></strong>"; 
    }

    // Get the country
    $country_names = location_get_iso3166_list();
    if(isset($node->location['country'])) 
      $objects[$objectNid]['country'] = $node->location['country'];
    else
      $objects[$objectNid]['country'] = "";
    if(array_key_exists($objects[$objectNid]['country'], $country_names))
        $objects[$objectNid]['country'] = $country_names[$objects[$objectNid]['country']];

    $titleCountry = $objects[$objectNid]['country'];
    $titleCity = $node->location['city'];
        
    // The link
    $urlPath = drupal_get_path_alias("node/" . $objectNid, $language->language);
    if($language->language != $defaultLanguageCode)
      $urlPath = $language->language . "/" . $urlPath;
    $objects[$objectNid]['link'] = "<!--$titleCountry $titleCity $node->title (comment added to help alphabetically order this column)-->" . 
                                   "<a href=/$urlPath>$titleCountry | $titleCity | $node->title</a>";

  }

  if(empty($objects)) {

    $objects[0]['title'] = ""; 
    $objects[0]['hub'] = "";
    $objects[0]['needed'] = "";
    $objects[0]['neededShared'] = "";
    $objects[0]['intransit'] = "";
    $objects[0]['delivered'] = ""; 
    $objects[0]['remaining'] = ""; 
    $objects[0]['remainingShared'] = ""; 
    $objects[0]['pcompleted'] = 0;
    $objects[0]['country'] = "";
    $objects[0]['link'] = "No hubs in this view"; 
    $objects[0]['createdDate'] = ""; 
    $objects[0]['semaphore'] = ""; 
    $objects[0]['email'] = "";

  }

  $metrics[0] = array('label' => 'Hub', 'field' => 'link', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
  $metrics[1] = array('label' => 'Needed (N)', 'field' => 'needed', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[2] = array('label' => 'Remaining (R = N-T-D)', 'field' => 'remaining', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[3] = array('label' => '% Completed', 'field' => 'pcompleted', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "yes");
  $metrics[4] = array('label' => 'Country', 'field' => 'country', 'aggregate' => 'no', 'picker' => 'yes', 'menu' => "yes", 'slider' => "no");
  $metrics[5] = array('label' => 'Semaphore', 'field' => 'semaphore', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[6] = array('label' => 'Needed', 'field' => 'neededShared', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
  $metrics[7] = array('label' => 'In transit (T)', 'field' => 'intransit', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[8] = array('label' => 'Delivered (D)', 'field' => 'delivered', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[9] = array('label' => 'Remaining (R = N-T-D)', 'field' => 'remainingShared', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
  $metrics[10] = array('label' => 'Date created', 'field' => 'createdDate', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[11] = array('label' => 'E-mail', 'field' => 'email', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");

  cache_set($cacheIndexPrefix . 'objects', $objects, 'cache');
  cache_set($cacheIndexPrefix . 'metrics', $metrics, 'cache');
  cache_set($cacheIndexPrefix . 'selected_nids', $selectedNids, 'cache');

  }

  if(!$justCache && $switcher)
    print_dashboard_switcher($userId);
  print_dashboard_objects('hub', 'hubs', $objects, $metrics, $selectedNids, $cacheIndexPrefix, $justCache);

}


/**
 * Displays a dashboard of dootrips
 * 
 * @param userId Identifier of the user or NULL for all users
 * @param country Country where the dootrips are terminated or NULL for all countries 
 * @param switcher If TRUE, display the switcher; otherwise, don't display it
 * @param $justCache If TRUE, only update the cache and do not display the dashboard
 *
 * @return A dashboard of the dootrips 
 *
 */
function lbd_display_dashboard_dootrips($userId = NULL, $country = NULL, $switcher = TRUE, $justCache = FALSE) {
  if($userId != NULL || $country != NULL)
    $volatileString = 'volatile_';
  else
    $volatileString = '';
  $cacheIndexPrefix = 'lbd_visualization_dootrip_' . $volatileString . 'u' . $userId . 'c' . $country . '_';
  if(!$justCache && ($cache = cache_get($cacheIndexPrefix . 'objects'))) {
    $objects = $cache->data;
    $cache = cache_get($cacheIndexPrefix . 'metrics');
    $metrics = $cache->data;
    $cache = cache_get($cacheIndexPrefix . 'selected_nids');
    $selectedNids = $cache->data;
  }

  else {
 
  global $language;
  $defaultLanguage = language_default();
  $defaultLanguageCode = $defaultLanguage->language;

  $numberOfQueries = 1;
  $queryAll = "(SELECT entity_id FROM field_data_field_destination_of_the_trip)";
  $query = "SELECT t.entity_id FROM (" . $queryAll;
  $placeHolders = array();

  // Fetch all objects
  if($country != NULL)
  {
    $queryCountry = "(SELECT tUser.entity_id FROM
                      ((SELECT entity_id FROM field_data_field_destination_of_the_trip 
                        WHERE field_destination_of_the_trip_lid IN (SELECT lid FROM location WHERE country=:co))
                       UNION
                       (SELECT entity_id FROM field_data_field_origin_of_the_trip 
                        WHERE field_origin_of_the_trip_lid IN (SELECT lid FROM location WHERE country=:co)))
                     AS tUser)";
    $query = $query . " UNION ALL " . $queryCountry;
    $placeHolders[':co'] = $country;
    $numberOfQueries++;
  } 
  if($userId != NULL)
  {
    $queryUser = "(SELECT tUser.entity_id FROM
                  (SELECT entity_id FROM field_data_field_dootripper_s_ WHERE (field_dootripper_s__target_id=:uid)
                   UNION
                  (SELECT DISTINCT entity_id FROM field_data_field_dootrip_additional_editors WHERE field_dootrip_additional_editors_target_id=:uid))
                  AS tUser)";
    $query = $query . " UNION ALL " . $queryUser;
    $placeHolders[':uid'] = $userId; 
    $numberOfQueries++;
  }

  $query = $query . ") AS t GROUP BY entity_id HAVING count(*) >= " . $numberOfQueries++;
  $result = db_query($query, $placeHolders);

  $objects = array();
  $selectedNids = array();

  foreach($result as $item) {
    $objectNid = $item->entity_id;
    array_push($selectedNids, $objectNid);

    $node = node_load($item->entity_id);

    // Extract title 
    $objects[$objectNid]['title'] = $node->title; 

    // Extract capacity field 
    $objects[$objectNid]['capacity'] = labdoo_lib_get_field($node, 'field_dootrip_capacity', 'node', 'value');

    // Extract number of dootrips field 
    $objects[$objectNid]['numberDootrips'] = 1;

    // Extract status field 
    $statusLabels = list_allowed_values(field_info_field("field_status_dootrip"));
    $objects[$objectNid]['status'] = $statusLabels[labdoo_lib_get_field($node, 'field_status_dootrip', 'node', 'value')];

    $dootripStatus = labdoo_lib_get_field($node, 'field_status_dootrip', 'node', 'value');

    // Extract number of dootronics in transit and transported
    $wNode = entity_metadata_wrapper('node', $node);
    $dootronicsList = $wNode->field_laptops->value();
    $numDootronics = count($dootronicsList);
    $arrivalData = new DateObject(labdoo_lib_get_field($node, 'field_arrival_date', 'node', 'value'), 
                                  date_default_timezone(), 
                                  DATE_FORMAT_ISO);
    $nowDate = date_now();
    $timePastDootrip = $arrivalData->diff($nowDate);
    $timePastDootripInt =(int)$timePastDootrip->format("%r%a");
    // Check if the dootrip was completed or not and set values accordingly
    if($timePastDootripInt > 0) {
      $objects[$objectNid]['completed'] = $numDootronics;
      $objects[$objectNid]['inTransit'] = 0;
    }
    else { 
      $objects[$objectNid]['completed'] = 0;
      $objects[$objectNid]['inTransit'] = $numDootronics;
    }

    // Mark the dootronic as loaded if Capacity <= Transported + In Transit
    if($objects[$objectNid]['capacity'] <= $objects[$objectNid]['completed'] + $objects[$objectNid]['inTransit']) {
      $objects[$objectNid]['loaded'] = "Full";
    }
    else {
      $objects[$objectNid]['loaded'] = "Not full";
    }

    // Extract dootrippers
    $objects[$objectNid]['dootrippers'] = '';
    $dootrippersList = field_get_items('node', $node, 'field_dootripper_s_'); 
    if(!empty($dootrippersList)) {
        foreach($dootrippersList as $element) {
          $userObj = user_load($element['target_id']);
          $objects[$objectNid]['dootrippers'] = $objects[$objectNid]['dootrippers'] . ' ' . $userObj->name;
        }
    }

    // Extract additional dootripper info
    $objects[$objectNid]['additionalInfo'] = labdoo_lib_get_field($node, 'field_additional_traveler_s_info', 'node', 'value');

    // Extract creation date
    $objects[$objectNid]['createdDate'] = format_date($node->created, 'custom', 'Y-m-d');
    
    // Get the source country
    $allLocations = field_get_items('node', $node, 'field_origin_of_the_trip');
    $location = $allLocations[0];
    $country_names = location_get_iso3166_list();
    $objects[$objectNid]['srcCountry'] = $location['country'];
    if(array_key_exists($location['country'], $country_names))
        $objects[$objectNid]['srcCountry'] = $country_names[$location['country']];

    // Get the destination country
    $allLocations = field_get_items('node', $node, 'field_destination_of_the_trip');
    $location = $allLocations[0];
    $country_names = location_get_iso3166_list();
    $objects[$objectNid]['dstCountry'] = $location['country'];
    if(array_key_exists($location['country'], $country_names))
        $objects[$objectNid]['dstCountry'] = $country_names[$location['country']];

    // Get departure date
    $objects[$objectNid]['departureDate'] = labdoo_lib_get_field($node, 'field_departure_date', 'node', 'value');

    // Get arrival date
    $objects[$objectNid]['arrivalDate'] = labdoo_lib_get_field($node, 'field_arrival_date', 'node', 'value');
        
    $urlPath = drupal_get_path_alias("node/" . $objectNid, $language->language);
    if($language->language != $defaultLanguageCode)
      $urlPath = $language->language . "/" . $urlPath;
    $objects[$objectNid]['link'] = "<!--$node->title (comment added to help alphabetically order this column)-->" . 
                                   "<a href=/$urlPath>$node->title</a>";
  }

  if(empty($objects)) {
    $objects[0]['title'] = ""; 
    $objects[0]['capacity'] = 0;
    $objects[0]['numberDootrips'] = "";
    $objects[0]['status'] = "";
    $objects[0]['inTransit'] = 0;
    $objects[0]['completed'] = 0;
    $objects[0]['loaded'] = "";
    $objects[0]['dootrippers'] = "";
    $objects[0]['additionalInfo'] = "";
    $objects[0]['srcCountry'] = "";
    $objects[0]['dstCountry'] = "";
    $objects[0]['departureDate'] = "";
    $objects[0]['arrivalDate'] = "";
    $objects[0]['link'] = "No dootrips in this view"; 
    $objects[0]['createdDate'] = ""; 
  }

  $metrics[0] = array('label' => 'Dootrip', 'field' => 'link', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
  $metrics[1] = array('label' => 'Departure', 'field' => 'departureDate', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[2] = array('label' => 'Capacity', 'field' => 'capacity', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "yes", 'slider' => "yes");
  $metrics[3] = array('label' => 'In transit', 'field' => 'inTransit', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "yes", 'slider' => "yes");
  $metrics[4] = array('label' => 'Transported', 'field' => 'completed', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "yes", 'slider' => "yes");
  $metrics[5] = array('label' => 'Status', 'field' => 'status', 'aggregate' => 'no', 'picker' => 'yes', 'menu' => "yes", 'slider' => "no");
  $metrics[6] = array('label' => 'Load', 'field' => 'loaded', 'aggregate' => 'no', 'picker' => 'yes', 'menu' => "yes", 'slider' => "no");
  $metrics[7] = array('label' => 'Origin', 'field' => 'srcCountry', 'aggregate' => 'no', 'picker' => 'yes', 'menu' => "yes", 'slider' => "no");
  $metrics[8] = array('label' => 'Destination', 'field' => 'dstCountry', 'aggregate' => 'no', 'picker' => 'yes', 'menu' => "yes", 'slider' => "no");
  $metrics[9] = array('label' => 'Arrival', 'field' => 'arrivalDate', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[10] = array('label' => 'Dootrippers', 'field' => 'dootrippers', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");
  $metrics[11] = array('label' => 'Additional info', 'field' => 'additionalInfo', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
  $metrics[12] = array('label' => 'Total number of dootrips', 'field' => 'numberDootrips', 'aggregate' => 'yes', 'picker' => 'no', 'menu' => "no", 'slider' => "no");
  $metrics[13] = array('label' => 'Date created', 'field' => 'createdDate', 'aggregate' => 'no', 'picker' => 'no', 'menu' => "yes", 'slider' => "no");

  cache_set($cacheIndexPrefix . 'objects', $objects, 'cache');
  cache_set($cacheIndexPrefix . 'metrics', $metrics, 'cache');
  cache_set($cacheIndexPrefix . 'selected_nids', $selectedNids, 'cache');

  }

  if(!$justCache && $switcher)
    print_dashboard_switcher($userId);
  print_dashboard_objects('dootrip', 'dootrips', $objects, $metrics, $selectedNids, $cacheIndexPrefix, $justCache);

}


/**
 * print_dashboard_switcher
 *
 */
function print_dashboard_switcher($userId = NULL)
{
  global $language;
  global $user;

  if ($language->language != 'en')
    $lang = '/' . $language->language;
  else
    $lang = '';

  switch(drupal_get_path_alias(current_path())) {
    
    case "content/dootronics-dashboard":
      $url1 = "Dootronics";
      $url2 = "Edoovillages";
      $url3 = "Hubs";
      $url4 = "Dootrips";
      break;

    case "content/hubs-dashboard":
      $url1 = "Hubs";
      $url2 = "Edoovillages";
      $url3 = "Dootronics";
      $url4 = "Dootrips";
      break;

    case "content/edoovillages-dashboard":
      $url1 = "Edoovillages";
      $url2 = "Dootronics";
      $url3 = "Hubs";
      $url4 = "Dootrips";
      break;

    # Path alias for compatibility with 1.0 
    case "call-for-laptops":
      $url1 = "Edoovillages";
      $url2 = "Dootronics";
      $url3 = "Hubs";
      $url4 = "Dootrips";
      break;

    case "content/dootrips-dashboard":
      $url1 = "Dootrips";
      $url2 = "Dootronics";
      $url3 = "Hubs";
      $url4 = "Edoovillages";
      break;

  }

  // If $userId is equal to the user currently
  // logged in, this is a "myObjects" type of dashboard
  if($userId != NULL and $userId == $user->uid) {
    $urlParameters = "?u=" . $userId;
    $dashboardTitle = t('My Labdoo metrics | Select dashboard:');
  }
  else {
    $urlParameters = "";
    $dashboardTitle = t('Labdoo metrics | Select dashboard:');
  }

  $code = "<strong><span style='color:#ff3300;'>$dashboardTitle</span></strong><br/>
           <a href='../content/visualization-dashboards' target='_blank' style='font-size: 12px'>Dashboard help</a>
           <br/>
           <form>
           <select name='URL' onchange='window.location.href=this.form.URL.options[this.form.URL.selectedIndex].value'>
           <option value='$lang/content/$url1-dashboard$urlParameters'>$url1</option>
           <option value='$lang/content/$url2-dashboard$urlParameters'>$url2</option>
           <option value='$lang/content/$url3-dashboard$urlParameters'>$url3</option>
           <option value='$lang/content/$url4-dashboard$urlParameters'>$url4</option>
           </select>
           </form>";

  print($code);

  return;
}


/**
 *
 * Prints a dashboard of Labdoo objects
 * Examples of objects are: doojects, hubs, edoovillages. 
 *
 * @param $objectsType Type of objects
 * @param $objectsName Objects name
 * @param $objects List of all objects to display 
 * @param $metrics Array with all the consolidated metrics 
 * @param $nodeIds List of all node identifiers 
 * @param $cacheIndexPrefix The cache index prefix to use when looking up the cache
 * @param $justCache If TRUE, only update the cache and do not display the dashboard
 *
 */
function print_dashboard_objects($objectsType, $objectsName, $objects, $metrics, $nodeIds, $cacheIndexPrefix, $justCache = FALSE)
{

  // Check the cache first
  if($cache = cache_get($cacheIndexPrefix . 'num_objects_by_city')) {
    $objectsGeoCount = $cache->data;
  }
  else {
    $objectsGeoCount = labdoo_getnum_objects_by_city($objectsType, $nodeIds, $maxEntries=1000000);
    cache_set($cacheIndexPrefix . 'num_objects_by_city', $objectsGeoCount, 'cache');
  }
  if($justCache)
    return;

  $lastElement = sizeof($metrics)+1;

  $numTableColumns = 1;
  foreach($metrics as $metric)
    if($metric['menu'] == 'yes')
      $numTableColumns = $numTableColumns + 1;

  print("

<html xmlns='http://www.w3.org/1999/xhtml'>
<head>
  <meta http-equiv='content-type' content='text/html; charset=utf-8'/>
    <title>Dootronics Dashboard Using Google Visualization API</title>
    <script type='text/javascript' src='https://www.google.com/jsapi'></script>
    <script type='text/javascript'>google.charts.load('current', {packages: ['controls', 'geomap', 'geochart']});</script>
    <script type='text/javascript'>
      function drawVisualization() {
        // Prepare the data
        var data = google.visualization.arrayToDataTable([
        [");

  $dataString = "";
  foreach($metrics as $index => $metric) {
    $dataString .= "'" . $metrics[$index]['label'] . "', ";
  }

  $dataString .= "'Free-Text Search', 'ConstantNull'], ";

  foreach($objects as $object) {
    $searchtext = '';
    foreach($object as $key => $field) {
      // Add a prefix key to allow for field specific searches
      // such as id:000000001
      $thisString = strtolower($key) . ":" . trim($field);
      if($key == 'dootripId') # Since dootripId can contain a list of dootrips, process it differently 
        $thisString = trim(str_replace("#", "dootripid:", $field));
      $strValue = sanitizeStringForVisualization($thisString); 
      $searchtext = $searchtext . ' ' . $strValue;
    }

    $dataString .= '[';

    foreach($metrics as $index => $metric) { 
      // TODO: checking for whether it is numeric or a string.
      // May not be the most generic way to approach this
      // and may not accommodate for all cases.
      //
      // NOTE: Some fields can take both types (numeric and string) depending on the actual
      // value. One example is the 'Serial Number', which could for instance be 1234 or "ABCD".
      // This would lead to mixing both types in the same column. Google Charts needs to infer
      // a single type value for the whole column. This results in NaN for those values that are
      // strings when the column value is inferred to be numeric. To resolve this, 
      // we include strcmp() here against these fields that can accept
      // both string and numeric values to force them to be interpreted as strings all the time
      // in order to avoid the NaN issue. For now, only the serialNumber field is in this category.
      if(is_numeric($object[$metric['field']]) && strcmp($metric['field'], "serialNumber")) {
        $dataString .= $object[$metric['field']] . ',';
      }

      else { // it's a string, sanitize it and print it
        $strValue = sanitizeStringForVisualization($object[$metric['field']]);
        $dataString .= '"' . $strValue . '",';
      }
    }
    $dataString .= '"' . $searchtext . '",""],';
  }

  print($dataString);

  print("

]);

  ");

  foreach($metrics as $index => $metric) {
    if($metric['slider'] == "yes")
      print("

// Define a slider control for the Needed column.
var sliderControl$index = new google.visualization.ControlWrapper({
                            'controlType': 'NumberRangeFilter',
                            'containerId': 'sliderControlID$index',
                            'options': {
                              'filterColumnLabel': '" . $metric['label'] . "' ,
                              'ui': {'labelStacking': 'vertical'}
                            }
                          });


    ");
  }

  foreach($metrics as $index => $metric) {
    if($metric['picker'] == "yes")
      print("

var pickerControl$index = new google.visualization.ControlWrapper({
                             'controlType': 'CategoryFilter',
                             'containerId': 'pickerControlID$index',
                             'options': {
                               'filterColumnLabel': '" . $metric['label'] . "' ,
                               'ui': {
                                 'labelStacking': 'vertical',
                                 'allowTyping': false,
                                 'caption': '" . $metric['label'] . "' ,
                                 'label': false
                               }
                             }
                           });

    ");
  }

  print("
/*
 * StringFilter control for the 'Text' column
 */
var stringFilter = new google.visualization.ControlWrapper({
                     'controlType': 'StringFilter',
                     'containerId': 'controlTextFilter',
                     'options': {
                       'filterColumnLabel': 'Free-Text Search',
                       'label': 'Free-Text Search',
                       'matchType': 'any'
                     },
    state: {
        value: '" . $_GET['search'] . "'
    } 
                   });
  ");

  // Set the default sorting column
  $tableSortingCol = 0;
  if($objectsType == "dootrip") 
    $tableSortingCol = 1;
  if($objectsType == "edoovillage") 
    $tableSortingCol = 1;

  print("

/*
 * Table chart
 */
var table = new google.visualization.ChartWrapper({
              'chartType': 'Table',
              'containerId': 'chartTable',
              'options': {
                'width': '1020px',
                'allowHtml': true, 
                'showRowNumber': true,
                'page': 'enable',
                'pageSize' : 50,
                'sortColumn' : $tableSortingCol,
                'sortAscending' : false,
                'sort' : 'enable'
              },
              view: {columns: [0, 1, 2, 3, 4, 5, 6]} 
            });

/*
 * Create a dashboard
 */
new google.visualization.Dashboard(document.getElementById('dashboard')).

/*
 * Establish bindings
 */
bind([

  ");

  foreach($metrics as $index => $metric) {
    if($metric['picker'] == "yes")
      print("pickerControl$index, ");
    if($metric['slider'] == "yes")
      print("sliderControl$index, ");
  }

  print("
 stringFilter], [table]).

/*
 * Draw the dashboard.
 */
draw(data);

/*
 * Create a column-table
 */
var columnsTable = new google.visualization.DataTable();
columnsTable.addColumn('number', 'colIndex');
columnsTable.addColumn('string', 'colLabel');
var initState = {
  selectedValues: []
};


/*
 * put the columns into this data table (skip column 0)
 * do not include the first column (the key) and the last column (the NULL column used for aggregation)
 */

 ");

  $columnsCounter = 0;
  foreach($metrics as $index => $metric) { 
    if($metric['menu'] == "yes") {
      print("columnsTable.addRow([$index, data.getColumnLabel($index)]);");
      if($columnsCounter < 6)
        print("initState.selectedValues.push(data.getColumnLabel($index));");
      $columnsCounter++;
    }
  }
   
  print("

/*
 * Picker to control the columns displayed in the table 
 */
var columnFilter = new google.visualization.ControlWrapper({
                     controlType: 'CategoryFilter',
                     containerId: 'pickerControlIDCol',
                     dataTable: columnsTable,
                     options: {
                       filterColumnLabel: 'colLabel',
                       ui: {
                         'caption': 'Fields',
                         allowTyping: false,
                         allowMultiple: true,
                         'label': false,
                       }
                     },
                     state: initState
                   });

/*
 * Draw it
 */
columnFilter.draw();

/*
 * Listen for events on the column-filter
 */
google.visualization.events.addListener(columnFilter, 'statechange', function () {
        var state = columnFilter.getState();
        var row;
        var columnIndices = [0];
        for (var i = 0; i < state.selectedValues.length; i++) {
            row = columnsTable.getFilteredRows([{
                column: 1,
                value: state.selectedValues[i]
            }])[0];
            columnIndices.push(columnsTable.getValue(row, 0));
        }
        // sort the indices into their original order
        columnIndices.sort(function (a, b) {
            return (a - b);
        });

        table.setView({
            columns: columnIndices
        });

        table.draw();

    });

/*
 * Geolocation map
 */
var dataMap = new google.visualization.DataTable();
dataMap.addColumn('number', 'LATITUDE', 'Latitude');
dataMap.addColumn('number', 'LONGITUDE', 'Longitude');
dataMap.addColumn('string', 'DESCRIPTION', 'Description');
dataMap.addColumn('number', 'Number of "); print($objectsName . "', 'Number of Dootronics');

var rows = [

");

  foreach ($objectsGeoCount as $item) {
    print("[" . $item['lat']. ", " . $item['lon'] . ", \"" . $item['city'] . ", " . $item['country'] . "\", ". $item['count'] ."],");
  }

  print("

];

dataMap.addRows(rows);

var options = {
    title : 'The Labdoo Global Inventory',
    region: 'world',
    displayMode: 'markers',
    colorAxis: {colors: ['red', 'orange']},
    width: 700,
    legend: 'none'
  };

var container = document.getElementById('chartLaptopsGeo');
var geomap = new google.visualization.GeoChart(container);
geomap.draw(dataMap, options);

/*
 * Column chart
 */
var columnChart = new google.visualization.ChartWrapper({
                    'chartType': 'ColumnChart',
                    'options': {
                      'colors': ['#a5682a', '#DC3912', '#109618', '#005e7a', '#5a5a5a', '#ff8000', '#E67300', 'gray'],
                      'width': 1000,
                      'legend': { position: 'right', alignment: 'center' },
                      'chartArea' : {  left: '50', width: '60%', height: '80%' }
                    },
                    'containerId': 'chartColumns',
                    'dataTable' : google.visualization.data.group(data, [$lastElement],
                    [

  ");

  foreach($metrics as $index => $metric)
    if($metric['aggregate'] == 'yes')
      print("{'column': $index, 'aggregation': google.visualization.data.sum, 'type': 'number'},");  

  print("

])});  

columnChart.draw();

/*
 * Updates the table based on user's input
 */
function updateColumnChart() {
  // group the data of the filtered table and set the result in the column chart.
  columnChart.setDataTable(google.visualization.data.group(
    // get the filtered results
    table.getDataTable(),
    [$lastElement],
    [

  ");

  foreach($metrics as $index => $metric)
    if($metric['aggregate'] == 'yes')
      print("{'column': $index, 'aggregation': google.visualization.data.sum, 'type': 'number'},");  

  print("

]));

  // redraw the column chart to reflect changes
  columnChart.draw();
}

  ");

  foreach($metrics as $index => $metric) { 
    if($metric['picker'] == "yes")
      print("google.visualization.events.addListener(pickerControl$index, 'statechange', updateColumnChart);");
    if($metric['slider'] == "yes")
      print("google.visualization.events.addListener(sliderControl$index, 'statechange', updateColumnChart);");
  }

  print("

google.visualization.events.addListener(stringFilter, 'statechange', updateColumnChart);
// Fire a 'ready' event to ensure the URL 'search' parameter is loaded if present
// Example of query: https://www.labdoo.org/content/edoovillages-dashboard?search=covid-19
google.visualization.events.addListener(stringFilter, 'ready', updateColumnChart);

/*
 * Attach an event handler to the CSV download button
 */
var runOnce = google.visualization.events.addListener(table, 'ready', function () {
  document.getElementById('dashboardToCSV').onclick = function () {
    var tempData = table.getDataTable();
    var csvData = [];
    var tmpArr = [];
    var tmpStr = '';
    for (var i = 0; i < $numTableColumns; i++) {
      // replace double-quotes with double-double quotes for CSV compatibility
      tmpStr = tempData.getColumnLabel(i).replace(/\"/g, '\"\"');
      tmpArr.push('\"' + tmpStr + '\"');
    }
    csvData.push(tmpArr.join('\t'));
    for (var i = 0; i < tempData.getNumberOfRows(); i++) {
      tmpArr = [];
      for (var j = 0; j < $numTableColumns; j++) {
        tmpStr = tempData.getColumnLabel(j).replace(/\"/g, '\"\"');
        switch(tempData.getColumnType(j)) {
          case 'string':
            // Some text could potentially produce a benign error.
            // Catch the exception and in the event of an error 
            // continue processing so that we can still produce
            // a downloadable CSV file.
            try {
            tmpStr = tempData.getValue(i, j).replace(/\"/g, '\"\"');
            // remove html tags
            tmpStr = tmpStr.replace(/<\/?[^>]+(>|$)/g, \"\"); 
            }
            catch(err) {}
            tmpArr.push('\"' + tmpStr + '\"');
            break;
          case 'number':
            tmpArr.push(tempData.getValue(i, j));
            break;
          case 'boolean':
            tmpArr.push((tempData.getValue(i, j)) ? 'True' : 'False');
            break;
          default:
            // should never trigger
        }
      }
      csvData.push(tmpArr.join('\t'));
    }
    var output = csvData.join('\\n');
    var uri = 'data:text/csv;charset=UTF-8,' + encodeURIComponent(output);
    window.open(uri);
  };
  google.visualization.events.removeListener(runOnce);
});

}

google.setOnLoadCallback(drawVisualization);

</script>
  </head>
  <body style='font-family: Arial;border: 0 none;'>
    <div id='dashboard'>
      <table align='center' width='1000px'>
        <tr style='vertical-align: top; 'horizontal-align: center;' >
          <td colspan='3'; style='width: 1000px; align: center;'>
            <div id='chartLaptopsGeo' style='align: center; width: 600px; height: 360px;'></div>
            <br/><br/><br/>
          </td>
        </tr>
        <tr style='vertical-align: top'>
          <td colspan='3'; style='width: 580px'>
            <div id='chartColumns'></div>
            <br/>
          </td>
        </tr>
        <tr><td><a href='../content/searching-inside-visualization-dashboards-and-meaning-fields' target='_blank'>" . t("Helper: How to search and description of fields") . "</a></tr></td>
        <tr style='vertical-align: top'>
          <td colspan='1'; style='width: 200px'>
            <div id='controlTextFilter'></div>
          </td></tr><tr>

  ");

  foreach($metrics as $index => $metric) 
    if($metric['slider'] == "yes")
      print("
          <td colspan='1'; style='width: 300px'>
            <div id='sliderControlID$index'></div>
          </td>
      ");

  print("

        </tr>
  ");


  foreach($metrics as $index => $metric) 
    if($metric['picker'] == "yes")
      print("
        <tr style='vertical-align: top'>
          <td colspan='3'; style='width: 780px'>
            <div id='pickerControlID$index'></div>
          </td>
        </tr>
      ");

  print("
        <tr style='vertical-align: top'>
          <td colspan='3'; style='width: 780px'>
            <div id='pickerControlIDCol'></div>
          </td>
        </tr>
        <tr style='vertical-align: top'>
          <td colspan='3'; style='width: 780px'>
            <div style='float: left;' id='chartTable'></div>
          </td>
        </tr>
        <tr style='vertical-align: top'>
          <td colspan='3'; style='width: 780px'>
            <input type='button' id='dashboardToCSV' value='Download' />
          </td>
        </tr>
      </table>
    </div>
  </body>
</html>

");

}


/**
 * Displays the edoovillage data slider
 * 
 * @param edoovillageId Identifier of the edoovillage 
 *
 * @return The edoovillage data slider 
 *
 */
function lbd_display_slider_edoovilage_data($edoovillageId = NULL) {
  global $user;

  if($edoovillageId == NULL || !is_numeric($edoovillageId)) 
    return;
  $loadedNode = node_load($edoovillageId);
  if($loadedNode == FALSE)
    return;
  if($loadedNode->type != "edoovillage")
    return;

  $viewedNode = node_view($loadedNode);
  print(labdoo_render_map_geolocate_node($edoovillageId, True, "map-slider-edoovilage-data"));
  print(drupal_render($viewedNode));

  return;
}


/**
 * Displays the edoovillage doojects slider
 * 
 * @param edoovillageId Identifier of the edoovillage 
 *
 * @return The edoovillage "check doojects" slider 
 *
 */
function lbd_display_slider_edoovilage_doojects($edoovillageId = NULL) {

  if($edoovillageId == NULL || !is_numeric($edoovillageId)) 
    return;
  $loadedNode = node_load($edoovillageId);
  if($loadedNode == FALSE)
    return;
  if($loadedNode->type != "edoovillage")
    return;

  print("<a href='content/about-dootronics' target='_blank'>" . t("[Click here for help about dootronics]") . "</a><br/><hr/>");
  print("<a href='content/dootronics-dashboard?e=$edoovillageId' target='_blank'>" . 
        t("[Click here to see in detail all the dootronics for this edoovillage]") . "</a><br/><hr/>");


  // Render the download button
  $viewResult = views_get_view_result('slider_dashboard', 'block_edoovillage_doojects', $edoovillageId);
  print(labdoo_views_download_button($viewResult, "downloadButtonEdoovillageDoojects"));

  // Render the table
  $block = module_invoke('views', 'block_view', 'slider_dashboard-block_edoovillage_doojects');
  print($block["content"]["#markup"]);

  return;
}


/**
 * Displays the edoovillage metrics slider
 * 
 * @param edoovillageId Identifier of the edoovillage 
 *
 * @return The edoovillage metrics slider 
 *
 */
function lbd_display_slider_edoovilage_metrics($edoovillageId) {

  if($edoovillageId == NULL || !is_numeric($edoovillageId)) 
    return;
  $loadedNode = node_load($edoovillageId);
  if($loadedNode == FALSE)
    return;
  if($loadedNode->type != "edoovillage")
    return;

  print("<a href='content/visualization-dashboards' target='_blank'>[Click here to learn more about visualizing metrics]</a><br/><hr/>");
  print("<a href='content/dootronics-dashboard?e=$edoovillageId' target='_blank'>" . 
        t("[Click here to expand the results of this dashboard]") . "</a><br/><hr/>");


  lbd_display_dashboard_doojects(NULL, NULL, $edoovillageId, NULL, FALSE); 

  return;
}


/**
 * Displays the edoovillage dootrips slider
 * 
 * @param edoovillageId Identifier of the edoovillage 
 *
 * @return The edoovillage dootrips slider 
 *
 */
function lbd_display_slider_edoovilage_dootrips($edoovillageId) {
  global $language;
  $defaultLanguage = language_default();
  $defaultLanguageCode = $defaultLanguage->language;

  if($edoovillageId == NULL || !is_numeric($edoovillageId)) 
    return;
  $loadedNode = node_load($edoovillageId);
  if($loadedNode == FALSE)
    return;
  if($loadedNode->type != "edoovillage")
    return;

  $tableArray[0][0] = t('Dootrip #');
  $tableArray[0][1] = t('Departure');
  $tableArray[0][2] = t('Origin');
  $tableArray[0][3] = t('Destination');
  $tableArray[0][4] = t('Status');
  $tableArray[0][5] = t('Capacity');
  $tableArray[0][6] = t('Dootronics assigned');
 
  $header = array(array('data' => $tableArray[0][0], 'nowrap' => 'nowrap'),
                  array('data' => $tableArray[0][1], 'nowrap' => 'nowrap'), 
                  array('data' => $tableArray[0][2], 'nowrap' => 'nowrap'), 
                  array('data' => $tableArray[0][3], 'nowrap' => 'nowrap'),
                  array('data' => $tableArray[0][4], 'nowrap' => 'nowrap'),
                  array('data' => $tableArray[0][5], 'nowrap' => 'nowrap'),
                  array('data' => $tableArray[0][6], 'nowrap' => 'nowrap'));

  $rows = array();
  $query = "SELECT DISTINCT(field_dootrips_target_id) FROM field_data_field_dootrips WHERE entity_id IN 
           (SELECT entity_id FROM field_data_field_edoovillage_destination WHERE field_edoovillage_destination_target_id=:edoovillageId) 
           UNION SELECT entity_id FROM field_data_field_preferred_edoovillages WHERE field_preferred_edoovillages_target_id=:edoovillageId";
  $placeHolders[':edoovillageId'] = $edoovillageId;
  $result = db_query($query, $placeHolders);

  $i = 0; 
  foreach($result as $item) {
    // Load the dootrip node
    $dootripNid = $item->field_dootrips_target_id;
    $dootripNode = node_load($dootripNid);
    if(!$dootripNode)
      continue;
    $urlPath = drupal_get_path_alias("node/" . $dootripNid, $language->language);

    // Get the name
    $dootripName = explode(" - ", $dootripNode->title)[0];
    // Get source location
    $allLocations = field_get_items('node', $dootripNode, 'field_origin_of_the_trip');
    $location = $allLocations[0];
    $thisCountrySrc = labdoo_country_code2name($location['country']);
    $thisCitySrc = $location['city'];
    // Get destination location
    $allLocations = field_get_items('node', $dootripNode, 'field_destination_of_the_trip');
    $location = $allLocations[0];
    $thisCountryDst = labdoo_country_code2name($location['country']);
    $thisCityDst = $location['city'];
    // Get dootrip status
    $status = field_get_items('node', $dootripNode, 'field_origin_of_the_trip');
    $statusLabels = list_allowed_values(field_info_field("field_status_dootrip"));
    $status = $statusLabels[labdoo_lib_get_field($dootripNode, 'field_status_dootrip', 'node', 'value')];
    // Get dootrip capacity
    $capacity = labdoo_lib_get_field($dootripNode, 'field_dootrip_capacity', 'node', 'value'); 
    // Get number of dootrips assigned
    $assigned = labdoo_lib_get_field($dootripNode, 'field_number_of_doojects_assigne', 'node', 'value'); 
    // Get departure date
    $departure = labdoo_lib_get_field($dootripNode, 'field_departure_date', 'node', 'value'); 
    // Create the row
    $i++;
    $j = 0;
    $tableArray[$i][$j++] = "<a href='" . $urlPath . "'>" . $dootripName . "</a>";
    $tableArray[$i][$j++] = $departure;
    $tableArray[$i][$j++] = $thisCitySrc . ", " . $thisCountrySrc;
    $tableArray[$i][$j++] = $thisCityDst . ", " . $thisCountryDst;
    $tableArray[$i][$j++] = $status;
    $tableArray[$i][$j++] = $capacity;
    $tableArray[$i][$j++] = $assigned;
    $j = 0;
    $rows[] = array(array('data' => $tableArray[$i][$j++], 'nowrap' => 'nowrap'),
                    array('data' => $tableArray[$i][$j++], 'nowrap' => 'nowrap'), 
                    array('data' => $tableArray[$i][$j++], 'nowrap' => 'nowrap'), 
                    array('data' => $tableArray[$i][$j++], 'nowrap' => 'nowrap'), 
                    array('data' => $tableArray[$i][$j++], 'nowrap' => 'nowrap'), 
                    array('data' => $tableArray[$i][$j++], 'nowrap' => 'nowrap'), 
                    array('data' => $tableArray[$i][$j++], 'nowrap' => 'nowrap'));
  }
 
  $output = theme('table', array('header' => $header, 'rows' => $rows ));
  print("<a href='content/dootrip-system' target='_blank'>[Click here for help about dootrips]</a><br/><hr/>");
  // Render the download button
  print(labdoo_table_download_button($tableArray, "downloadButtonDootrips"));
  // Render the table
  print($output);
  return;
}


/**
 * Displays the edoovillage GICs slider
 * 
 * @param edoovillageId Identifier of the edoovillage 
 *
 * @return The edoovillage GICs slider 
 *
 */
function lbd_display_slider_edoovilage_gics($edoovillageId) {

  if($edoovillageId == NULL || !is_numeric($edoovillageId)) 
    return;
  $loadedNode = node_load($edoovillageId);
  if($loadedNode == FALSE)
    return;
  if($loadedNode->type != "edoovillage")
    return;

  $formGics = drupal_get_form('gic_table', $edoovillageId); 
  print("<a href='content/global-inventory-checks-gics' target='_blank'>[Click here for help about GICs]</a><br/><hr/>");
  print(drupal_render($formGics)); 

  return;
}


/**
 * Displays the edoovillage/hub story slider
 * 
 * @param nodeId Identifier of the edoovillage/hub 
 *
 * @return The story slider 
 *
 */
function lbd_display_slider_story($nodeId) {
  global $language;
  global $user;
  $langCode = $language->language;
  $userRoles = array_values($user->roles);
  $code = "";

  if($nodeId == NULL || !is_numeric($nodeId)) 
    return;

  $code .= '<img src="/profiles/labdoo/files/pictures/labdoo-stories-header.png" width="550px"/>';

  $loadedNode = node_load($nodeId);

  $query = "SELECT entity_id FROM field_data_field_story_edoovillage WHERE field_story_edoovillage_target_id=$nodeId";
  $storyNodeId = db_query($query)->fetchField();

  if($storyNodeId) {
    $loadedStoryNode = node_load($storyNodeId);
    if($loadedStoryNode == FALSE)
      return;
    $sectionItems = field_get_items('node', $loadedStoryNode, 'field_story_section');
    $code .= "<hr/><table width='500px'>";
    foreach ($sectionItems as $sectionItem) {
      $sectionField = field_collection_field_get_entity($sectionItem);
      $sectionWrapper = entity_metadata_wrapper('field_collection_item', $sectionField);
      $sectionHeading = $sectionWrapper->field_story_heading->value();
      $sectionBody = $sectionWrapper->field_story_text->value();
      $sectionBody = $sectionBody['safe_value'];
//      $sectionPicture = $sectionWrapper->field_story_picture->value();
      $code .= "<tr><td width='25px'></td><td align='center'>";
      $code .= "<font color='red'><strong><center>" . $sectionHeading . "</center></strong></font>";
      $code .= "</td></tr>";
      $code .= "<tr><td width='50px'></td><td align='center'>";
      $code .= "<center>" . $sectionBody . "</center>";
      $code .= "</td></tr>";
      break; # show only a preview
    }
    $code .= "</table>";
    $storyUri = drupal_get_path_alias("node/" . $storyNodeId, $langCode);
    $code .= "<a href='$storyUri'>" . t("Read more") . "...</a>"; 
  }
  else {
    $code .= "<p/><ul><li>" . 
      "To learn more about how to write a Labdoo story, go to <a href='content/labdoo-stories' target='_blank'>this page.</a>"; 
    if(in_array('superhub manager', $userRoles) || 
       in_array('edoovillage manager', $userRoles) || 
       in_array('hub manager', $userRoles) || 
       in_array('wiki manager', $userRoles) || 
       in_array('administrator', $userRoles)) { 
      $code .= "</li><li>To write a story for this $loadedNode->type, <a href='node/add/labdoo-story?field_story_edoovillage=$nodeId'>click here</a>";
    }
    $code .= "</li></ul>";
  }

  print $code;
  return;
}


/**
 * Displays the hub data slider
 * 
 * @param hubId Identifier of the hub
 *
 * @return The hub data slider 
 *
 */
function lbd_display_slider_hub_data($hubId) {
  global $user;

  if($hubId == NULL || !is_numeric($hubId)) 
    return;
  $loadedNode = node_load($hubId);
  if($loadedNode == FALSE)
    return;
  if($loadedNode->type != "hub")
    return;

  if($loadedNode->status == 0) {
    print('<strong><font size="4" font color="#FF2400">'. t("This hub is currently not active" . '</font></strong>'));
    return;
  }

  $viewedNode = node_view($loadedNode);
  print(labdoo_render_map_geolocate_node($hubId, False, "map-slider-hub-data"));
  print(drupal_render($viewedNode));

  return;
}


/**
 * Displays the hub edoovillages slider
 * 
 * @param hubId Identifier of the hub
 *
 * @return The hub edoovillages slider 
 *
 */
function lbd_display_slider_hub_edoovillages($hubId) {

  if($hubId == NULL || !is_numeric($hubId)) 
    return;
  $loadedNode = node_load($hubId);
  if($loadedNode == FALSE)
    return;
  if($loadedNode->type != "hub")
    return;

  print("<a href='content/managing-edoovillages' target='_blank'>" . t("[Click here for help about edoovillages]") . "</a><br/><hr/>");
  print("<a href='content/edoovillages-dashboard?h=$hubId' target='_blank'>" .  
        t("[Click here to see in detail all the edoovillages managed by this hub]") . "</a><br/><hr/>");


  // Render the download button
  $viewResult = views_get_view_result('slider_dashboard', 'block_hub_edoovillages', $hubId);
  print(labdoo_views_download_button($viewResult, "downloadButtonHubEdoovillages"));

  // Render the table
  $block = module_invoke('views', 'block_view', 'slider_dashboard-block_hub_edoovillages');
  // The following line of code should be a "print render ($block);" statement.
  // However, doing so generates a bunch of unharming PHP warnings. It is difficult
  //  to debug that as it could come from any 3rd party module. Instead, to avoid
  // the warnings (which also consume unnecessary cycles), since we just need
  // the first part of the array, we just generate our own print statement.
  print($block["content"]["#markup"]);

  return;
}


/**
 * Displays the hub doojects slider
 * 
 * @param hubId Identifier of the hub
 *
 * @return The hub doojects slider 
 *
 */
function lbd_display_slider_hub_doojects($hubId) {

  if($hubId == NULL || !is_numeric($hubId)) 
    return;
  $loadedNode = node_load($hubId);
  if($loadedNode == FALSE)
    return;
  if($loadedNode->type != "hub")
    return;

  $block = module_invoke('views', 'block_view', 'slider_dashboard-block_hub_doojects');

  print("<a href='content/about-dootronics' target='_blank'>" . t("[Click here for help about dootronics]") . "</a><br/><hr/>");
  print("<a href='content/dootronics-dashboard?h=$hubId' target='_blank'>" . 
        t("[Click here to see in detail all the dootronics for this hub]") . "</a><br/><hr/>");

  // Render the download button
  $viewResult = views_get_view_result('slider_dashboard', 'block_hub_doojects', $hubId);
  print(labdoo_views_download_button($viewResult, "downloadButtonHubDoojects"));

  // Render the table
  print($block["content"]["#markup"]);

  return;
}


/**
 * Displays the hub metrics slider
 * 
 * @param hubId Identifier of the hub
 *
 * @return The hub metrics slider 
 *
 */
function lbd_display_slider_hub_metrics($hubId) {

  if($hubId == NULL || !is_numeric($hubId)) 
    return;
  $loadedNode = node_load($hubId);
  if($loadedNode == FALSE)
    return;
  if($loadedNode->type != "hub")
    return;

  print("<a href='content/visualization-dashboards' target='_blank'>[Click here to learn more about visualizing metrics]</a><br/><hr/>");
  print("<a href='content/dootronics-dashboard?h=$hubId' target='_blank'>" . 
        t("[Click here to expand the results of this dashboard]") . "</a><br/><hr/>");
  lbd_display_dashboard_doojects(NULL, $hubId, NULL, NULL, FALSE); 
  return;
}


/*
 * Displays progress columns chars for edoovillages and hubs.
 *
 * @param integer $objectNid The node identifier of a hub or an edoovillage.
 * @param string $type Determines the type of node corresponding to $objectNid. Can be either "edoovillage" or "hub".
 *
 * @return Code that generates the progress column char of the given object. 
 *
 */
function lbd_display_dooject_column_chart($objectNid, $type)
{
  $htmlCode = "";

  if($type == "edoovillage") {
    $numNeeded   = labdoo_get_demand($objectNid, NULL, FALSE);
    $numTransit  = labdoo_getnum_doojects($objectNid, NULL, "T1") + labdoo_getnum_doojects($objectNid, NULL, "S3");
    $numDeployed = labdoo_getnum_doojects($objectNid, NULL, "S4") + labdoo_getnum_doojects($objectNid, NULL, "S7") + labdoo_getnum_doojects($objectNid, NULL, "S8");
    $numNeedRecycle = labdoo_getnum_doojects($objectNid, NULL, "S5") + labdoo_getnum_doojects($objectNid, NULL, "S9");
    $numRecycled = labdoo_getnum_doojects($objectNid, NULL, "S6");
    $numTagged = $numTransit + $numDeployed + $numNeedRecycle + $numRecycled;
    $xLabel = "Dootronics";
  }
  else if ($type == "hub") {
    $numNeeded   = labdoo_get_demand(NULL, $objectNid, FALSE);
    $numTransit  = labdoo_getnum_doojects(NULL, $objectNid, "T1") + labdoo_getnum_doojects(NULL, $objectNid, "S3");
    $numDeployed = labdoo_getnum_doojects(NULL, $objectNid, "S4") + labdoo_getnum_doojects(NULL, $objectNid, "S7") + labdoo_getnum_doojects(NULL, $objectNid, "S8");
    $numNeedRecycle = labdoo_getnum_doojects(NULL, $objectNid, "S5") + labdoo_getnum_doojects(NULL, $objectNid, "S9");
    $numRecycled = labdoo_getnum_doojects(NULL, $objectNid, "S6");
    $numTagged = $numTransit + $numDeployed + $numNeedRecycle + $numRecycled + 
                 labdoo_getnum_doojects(NULL, $objectNid, "S0") + 
                 labdoo_getnum_doojects(NULL, $objectNid, "S1") + 
                 labdoo_getnum_doojects(NULL, $objectNid, "L1") + 
                 labdoo_getnum_doojects(NULL, $objectNid, "S2");
    $xLabel = "Dootronics";
  }
  else {
    return;
  }

  $htmlCode = '
<script type="text/javascript" src="https://www.google.com/jsapi"></script>
<script type="text/javascript">
  google.load("visualization", "1.1", {packages:["corechart"], callback: drawChart});
  function drawChart() {
  var data_column_chart_project = google.visualization.arrayToDataTable([
    ["Project", "Dootronics needed", "Dootronics tagged", "Dootronics in transit", "Dootronics delivered (working)", "Dootronics delivered (broken)", "Dootronics recycled"],
';

  $htmlCode = $htmlCode . '
    ["' . $xLabel . '", '.$numNeeded.', '.$numTagged.', '.$numTransit.', '.$numDeployed.', '.$numNeedRecycle.', '.$numRecycled.'],
  ]);

  var options_column_chart_project = {
    seriesType: "bars",
    colors: ["#a5682a", "#0099CC", "#DC3912", "#109618", "orange", "gray"],

    width : 680, 
    chartArea : {  left: 50, width: \'60%\', height: \'80%\' }
  };

  var chart_column_chart_project = new google.visualization.ComboChart(document.getElementById("chart_div_column_chart_project"));
  chart_column_chart_project.draw(data_column_chart_project, options_column_chart_project);

  }
</script>
<body>
  <div id="chart_div_column_chart_project" style="align: left; width: 450px; height: 225px;"></div>
</body>
';

  return $htmlCode;
}


/*
 * Rebuild the dashboards  
 * To avoid too much computational overhead, we have two versions:
 *    higher_frequency (that should be run more often) and 
 *    lower_frequency (that should be run less often)
 *
 * Dec 20, 2020: Added lbd_visualize_rebuild_dashboards_dootronics() to just rebuild the dootronics dashboard.
 *               As this dashboard is growing fast, we had to switch to a batch approach to reconstruct it.
 *               So we need to run it more often too, thus we are going to reconstruct it separately at its own pace.
 *
 * This method is to be run via an external cron job like this:
 *   40 * * * * /usr/bin/drush --root=/var/www/lbd/ php-eval "lbd_visualize_rebuild_dashboards_higher_frequency();"
 *   30 *\/2 * * * /usr/bin/drush --root=/var/www/lbd/ php-eval "lbd_visualize_rebuild_dashboards_lower_frequency();"
 *   5-59/10 * * * * /usr/bin/drush --root=/var/www/lbd/ php-eval "lbd_visualize_rebuild_dashboards_dootronics();"
 *
 */
function lbd_visualize_rebuild_dashboards_dootronics() {

  // Re-compute the general (non-volatile marked) dashboards
  lbd_display_dashboard_doojects(NULL, NULL, NULL, NULL, TRUE, TRUE);
  drupal_set_message("Rebuilt the dootronics dashboard");
 
  return;
}

function lbd_visualize_rebuild_dashboards_higher_frequency() {

  // Clean up all the volatile-marked entries (these are all dashboards
  // different than the general ones) for laptops and dootrips 
  // (these are considered top priority according to user feedback)
  cache_clear_all('lbd_visualization_dooject_volatile', 'cache', TRUE);
  cache_clear_all('lbd_visualization_dootrip_volatile', 'cache', TRUE);
  drupal_set_message("Cleared dootronic and dootrip general dashboards");

  // Re-compute the general (non-volatile marked) dashboards
  lbd_display_dashboard_dootrips(NULL, NULL, TRUE, TRUE);
  drupal_set_message("Rebuilt the dootrips dashboard");

  // Re-compute the highest volume hubs dashboards (these take long to
  // load, so we recompute them here since they were just cleaned up 
  // above)
  lbd_display_dashboard_doojects(NULL, 431, NULL, NULL, TRUE, TRUE);
  lbd_display_dashboard_doojects(NULL, 440, NULL, NULL, TRUE, TRUE);
  lbd_display_dashboard_doojects(NULL, 15811, NULL, NULL, TRUE, TRUE);
  lbd_display_dashboard_doojects(NULL, 218, NULL, NULL, TRUE, TRUE);
  drupal_set_message("Rebuilt the hub specific dashboards");

  return;
}


function lbd_visualize_rebuild_dashboards_lower_frequency() {

  // Clean up all the volatile-marked entries (these are all dashboards
  // different than the general ones) for edoovillages and hubs 
  // (these are considered lower priority according to user feedback)
  cache_clear_all('lbd_visualization_edoovillage_volatile', 'cache', TRUE);
  cache_clear_all('lbd_visualization_hub_volatile', 'cache', TRUE);
  drupal_set_message("Cleared edoovillage and hub Labdoo dashboards");

  // Re-compute the general (non-volatile marked) dashboards
  lbd_display_dashboard_hubs(NULL, NULL, TRUE, TRUE); 
  drupal_set_message("Rebuilt the hubs dashboard");
  lbd_display_dashboard_edoovillages(NULL, NULL, NULL, TRUE, TRUE); 
  drupal_set_message("Rebuilt the edoovillages dashboard");

//  // Re-compute the hubs dashboards 
//  $query = "SELECT nid FROM node WHERE type='hub'";
//  $result = db_query($query);
//  foreach($result as $item) {
//    lbd_display_dashboard_doojects(NULL, $item->nid, NULL, NULL, TRUE, TRUE);
//  }
//  drupal_set_message("Rebuilt the hub specific dashboards");

  return;
}

